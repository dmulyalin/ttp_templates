{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Templates count: 54 Template Text Parser Templates This repository contains a collection of TTP templates. If you solved a problem using TTP and feel that your work can be useful to other people, feel free to raise an issue or submit pull request to include your template(s) in this repository. Refer to Contribute Guide for details. Documentation: https://dmulyalin.github.io/ttp_templates/ Repository: https://github.com/dmulyalin/ttp_templates TTP: https://ttp.readthedocs.io/ Installation From PyPi: pip install ttp-templates or latest from GitHub master branch (need Git installed on the system): pip install git+https://github.com/dmulyalin/ttp_templates.git Sample usage This example demonstrates how to parse Test Platform output for show run | sec interface command using platform/test_platform_show_run_pipe_sec_interface.txt template. Code from ttp_templates import parse_output import pprint data = \"\"\" interface GigabitEthernet1/3.251 description Customer #32148 encapsulation dot1q 251 ip address 172.16.33.10 255.255.255.128 shutdown ! interface GigabitEthernet1/3.251 description Customer #32148 encapsulation dot1q 251 ip address 172.16.33.10 255.255.255.128 shutdown \"\"\" result = parse_output ( data = data , platform = \"Test Platform\" , command = \"show run | sec interface\" ) pprint . pprint ( result ) # prints: # [[[{'description': 'Customer #32148', # 'disabled': True, # 'dot1q': '251', # 'interface': 'GigabitEthernet1/3.251', # 'ip': '172.16.33.10', # 'mask': '255.255.255.128'}, # {'description': 'Customer #32148', # 'disabled': True, # 'dot1q': '251', # 'interface': 'GigabitEthernet1/3.251', # 'ip': '172.16.33.10', # 'mask': '255.255.255.128'}]]] Sample code to parse Cisco IOS output in a structure compatible with ietf-interfaces YANG module. Code from ttp_templates import get_template from ttp import ttp import pprint data1 = \"\"\" interface GigabitEthernet1/3.251 description Customer #32148 encapsulation dot1q 251 ip address 172.16.33.10 255.255.255.128 shutdown ! interface GigabitEthernet1/4 description vCPEs access control ip address 172.16.33.10 255.255.255.128 ! \"\"\" data2 = \"\"\" interface GigabitEthernet1/5 description Works data ip mtu 9000 ! interface GigabitEthernet1/7 description Works data v6 ipv6 address 2001::1/64 ipv6 address 2001:1::1/64 \"\"\" template = get_template ( yang = \"ietf-interfaces\" , platform = \"cisco_ios\" ) parser = ttp ( template = template ) parser . add_input ( data1 ) parser . add_input ( data2 ) parser . parse () res = parser . result () pprint . pprint ( res ) # prints: # [{'comment': '', # 'exception': {}, # 'result': [{'ietf-interfaces:interfaces': {'interface': [{'admin-status': 'down', # 'description': 'Customer ' # '#32148', # 'enabled': False, # 'ietf-ip:ipv4': {'address': [{'ip': '172.16.33.10', # 'netmask': '255.255.255.128', # 'origin': 'static'}]}, # 'if-index': 1, # 'link-up-down-trap-enable': 'enabled', # 'name': 'GigabitEthernet1/3.251', # 'oper-status': 'unknown', # 'statistics': {'discontinuity-time': '1970-01-01T00:00:00+00:00'}, # 'type': 'iana-if-type:ethernetCsmacd'}, # {'admin-status': 'up', # 'description': 'vCPEs ' # 'access ' # 'control', # 'enabled': True, # 'ietf-ip:ipv4': {'address': [{'ip': '172.16.33.10', # 'netmask': '255.255.255.128', # 'origin': 'static'}]}, # 'if-index': 1, # 'link-up-down-trap-enable': 'enabled', # 'name': 'GigabitEthernet1/4', # 'oper-status': 'unknown', # 'statistics': {'discontinuity-time': '1970-01-01T00:00:00+00:00'}, # 'type': 'iana-if-type:ethernetCsmacd'}]}}, # {'ietf-interfaces:interfaces': {'interface': [{'admin-status': 'up', # 'description': 'Works ' # 'data', # 'enabled': True, # 'ietf-ip:ipv4': {'mtu': 9000}, # 'if-index': 1, # 'link-up-down-trap-enable': 'enabled', # 'name': 'GigabitEthernet1/5', # 'oper-status': 'unknown', # 'statistics': {'discontinuity-time': '1970-01-01T00:00:00+00:00'}, # 'type': 'iana-if-type:ethernetCsmacd'}, # {'admin-status': 'up', # 'description': 'Works ' # 'data ' # 'v6', # 'enabled': True, # 'ietf-ip:ipv6': {'address': [{'ip': '2001::1', # 'origin': 'static', # 'prefix-length': 64}, # {'ip': '2001:1::1', # 'origin': 'static', # 'prefix-length': 64}]}, # 'if-index': 1, # 'link-up-down-trap-enable': 'enabled', # 'name': 'GigabitEthernet1/7', # 'oper-status': 'unknown', # 'statistics': {'discontinuity-time': '1970-01-01T00:00:00+00:00'}, # 'type': 'iana-if-type:ethernetCsmacd'}]}}], # 'valid': {0: True, 1: True}}] How templates collections structured This repository contains three collections of templates corresponding to folder names: platform collection - mimics ntc-templates API and follows same naming rule yang collection - contains templates capable of producing YANG compatible structures out of text data misc collection - miscellaneous templates for various use cases organized in folders Platform collection templates files naming rule {{ vendor_os }}_{{ command_with_underscores }}.txt - lower case only. Naming rules details: All space symbols ' ' replaced with underscores. Pipe symbol | replaced with pipe in template name. For example, template to parse Cisco IOS show run | section interface command output must be named cisco_ios_show_running_config_pipe_section_interface.txt Dash symbols - replaced with underscores. For example, template to parse Huawei display current-configuration interface command output must be named huawei_display_current_configuration_interface.txt YANG collection templates files naming rule {{ YANG module name }}_{{ platform_name }}.txt - lower case only Naming rules details: All space symbols ' ' replaced with underscore. Dash symbol - does not replaced with underscore. For example, template to produce output compatible with openconfig-lldp YANG model for Cisco IOS must be named openconfig-lldp_cisco_xr.txt Misc collection templates files naming rule {{ usecase folder }}/{{ template name }}.txt - upper or lower case Naming rules details: Nothing replaced with anything, provided template name used as is. Additional Templates Resources List of resources with TTP templates: TTP SrosParser - https://pypi.org/project/ttp-sros-parser/ by h4ndzdatm0ld Template for parsing \"show run\" for Cisco IOS - https://github.com/tbotnz/ios-show-run-ttp by tbotnz Template for Cisco ASA configuration - https://gist.github.com/consentfactory/85872fc83453d1735b15aed3e47a9763 by consentfactory","title":"Overview"},{"location":"#template-text-parser-templates","text":"This repository contains a collection of TTP templates. If you solved a problem using TTP and feel that your work can be useful to other people, feel free to raise an issue or submit pull request to include your template(s) in this repository. Refer to Contribute Guide for details. Documentation: https://dmulyalin.github.io/ttp_templates/ Repository: https://github.com/dmulyalin/ttp_templates TTP: https://ttp.readthedocs.io/","title":"Template Text Parser Templates"},{"location":"#installation","text":"From PyPi: pip install ttp-templates or latest from GitHub master branch (need Git installed on the system): pip install git+https://github.com/dmulyalin/ttp_templates.git","title":"Installation"},{"location":"#sample-usage","text":"This example demonstrates how to parse Test Platform output for show run | sec interface command using platform/test_platform_show_run_pipe_sec_interface.txt template. Code from ttp_templates import parse_output import pprint data = \"\"\" interface GigabitEthernet1/3.251 description Customer #32148 encapsulation dot1q 251 ip address 172.16.33.10 255.255.255.128 shutdown ! interface GigabitEthernet1/3.251 description Customer #32148 encapsulation dot1q 251 ip address 172.16.33.10 255.255.255.128 shutdown \"\"\" result = parse_output ( data = data , platform = \"Test Platform\" , command = \"show run | sec interface\" ) pprint . pprint ( result ) # prints: # [[[{'description': 'Customer #32148', # 'disabled': True, # 'dot1q': '251', # 'interface': 'GigabitEthernet1/3.251', # 'ip': '172.16.33.10', # 'mask': '255.255.255.128'}, # {'description': 'Customer #32148', # 'disabled': True, # 'dot1q': '251', # 'interface': 'GigabitEthernet1/3.251', # 'ip': '172.16.33.10', # 'mask': '255.255.255.128'}]]] Sample code to parse Cisco IOS output in a structure compatible with ietf-interfaces YANG module. Code from ttp_templates import get_template from ttp import ttp import pprint data1 = \"\"\" interface GigabitEthernet1/3.251 description Customer #32148 encapsulation dot1q 251 ip address 172.16.33.10 255.255.255.128 shutdown ! interface GigabitEthernet1/4 description vCPEs access control ip address 172.16.33.10 255.255.255.128 ! \"\"\" data2 = \"\"\" interface GigabitEthernet1/5 description Works data ip mtu 9000 ! interface GigabitEthernet1/7 description Works data v6 ipv6 address 2001::1/64 ipv6 address 2001:1::1/64 \"\"\" template = get_template ( yang = \"ietf-interfaces\" , platform = \"cisco_ios\" ) parser = ttp ( template = template ) parser . add_input ( data1 ) parser . add_input ( data2 ) parser . parse () res = parser . result () pprint . pprint ( res ) # prints: # [{'comment': '', # 'exception': {}, # 'result': [{'ietf-interfaces:interfaces': {'interface': [{'admin-status': 'down', # 'description': 'Customer ' # '#32148', # 'enabled': False, # 'ietf-ip:ipv4': {'address': [{'ip': '172.16.33.10', # 'netmask': '255.255.255.128', # 'origin': 'static'}]}, # 'if-index': 1, # 'link-up-down-trap-enable': 'enabled', # 'name': 'GigabitEthernet1/3.251', # 'oper-status': 'unknown', # 'statistics': {'discontinuity-time': '1970-01-01T00:00:00+00:00'}, # 'type': 'iana-if-type:ethernetCsmacd'}, # {'admin-status': 'up', # 'description': 'vCPEs ' # 'access ' # 'control', # 'enabled': True, # 'ietf-ip:ipv4': {'address': [{'ip': '172.16.33.10', # 'netmask': '255.255.255.128', # 'origin': 'static'}]}, # 'if-index': 1, # 'link-up-down-trap-enable': 'enabled', # 'name': 'GigabitEthernet1/4', # 'oper-status': 'unknown', # 'statistics': {'discontinuity-time': '1970-01-01T00:00:00+00:00'}, # 'type': 'iana-if-type:ethernetCsmacd'}]}}, # {'ietf-interfaces:interfaces': {'interface': [{'admin-status': 'up', # 'description': 'Works ' # 'data', # 'enabled': True, # 'ietf-ip:ipv4': {'mtu': 9000}, # 'if-index': 1, # 'link-up-down-trap-enable': 'enabled', # 'name': 'GigabitEthernet1/5', # 'oper-status': 'unknown', # 'statistics': {'discontinuity-time': '1970-01-01T00:00:00+00:00'}, # 'type': 'iana-if-type:ethernetCsmacd'}, # {'admin-status': 'up', # 'description': 'Works ' # 'data ' # 'v6', # 'enabled': True, # 'ietf-ip:ipv6': {'address': [{'ip': '2001::1', # 'origin': 'static', # 'prefix-length': 64}, # {'ip': '2001:1::1', # 'origin': 'static', # 'prefix-length': 64}]}, # 'if-index': 1, # 'link-up-down-trap-enable': 'enabled', # 'name': 'GigabitEthernet1/7', # 'oper-status': 'unknown', # 'statistics': {'discontinuity-time': '1970-01-01T00:00:00+00:00'}, # 'type': 'iana-if-type:ethernetCsmacd'}]}}], # 'valid': {0: True, 1: True}}]","title":"Sample usage"},{"location":"#how-templates-collections-structured","text":"This repository contains three collections of templates corresponding to folder names: platform collection - mimics ntc-templates API and follows same naming rule yang collection - contains templates capable of producing YANG compatible structures out of text data misc collection - miscellaneous templates for various use cases organized in folders","title":"How templates collections structured"},{"location":"#platform-collection-templates-files-naming-rule","text":"{{ vendor_os }}_{{ command_with_underscores }}.txt - lower case only. Naming rules details: All space symbols ' ' replaced with underscores. Pipe symbol | replaced with pipe in template name. For example, template to parse Cisco IOS show run | section interface command output must be named cisco_ios_show_running_config_pipe_section_interface.txt Dash symbols - replaced with underscores. For example, template to parse Huawei display current-configuration interface command output must be named huawei_display_current_configuration_interface.txt","title":"Platform collection templates files naming rule"},{"location":"#yang-collection-templates-files-naming-rule","text":"{{ YANG module name }}_{{ platform_name }}.txt - lower case only Naming rules details: All space symbols ' ' replaced with underscore. Dash symbol - does not replaced with underscore. For example, template to produce output compatible with openconfig-lldp YANG model for Cisco IOS must be named openconfig-lldp_cisco_xr.txt","title":"YANG collection templates files naming rule"},{"location":"#misc-collection-templates-files-naming-rule","text":"{{ usecase folder }}/{{ template name }}.txt - upper or lower case Naming rules details: Nothing replaced with anything, provided template name used as is.","title":"Misc collection templates files naming rule"},{"location":"#additional-templates-resources","text":"List of resources with TTP templates: TTP SrosParser - https://pypi.org/project/ttp-sros-parser/ by h4ndzdatm0ld Template for parsing \"show run\" for Cisco IOS - https://github.com/tbotnz/ios-show-run-ttp by tbotnz Template for Cisco ASA configuration - https://gist.github.com/consentfactory/85872fc83453d1735b15aed3e47a9763 by consentfactory","title":"Additional Templates Resources"},{"location":"api_reference/","text":"ttp_templates . parse_output ( data : str , platform : Optional [ str ] = None , command : Optional [ str ] = None , path : Optional [ str ] = None , yang : Optional [ str ] = None , misc : Optional [ str ] = None , structure : Optional [ str ] = 'list' , template_vars : Optional [ Dict ] = None ) -> Union [ Dict , List ] Function to load template text and parse data provided Valid combinations of template location path attribute is always more preferred path=\"./misc/foo/bar.txt\" platform=\"cisco_ios\", command=\"show version\" yang=\"ietf-interfaces\", platform=\"cisco_ios\" misc=\"foo_folder/bar_template.txt\" Parameters: data ( str ) \u2013 data to parse path ( Optional [ str ] ) \u2013 OS path to template to load platform ( Optional [ str ] ) \u2013 name of the platform to load template for command ( Optional [ str ] ) \u2013 command to load template for yang ( Optional [ str ] ) \u2013 name of YANG module to load template for misc ( Optional [ str ] ) \u2013 OS path to template within repository misc folder structure ( Optional [ str ] ) \u2013 results structure list, dictionary or flat_list template_vars ( Optional [ Dict ] ) \u2013 variables to load in template object Source code in ttp_templates\\ttp_templates.py 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 def parse_output ( data : str , platform : Optional [ str ] = None , command : Optional [ str ] = None , path : Optional [ str ] = None , yang : Optional [ str ] = None , misc : Optional [ str ] = None , structure : Optional [ str ] = \"list\" , template_vars : Optional [ Dict ] = None , ) -> Union [ Dict , List ]: \"\"\" Function to load template text and parse data provided **Valid combinations of template location** ``path`` attribute is always more preferred * ``path=\"./misc/foo/bar.txt\"`` * ``platform=\"cisco_ios\", command=\"show version\"`` * ``yang=\"ietf-interfaces\", platform=\"cisco_ios\"`` * ``misc=\"foo_folder/bar_template.txt\"`` :param data: data to parse :param path: OS path to template to load :param platform: name of the platform to load template for :param command: command to load template for :param yang: name of YANG module to load template for :param misc: OS path to template within repository misc folder :param structure: results structure list, dictionary or flat_list :param template_vars: variables to load in template object \"\"\" template_vars = template_vars or {} # get template text template = get_template ( platform = platform , command = command , path = path , yang = yang , misc = misc ) # create parser object parser = ttp ( data = data , template = template , vars = template_vars ) # parse and return results parser . parse ( one = True ) return parser . result ( structure = structure ) ttp_templates . get_template ( path : Optional [ str ] = None , platform : Optional [ str ] = None , command : Optional [ str ] = None , yang : Optional [ str ] = None , misc : Optional [ str ] = None ) -> str Function to locate template file and return it's content Valid combinations of template location path attribute is always more preferred path=\"./misc/foo/bar.txt\" platform=\"cisco_ios\", command=\"show version\" yang=\"ietf-interfaces\", platform=\"cisco_ios\" misc=\"foo_folder/bar_template.txt\" Parameters: path ( Optional [ str ] ) \u2013 OS path to template to load platform ( Optional [ str ] ) \u2013 name of the platform to load template for command ( Optional [ str ] ) \u2013 command to load template for yang ( Optional [ str ] ) \u2013 name of YANG module to load template for misc ( Optional [ str ] ) \u2013 OS path to template within repository misc folder Source code in ttp_templates\\ttp_templates.py 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 def get_template ( path : Optional [ str ] = None , platform : Optional [ str ] = None , command : Optional [ str ] = None , yang : Optional [ str ] = None , misc : Optional [ str ] = None , ) -> str : \"\"\" Function to locate template file and return it's content **Valid combinations of template location** ``path`` attribute is always more preferred * ``path=\"./misc/foo/bar.txt\"`` * ``platform=\"cisco_ios\", command=\"show version\"`` * ``yang=\"ietf-interfaces\", platform=\"cisco_ios\"`` * ``misc=\"foo_folder/bar_template.txt\"`` :param path: OS path to template to load :param platform: name of the platform to load template for :param command: command to load template for :param yang: name of YANG module to load template for :param misc: OS path to template within repository misc folder \"\"\" # form path to template file if path : if path . strip () . startswith ( \"ttp://\" ): path = path . strip ()[ 6 :] elif platform and command : platform = platform . lower () command = command . lower () command = command . replace ( \"|\" , \"pipe\" ) for symbol in [ \" \" , \"-\" ]: platform = platform . replace ( symbol , \"_\" ) command = command . replace ( symbol , \"_\" ) path = \"platform/ {} _ {} .txt\" . format ( platform , command ) elif platform and yang : platform = platform . lower () yang = yang . lower () for symbol in [ \" \" ]: platform = platform . replace ( symbol , \"_\" ) yang = yang . replace ( symbol , \"_\" ) path = \"yang/ {} _ {} .txt\" . format ( yang , platform ) elif misc : path = \"misc/ {} \" . format ( misc ) else : return None template_dir = os . path . abspath ( os . path . dirname ( __file__ )) template_filename = os . path . join ( template_dir , path ) # open template file and return content with open ( template_filename , mode = \"r\" , encoding = \"utf-8\" ) as f : return f . read () ttp_templates . list_templates ( pattern : str = '*' ) -> dict Function to list available templates matching given pattern. Primary usecase for this function is to simplify integration with other applications by providing API interface to list available TTP templates. Parameters: pattern ( str ) \u2013 glob pattern to filter templates by name return \u2013 dictionary with platform, yang and misc keys Source code in ttp_templates\\ttp_templates.py 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 def list_templates ( pattern : str = \"*\" ) -> dict : \"\"\" Function to list available templates matching given pattern. Primary usecase for this function is to simplify integration with other applications by providing API interface to list available TTP templates. :param pattern: glob pattern to filter templates by name :param return: dictionary with platform, yang and misc keys \"\"\" res = { \"platform\" : [], \"yang\" : [], \"misc\" : {}, } skip_files = [ \"readme.md\" ] paths = [ \"platform\" , \"yang\" , \"misc\" ] ttp_templates_dir = os . path . abspath ( os . path . dirname ( __file__ )) for path in paths : dirname = os . path . join ( ttp_templates_dir , path ) for dirpath , dirnames , filenames in os . walk ( dirname ): # get a list of parent folders names for current folder dirpath_items = dirpath . replace ( ttp_templates_dir , \"\" ) . split ( os . sep )[ 1 :] # skip if no files in folder if not filenames : continue # filter files files = [ filename for filename in filenames if ( fnmatchcase ( filename , pattern ) and filename . lower () not in skip_files ) ] # descend down dirpath_items in res and save files list ref = res for index , item in enumerate ( dirpath_items ): # check if last item and save files list if index + 1 == len ( dirpath_items ): ref [ item ] = files # create item key in res and obtain reference to its value else : ref = ref . setdefault ( item , {})","title":"API Reference"},{"location":"api_reference/#ttp_templates.parse_output","text":"Function to load template text and parse data provided Valid combinations of template location path attribute is always more preferred path=\"./misc/foo/bar.txt\" platform=\"cisco_ios\", command=\"show version\" yang=\"ietf-interfaces\", platform=\"cisco_ios\" misc=\"foo_folder/bar_template.txt\" Parameters: data ( str ) \u2013 data to parse path ( Optional [ str ] ) \u2013 OS path to template to load platform ( Optional [ str ] ) \u2013 name of the platform to load template for command ( Optional [ str ] ) \u2013 command to load template for yang ( Optional [ str ] ) \u2013 name of YANG module to load template for misc ( Optional [ str ] ) \u2013 OS path to template within repository misc folder structure ( Optional [ str ] ) \u2013 results structure list, dictionary or flat_list template_vars ( Optional [ Dict ] ) \u2013 variables to load in template object Source code in ttp_templates\\ttp_templates.py 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 def parse_output ( data : str , platform : Optional [ str ] = None , command : Optional [ str ] = None , path : Optional [ str ] = None , yang : Optional [ str ] = None , misc : Optional [ str ] = None , structure : Optional [ str ] = \"list\" , template_vars : Optional [ Dict ] = None , ) -> Union [ Dict , List ]: \"\"\" Function to load template text and parse data provided **Valid combinations of template location** ``path`` attribute is always more preferred * ``path=\"./misc/foo/bar.txt\"`` * ``platform=\"cisco_ios\", command=\"show version\"`` * ``yang=\"ietf-interfaces\", platform=\"cisco_ios\"`` * ``misc=\"foo_folder/bar_template.txt\"`` :param data: data to parse :param path: OS path to template to load :param platform: name of the platform to load template for :param command: command to load template for :param yang: name of YANG module to load template for :param misc: OS path to template within repository misc folder :param structure: results structure list, dictionary or flat_list :param template_vars: variables to load in template object \"\"\" template_vars = template_vars or {} # get template text template = get_template ( platform = platform , command = command , path = path , yang = yang , misc = misc ) # create parser object parser = ttp ( data = data , template = template , vars = template_vars ) # parse and return results parser . parse ( one = True ) return parser . result ( structure = structure )","title":"parse_output()"},{"location":"api_reference/#ttp_templates.get_template","text":"Function to locate template file and return it's content Valid combinations of template location path attribute is always more preferred path=\"./misc/foo/bar.txt\" platform=\"cisco_ios\", command=\"show version\" yang=\"ietf-interfaces\", platform=\"cisco_ios\" misc=\"foo_folder/bar_template.txt\" Parameters: path ( Optional [ str ] ) \u2013 OS path to template to load platform ( Optional [ str ] ) \u2013 name of the platform to load template for command ( Optional [ str ] ) \u2013 command to load template for yang ( Optional [ str ] ) \u2013 name of YANG module to load template for misc ( Optional [ str ] ) \u2013 OS path to template within repository misc folder Source code in ttp_templates\\ttp_templates.py 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 def get_template ( path : Optional [ str ] = None , platform : Optional [ str ] = None , command : Optional [ str ] = None , yang : Optional [ str ] = None , misc : Optional [ str ] = None , ) -> str : \"\"\" Function to locate template file and return it's content **Valid combinations of template location** ``path`` attribute is always more preferred * ``path=\"./misc/foo/bar.txt\"`` * ``platform=\"cisco_ios\", command=\"show version\"`` * ``yang=\"ietf-interfaces\", platform=\"cisco_ios\"`` * ``misc=\"foo_folder/bar_template.txt\"`` :param path: OS path to template to load :param platform: name of the platform to load template for :param command: command to load template for :param yang: name of YANG module to load template for :param misc: OS path to template within repository misc folder \"\"\" # form path to template file if path : if path . strip () . startswith ( \"ttp://\" ): path = path . strip ()[ 6 :] elif platform and command : platform = platform . lower () command = command . lower () command = command . replace ( \"|\" , \"pipe\" ) for symbol in [ \" \" , \"-\" ]: platform = platform . replace ( symbol , \"_\" ) command = command . replace ( symbol , \"_\" ) path = \"platform/ {} _ {} .txt\" . format ( platform , command ) elif platform and yang : platform = platform . lower () yang = yang . lower () for symbol in [ \" \" ]: platform = platform . replace ( symbol , \"_\" ) yang = yang . replace ( symbol , \"_\" ) path = \"yang/ {} _ {} .txt\" . format ( yang , platform ) elif misc : path = \"misc/ {} \" . format ( misc ) else : return None template_dir = os . path . abspath ( os . path . dirname ( __file__ )) template_filename = os . path . join ( template_dir , path ) # open template file and return content with open ( template_filename , mode = \"r\" , encoding = \"utf-8\" ) as f : return f . read ()","title":"get_template()"},{"location":"api_reference/#ttp_templates.list_templates","text":"Function to list available templates matching given pattern. Primary usecase for this function is to simplify integration with other applications by providing API interface to list available TTP templates. Parameters: pattern ( str ) \u2013 glob pattern to filter templates by name return \u2013 dictionary with platform, yang and misc keys Source code in ttp_templates\\ttp_templates.py 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 def list_templates ( pattern : str = \"*\" ) -> dict : \"\"\" Function to list available templates matching given pattern. Primary usecase for this function is to simplify integration with other applications by providing API interface to list available TTP templates. :param pattern: glob pattern to filter templates by name :param return: dictionary with platform, yang and misc keys \"\"\" res = { \"platform\" : [], \"yang\" : [], \"misc\" : {}, } skip_files = [ \"readme.md\" ] paths = [ \"platform\" , \"yang\" , \"misc\" ] ttp_templates_dir = os . path . abspath ( os . path . dirname ( __file__ )) for path in paths : dirname = os . path . join ( ttp_templates_dir , path ) for dirpath , dirnames , filenames in os . walk ( dirname ): # get a list of parent folders names for current folder dirpath_items = dirpath . replace ( ttp_templates_dir , \"\" ) . split ( os . sep )[ 1 :] # skip if no files in folder if not filenames : continue # filter files files = [ filename for filename in filenames if ( fnmatchcase ( filename , pattern ) and filename . lower () not in skip_files ) ] # descend down dirpath_items in res and save files list ref = res for index , item in enumerate ( dirpath_items ): # check if last item and save files list if index + 1 == len ( dirpath_items ): ref [ item ] = files # create item key in res and obtain reference to its value else : ref = ref . setdefault ( item , {})","title":"list_templates()"},{"location":"contribute/","text":"Contribute There are several things you can do to help TTP Templates project. Spread the word about TTP and TTP Templates Suggest great features and ideas Report bugs Fix typos in code, templates and documentation Write documentation Contribute new templates Improve existing templates Contribute Templates by Opening GitHub Issue Open GitHub issue using Contribute Template type and fill in required details. Contribute Templates by Pull Request Before you start, make sure to think of for each template: Template Category and Template Name Template Content Sample Data Expected Output Sample Data and Expected Output used to compose template test. Template Content placed in one of Template Category folder below using Template Name as a filename: platform category - mimics ntc-templates API and follows same naming rule - {{ vendor_os }}_{{ command_with_underscores }}.txt - lower case only yang category - contains templates capable of producing YANG compatible structures out of text data, and uses naming rule - {{ YANG module name }}_{{ platform_name }}.txt - lower case only misc category - miscellaneous templates for various use cases organized in folders, naming rule is - {{ usecase folder }}/{{ template name }}.txt - upper or lower case To prepare your working environment might need to install required packages using requirements files located in TTP Templates repository e.g.: python3 -m pip install -r requirements-dev.txt python3 -m pip install -r requirements-docs.txt To add new template or multiple templates follow these steps: Fork TTP Templates repository to your GitHub account Git clone forked TTP Templates repository to your local machine Add new TTP template file to ttp_templates/platform/ , ttp_templates/misc/<usecase>/ or ttp_templates/yang/ folder Add PyTest tests under test folder inside one of the existing files or create new file, might be good to look at existing tests for ideas on how to test the template Generate documentation using Writing Docs guide , omitting gh-deploy portion Commit changes and push them to GitHub Raise GitHub pull request to merge your changes into TTP Templates repository Writing TTP Templates Tests TTP templates use PyTest for testing. Composing tests is fairly straightforward once you figured out TTP template content, sample data and expected output. Assuming template category is platform , platform name cisco_ios , template filename is ttp_templates/platform/cisco_ios_show_running_config_pipe_section_interface.txt and template content is: <doc> Author: Author Name Contact: Contact Details Version: 0.1.0 Template to produce list of dictionaries with interface configuration details using Cisco IOSXE \"show running-config | section interface\" command output. The exact command is \"show running-config\" and not \"show running-configuration\", as it is changed in later versions of IOSXE. </doc> <group> interface {{ interface }} description {{ description | ORPHRASE }} ip address {{ ip }} {{ mask }} ! {{ _end_ }} </group> test to validate above template might look like this: import sys import pprint sys . path . insert ( 0 , \"..\" ) from ttp_templates import get_template from ttp import ttp def test_cisco_ios_show_run_pipe_section_interface (): data = \"\"\" interface Loopback0 description RID loopback ip address 192.168.31.44 255.255.255.255 ! \"\"\" expected_output = [ [ { \"description\" : \"RID loopback\" , \"interface\" : \"Loopback0\" , \"ip\" : \"192.168.31.44\" , \"mask\" : \"255.255.255.255\" } ] ] template = get_template ( platform = \"cisco_ios\" , command = \"show running-config | section interface\" ) parser = ttp ( data = data , template = template ) parser . parse () res = parser . result () assert res == expected_output That test can be placed inside test_platform_cisco_ios.py file and run using command: pytest -vv test_platform_cisco_ios::test_cisco_ios_show_run_pipe_section_interface","title":"Contribute"},{"location":"contribute/#contribute","text":"There are several things you can do to help TTP Templates project. Spread the word about TTP and TTP Templates Suggest great features and ideas Report bugs Fix typos in code, templates and documentation Write documentation Contribute new templates Improve existing templates","title":"Contribute"},{"location":"contribute/#contribute-templates-by-opening-github-issue","text":"Open GitHub issue using Contribute Template type and fill in required details.","title":"Contribute Templates by Opening GitHub Issue"},{"location":"contribute/#contribute-templates-by-pull-request","text":"Before you start, make sure to think of for each template: Template Category and Template Name Template Content Sample Data Expected Output Sample Data and Expected Output used to compose template test. Template Content placed in one of Template Category folder below using Template Name as a filename: platform category - mimics ntc-templates API and follows same naming rule - {{ vendor_os }}_{{ command_with_underscores }}.txt - lower case only yang category - contains templates capable of producing YANG compatible structures out of text data, and uses naming rule - {{ YANG module name }}_{{ platform_name }}.txt - lower case only misc category - miscellaneous templates for various use cases organized in folders, naming rule is - {{ usecase folder }}/{{ template name }}.txt - upper or lower case To prepare your working environment might need to install required packages using requirements files located in TTP Templates repository e.g.: python3 -m pip install -r requirements-dev.txt python3 -m pip install -r requirements-docs.txt To add new template or multiple templates follow these steps: Fork TTP Templates repository to your GitHub account Git clone forked TTP Templates repository to your local machine Add new TTP template file to ttp_templates/platform/ , ttp_templates/misc/<usecase>/ or ttp_templates/yang/ folder Add PyTest tests under test folder inside one of the existing files or create new file, might be good to look at existing tests for ideas on how to test the template Generate documentation using Writing Docs guide , omitting gh-deploy portion Commit changes and push them to GitHub Raise GitHub pull request to merge your changes into TTP Templates repository","title":"Contribute Templates by Pull Request"},{"location":"contribute/#writing-ttp-templates-tests","text":"TTP templates use PyTest for testing. Composing tests is fairly straightforward once you figured out TTP template content, sample data and expected output. Assuming template category is platform , platform name cisco_ios , template filename is ttp_templates/platform/cisco_ios_show_running_config_pipe_section_interface.txt and template content is: <doc> Author: Author Name Contact: Contact Details Version: 0.1.0 Template to produce list of dictionaries with interface configuration details using Cisco IOSXE \"show running-config | section interface\" command output. The exact command is \"show running-config\" and not \"show running-configuration\", as it is changed in later versions of IOSXE. </doc> <group> interface {{ interface }} description {{ description | ORPHRASE }} ip address {{ ip }} {{ mask }} ! {{ _end_ }} </group> test to validate above template might look like this: import sys import pprint sys . path . insert ( 0 , \"..\" ) from ttp_templates import get_template from ttp import ttp def test_cisco_ios_show_run_pipe_section_interface (): data = \"\"\" interface Loopback0 description RID loopback ip address 192.168.31.44 255.255.255.255 ! \"\"\" expected_output = [ [ { \"description\" : \"RID loopback\" , \"interface\" : \"Loopback0\" , \"ip\" : \"192.168.31.44\" , \"mask\" : \"255.255.255.255\" } ] ] template = get_template ( platform = \"cisco_ios\" , command = \"show running-config | section interface\" ) parser = ttp ( data = data , template = template ) parser . parse () res = parser . result () assert res == expected_output That test can be placed inside test_platform_cisco_ios.py file and run using command: pytest -vv test_platform_cisco_ios::test_cisco_ios_show_run_pipe_section_interface","title":"Writing TTP Templates Tests"},{"location":"writing_docs/","text":"Writing docs for TTP Templates TTP Templates have <doc> tag that can be used to embed documentation strings into the templates. Templates <doc> tags content is just a text, but TTP Templates documentation assumes markdown syntaxes used to populate docs. TTP Templates use mkdocs with material theme to produce documentation. TTP Templates Collection comes with generate_docs.py script, this script iterates over all folders within ttp_templates repository, loads templates and extracts <doc> tags content to form .md files, saves .md files in docs/ttp_templates folder and construct navigation tree within mkdocs.yml file. Generating Documentation First, need to write docs within the templates. Next, generate .md doc files out of TTP templates: python3 generate_docs.py Finally, use mkdocs to serve, build or deploy docs using commands: mkdocs serve - serve docs locally to view docs content via browser mkdocs build - build docs mkdocs gh-deploy - deploy docs to GitHub","title":"Writing docs"},{"location":"writing_docs/#writing-docs-for-ttp-templates","text":"TTP Templates have <doc> tag that can be used to embed documentation strings into the templates. Templates <doc> tags content is just a text, but TTP Templates documentation assumes markdown syntaxes used to populate docs. TTP Templates use mkdocs with material theme to produce documentation. TTP Templates Collection comes with generate_docs.py script, this script iterates over all folders within ttp_templates repository, loads templates and extracts <doc> tags content to form .md files, saves .md files in docs/ttp_templates folder and construct navigation tree within mkdocs.yml file.","title":"Writing docs for TTP Templates"},{"location":"writing_docs/#generating-documentation","text":"First, need to write docs within the templates. Next, generate .md doc files out of TTP templates: python3 generate_docs.py Finally, use mkdocs to serve, build or deploy docs using commands: mkdocs serve - serve docs locally to view docs content via browser mkdocs build - build docs mkdocs gh-deploy - deploy docs to GitHub","title":"Generating Documentation"},{"location":"ttp_templates/misc.N2G.cli_ip_data.a10/","text":"Reference path: ttp://misc/N2G/cli_ip_data/a10.txt Template to parse A10 devices interfaces configuration and IP ARP cache. Template Content <template name=\"a10\" results=\"per_template\"> <doc> Template to parse A10 devices interfaces configuration and IP ARP cache. </doc> <input load=\"python\"> commands = [ \"show running-config\", \"show arp all\", ] kwargs = {\"strip_prompt\": False} method = \"send_command\" platform = [\"a10\"] </input> <vars>local_hostname=\"gethostname\"</vars> <!-- Interfaces configuration group --> <group name=\"{{ local_hostname }}.interfaces.{{ interface }}\"> interface {{ interface | PHRASE | resuball(\"IfsNormalize\") }} description {{ port_description | re(\".+\") }} <group name=\"ip_addresses*\" chain=\"add_network()\" method=\"table\"> ip address {{ ip | IP }} {{ netmask }} </group> </group> <!-- ARP cache group --> <group name=\"{{ local_hostname }}.interfaces.{{ interface }}.arp*\" method=\"table\"> {{ ip | IP }} {{ mac | MAC | mac_eui }} Dynamic {{ age }} {{ interface | PHRASE | resuball(\"IfsNormalize\") }} {{ vlan }} </group> </template>","title":"cli_ip_data.a10"},{"location":"ttp_templates/misc.N2G.cli_ip_data.cisco_ios/","text":"Reference path: ttp://misc/N2G/cli_ip_data/cisco_ios.txt Template to parse Cisco IOS interfaces configuration and ARP cache. Template Content <template name=\"cisco_ios\" results=\"per_template\"> <doc> Template to parse Cisco IOS interfaces configuration and ARP cache. </doc> <input load=\"python\"> commands = [ \"show running-config\", \"show ip arp\", ] kwargs = {\"strip_prompt\": False} method = \"send_command\" platform = [\"cisco_ios\"] </input> <vars>local_hostname=\"gethostname\"</vars> <!-- Interfaces configuration group --> <group name=\"{{ local_hostname }}.interfaces.{{ interface }}\"> interface {{ interface | resuball(\"IfsNormalize\") }} description {{ port_description | re(\".+\") }} vrf forwarding {{ vrf }} ip vrf forwarding {{ vrf }} ip access-group {{ ACL_IN }} in ip access-group {{ ACL_OUT }} out <group name=\"ip_addresses*\" chain=\"add_network()\" method=\"table\"> ip address {{ ip | IP }} {{ netmask }} ip address {{ ip | IP }} {{ netmask }} secondary </group> <group name=\"fhrp*\" method=\"table\"> standby {{ group | let(\"type\", \"HSRP\") }} {{ ip | IP }} vrrp {{ group | let(\"type\", \"VRRP\") }} ip {{ ip | IP }} </group> ! {{ _end_ }} </group> <!-- ARP cache group --> <group name=\"{{ local_hostname }}.interfaces.{{ interface }}.arp*\" method=\"table\"> Internet {{ ip | IP }} {{ age }} {{ mac | MAC | mac_eui }} {{ type }} {{ interface | resuball(\"IfsNormalize\") }} </group> </template>","title":"cli_ip_data.cisco_ios"},{"location":"ttp_templates/misc.N2G.cli_ip_data.cisco_nxos/","text":"Reference path: ttp://misc/N2G/cli_ip_data/cisco_nxos.txt Template to parse Cisco NXOS interfaces configuration and ARP cache. Template Content <template name=\"cisco_nxos\" results=\"per_template\"> <doc> Template to parse Cisco NXOS interfaces configuration and ARP cache. </doc> <input load=\"python\"> commands = [ \"show running-config\", \"show ip arp\", ] kwargs = {\"strip_prompt\": False} method = \"send_command\" platform = [\"nxos_ssh\", \"cisco_nxos\"] </input> <vars>local_hostname=\"gethostname\"</vars> <!-- Interfaces configuration group --> <group name=\"{{ local_hostname }}.interfaces.{{ interface }}\"> interface {{ interface | resuball(\"IfsNormalize\") }} description {{ port_description | re(\".+\") }} vrf member {{ vrf }} ip access-group {{ ACL_IN }} in ip access-group {{ ACL_OUT }} out <group name=\"ip_addresses*\" chain=\"add_network()\" method=\"table\"> ip address {{ ip | IP }}/{{ netmask }} ip address {{ ip | IP }}/{{ netmask }} secondary </group> <group name=\"fhrp*\" method=\"table\"> <group> hsrp {{ group | let(\"type\", \"HSRP\") }} ip {{ ip | IP }} </group> <group> vrrpv3 {{ group | let(\"type\", \"VRRP\") }} address-family ipv4 address {{ ip | IP }} primary </group> </group> ! {{ _end_ }} </group> <!-- ARP cache group --> <group name=\"{{ local_hostname }}.interfaces.{{ interface }}.arp*\" method=\"table\"> {{ ip | IP }} {{ age }} {{ mac | MAC | mac_eui }} {{ interface | resuball(\"IfsNormalize\") }} {{ ip | IP }} {{ age }} {{ mac | MAC | mac_eui }} {{ interface | resuball(\"IfsNormalize\") }} * </group> </template>","title":"cli_ip_data.cisco_nxos"},{"location":"ttp_templates/misc.N2G.cli_ip_data.cisco_xr/","text":"Reference path: ttp://misc/N2G/cli_ip_data/cisco_xr.txt Template to parse Cisco IOSXR interfaces configuration and ARP cache. Template Content <template name=\"cisco_xr\" results=\"per_template\"> <doc> Template to parse Cisco IOSXR interfaces configuration and ARP cache. </doc> <input load=\"python\"> commands = [ \"show running-config interface\", \"show arp vrf all\", \"show arp\" ] kwargs = {\"strip_prompt\": False} method = \"send_command\" platform = [\"cisco_xr\"] </input> <vars>local_hostname=\"gethostname\"</vars> <group record=\"local_hostname\" void=\"\"> hostname {{ local_hostname }} </group> <!-- Interfaces configuration group --> <group name=\"{{ local_hostname }}.interfaces.{{ interface }}\"> interface {{ interface | resuball(\"IfsNormalize\") }} description {{ port_description | re(\".+\") }} vrf {{ vrf }} <group name=\"ip_addresses*\" chain=\"add_network()\" method=\"table\"> ipv4 address {{ ip | IP }} {{ netmask }} ipv4 address {{ ip | IP }} {{ netmask }} secondary ipv4 address {{ ip | IP }}/{{ netmask }} </group> ! {{ _end_ }} </group> <!-- ARP cache group --> <group name=\"{{ local_hostname }}.interfaces.{{ interface }}.arp*\" method=\"table\"> {{ ip | IP }} {{ age | replace(\"-\", \"-1\") }} {{ mac | MAC| mac_eui }} {{ ignore }} {{ ignore }} {{ interface | resuball(\"IfsNormalize\") }} </group> </template>","title":"cli_ip_data.cisco_xr"},{"location":"ttp_templates/misc.N2G.cli_ip_data.fortinet/","text":"Reference path: ttp://misc/N2G/cli_ip_data/fortinet.txt Template to parse Fortinet fortigate firewalls interfaces configuration and ARP cache. Template Content <template name=\"fortinet\" results=\"per_template\"> <doc> Template to parse Fortinet fortigate firewalls interfaces configuration and ARP cache. </doc> <input load=\"python\"> commands = [ \"get system config\", \"get system arp\", ] kwargs = {\"strip_prompt\": False} method = \"send_command\" platform = [\"fortinet\"] </input> <vars>local_hostname=\"gethostname\"</vars> <!-- Interfaces configuration group --> <group name=\"{{ local_hostname }}.interfaces**\"> config system interface {{ _start_ }} <group name=\"{{ interface }}\"> edit \"{{ interface }}\" set description \"{{ port_description | re(\".+\") }}\" set vdom \"{{ vrf }}\" set allowaccess {{ ACL_IN | ORPHRASE }} set interface \"{{ parent_interface }}\" set vlanid {{ vid }} <group name=\"ip_addresses*\" chain=\"add_network()\" method=\"table\"> set ip {{ ip | IP }} {{ netmask }} set ip {{ ip | IP }} {{ netmask }} </group> next{{ _end_ }} </group> </group> <!-- ARP cache group --> <group name=\"{{ local_hostname }}.interfaces.{{ interface }}.arp*\" method=\"table\"> {{ ip | IP }} {{ age }} {{ mac | MAC | mac_eui }} {{ interface }} </group> </template>","title":"cli_ip_data.fortinet"},{"location":"ttp_templates/misc.N2G.cli_ip_data.huawei/","text":"Reference path: ttp://misc/N2G/cli_ip_data/huawei.txt Template to parse Huawei interfaces configuration and ARP cache. Template Content <template name=\"huawei\" results=\"per_template\"> <doc> Template to parse Huawei interfaces configuration and ARP cache. </doc> <input load=\"python\"> commands = [ \"display current-configuration interface\", \"display arp all\", ] kwargs = {\"strip_prompt\": False} method = \"send_command\" platform = [\"huawei\", \"huawei_vrpv8\"] </input> <vars>local_hostname=\"gethostname\"</vars> <!-- Interfaces configuration group --> <group name=\"{{ local_hostname }}.interfaces.{{ interface }}\"> interface {{ interface | resuball(\"IfsNormalize\") }} description {{ port_description | re(\".+\") }} ip binding vpn-instance {{ vrf }} <group name=\"ip_addresses*\" chain=\"add_network()\" method=\"table\"> ip address {{ ip | IP }} {{ netmask }} ip address {{ ip | IP }} {{ netmask }} sub ipv6 address {{ ip | IPV6 }}/{{ netmask }} ipv6 address {{ ip | IPV6 }}/{{ netmask }} sub </group> <group name=\"fhrp*\" method=\"table\"> vrrp vrid {{ group | let(\"type\", \"VRRP\") }} virtual-ip {{ ip | IP }} </group> </group> <!-- ARP cache group --> <group name=\"{{ local_hostname }}.interfaces.{{ interface }}.arp*\" method=\"table\"> {{ ip | IP }} {{ mac | MAC | mac_eui }} {{ expire | re(\"\\\\d+\") }} {{ type | notdigit }} {{ interface | resuball(\"IfsNormalize\") }} {{ vrf }} {{ ip | IP }} {{ mac | MAC | mac_eui }} {{ type | notdigit }} {{ interface | resuball(\"IfsNormalize\") }} {{ vrf }} {{ ip | IP }} {{ mac | MAC | mac_eui }} {{ expire | re(\"\\\\d+\") }} {{ type | notdigit }} {{ interface | resuball(\"IfsNormalize\") }} {{ ip | IP }} {{ mac | MAC | mac_eui }} {{ type | notdigit }} {{ interface | resuball(\"IfsNormalize\") }} </group> </template>","title":"cli_ip_data.huawei"},{"location":"ttp_templates/misc.N2G.cli_ip_data.readme/","text":"cli_ip_data Templates cli_ip_data templates designed to parse show commands output from networking devices into a structured data for the use of N2G application to produce diagrams. Parsing results example: {'cisco_ios': {'switch_1': {'interfaces': {'SVI123': {'arp': [{'age': '-', 'ip': '10.123.111.1', 'mac': 'd094.6643.1111', 'type': 'ARPA'}], 'ip_addresses': [{'ip': '10.123.111.1', 'netmask': '24', 'network': '10.123.111.0/24'}, {'ip': '10.123.222.1', 'netmask': '24', 'network': '10.123.222.0/24'}], 'port_description': 'Workstations Vlan', 'vrf': 'CORP'}}}, 'switch_2': {'interfaces': {'SVI11': {'ip_addresses': [{'ip': '10.11.11.1', 'netmask': '24', 'network': '10.11.11.0/24'}], 'port_description': 'Workstations Vlan'}, 'SVI22': {'arp': [{'age': '-', 'ip': '10.22.22.1', 'mac': 'd094.7890.1111', 'type': 'ARPA'}, {'age': '106', 'ip': '10.22.22.4', 'mac': 'd867.7890.1444', 'type': 'ARPA'}], 'ip_addresses': [{'ip': '10.22.22.1', 'netmask': '24', 'network': '10.22.22.0/24'}], 'port_description': 'Workstations Vlan'}, 'Te1/1/71': {'arp': [{'age': '5', 'ip': '10.1.234.1', 'mac': 'd867.d9b7.1111', 'type': 'ARPA'}], 'fhrp': [{'hsrp_group': '1', 'vip': '10.1.234.1.99', 'type': 'hsrp'}], 'ip_addresses': [{'ip': '10.1.234.2', 'netmask': '24', 'network': '10.1.234.0/24'}], 'port_description': 'to SWITCH_2 shared ' 'subnet'}}}}} Parsing results schema: TBD","title":"cli_ip_data.readme"},{"location":"ttp_templates/misc.N2G.cli_ip_data.readme/#cli_ip_data-templates","text":"cli_ip_data templates designed to parse show commands output from networking devices into a structured data for the use of N2G application to produce diagrams. Parsing results example: {'cisco_ios': {'switch_1': {'interfaces': {'SVI123': {'arp': [{'age': '-', 'ip': '10.123.111.1', 'mac': 'd094.6643.1111', 'type': 'ARPA'}], 'ip_addresses': [{'ip': '10.123.111.1', 'netmask': '24', 'network': '10.123.111.0/24'}, {'ip': '10.123.222.1', 'netmask': '24', 'network': '10.123.222.0/24'}], 'port_description': 'Workstations Vlan', 'vrf': 'CORP'}}}, 'switch_2': {'interfaces': {'SVI11': {'ip_addresses': [{'ip': '10.11.11.1', 'netmask': '24', 'network': '10.11.11.0/24'}], 'port_description': 'Workstations Vlan'}, 'SVI22': {'arp': [{'age': '-', 'ip': '10.22.22.1', 'mac': 'd094.7890.1111', 'type': 'ARPA'}, {'age': '106', 'ip': '10.22.22.4', 'mac': 'd867.7890.1444', 'type': 'ARPA'}], 'ip_addresses': [{'ip': '10.22.22.1', 'netmask': '24', 'network': '10.22.22.0/24'}], 'port_description': 'Workstations Vlan'}, 'Te1/1/71': {'arp': [{'age': '5', 'ip': '10.1.234.1', 'mac': 'd867.d9b7.1111', 'type': 'ARPA'}], 'fhrp': [{'hsrp_group': '1', 'vip': '10.1.234.1.99', 'type': 'hsrp'}], 'ip_addresses': [{'ip': '10.1.234.2', 'netmask': '24', 'network': '10.1.234.0/24'}], 'port_description': 'to SWITCH_2 shared ' 'subnet'}}}}} Parsing results schema: TBD","title":"cli_ip_data Templates"},{"location":"ttp_templates/misc.N2G.cli_isis_data.cisco_xr/","text":"Reference path: ttp://misc/N2G/cli_isis_data/cisco_xr.txt Template to parse Cisco IOSXR \"show isis database verbose\" output. Template to parse ISIS LSDB of Cisco IOS-XR devices out of \"show isis database verbose\" command output. This template produces this structure: [[{'isis_processes': {'100': {'R1-X1': [{'isis_area': '49.0001', 'level': 'Level-2', 'links': [{'affinity': '0x00000000', 'bw_kbit': '10000000', 'isis_pid': '100', 'local_intf_id': '9', 'local_ip': '10.123.0.17', 'metric': '16777214', 'peer_intf_id': '50', 'peer_ip': '10.123.0.18', 'peer_name': 'R1-X2'}, {'affinity': '0x00000000', 'bw_kbit': '10000000', 'isis_pid': '100', 'local_intf_id': '7', 'local_ip': '10.123.0.25', 'metric': '123', 'peer_intf_id': '53', 'peer_ip': '10.123.0.26', 'peer_name': 'R2-X1'}], 'networks': [{'isis_pid': '100', 'metric': '0', 'network': '10.111.1.1/32'}], 'rid': '10.111.1.1'}]}}}]] Template Content <doc> Template to parse Cisco IOSXR \"show isis database verbose\" output. </doc> <input load=\"python\"> # Starting with Netmiko 3.4.0 can use run_ttp method to populate this template with below commands output commands = [ \"show isis database verbose\", ] platform = [\"cisco_xr\"] </input> <extend template=\"ttp://platform/cisco_xr_show_isis_database_verbose.txt\"/>","title":"cli_isis_data.cisco_xr"},{"location":"ttp_templates/misc.N2G.cli_isis_data.juniper/","text":"Reference path: ttp://misc/N2G/cli_isis_data/juniper.txt Template to parse Juniper JunOS \"show isis database extensive | no-more\" output. Template to parse ISIS LSDB of Juniper JunOS devices out of \"show isis database extensive | no-more\" command output. For this sample data: IS-IS level 2 link-state database: R1-X1.00-00 Sequence: 0x22425, Checksum: 0x8904, Lifetime: 463 secs IS neighbor: R1-X2.00 Metric: 20 Two-way fragment: R1-X2.00-00, Two-way first fragment: R1-X2.00-00 IP prefix: 10.123.123.31/32 Metric: 0 Internal Up IP prefix: 10.123.123.41/32 Metric: 0 Internal Up V6 prefix: ::ffff:10.123.111.236/126 Metric: 20 Internal Up Header: LSP ID: R1-X1.00-00, Length: 233 bytes Allocated length: 284 bytes, Router ID: 10.123.123.31 Remaining lifetime: 463 secs, Level: 2, Interface: 80 Estimated free bytes: 51, Actual free bytes: 51 Aging timer expires in: 463 secs Protocols: IP, IPv6 Packet: LSP ID: R1-X1.00-00, Length: 233 bytes, Lifetime : 1194 secs Checksum: 0x8904, Sequence: 0x22425, Attributes: 0x3 L1 L2 NLPID: 0x83, Fixed length: 27 bytes, Version: 1, Sysid length: 0 bytes Packet type: 20, Packet version: 1, Max area: 0 TLVs: Area address: 49.0001 (3) LSP Buffer Size: 1492 Speaks: IP Speaks: IPV6 IP router id: 10.123.123.31 IP address: 10.123.123.31 IPv6 TE Router ID: 2001::10:123:123:31 Hostname: R1-X1 Extended IS Reachability TLV, Type: 22, Length: 85 IS extended neighbor: R1-X2.00, Metric: default 20 SubTLV len: 74 IP address: 10.123.111.238 Neighbor's IP address: 10.123.111.237 Local interface index: 332, Remote interface index: 461 Current reservable bandwidth: Priority 0 : 7Gbps Priority 1 : 7Gbps Priority 2 : 7Gbps Priority 3 : 7Gbps Priority 4 : 7Gbps Priority 5 : 7Gbps Priority 6 : 6.7Gbps Priority 7 : 6.7Gbps Maximum reservable bandwidth: 7Gbps Maximum bandwidth: 10Gbps Administrative groups: 0 none IPv6 prefix: ::ffff:10.123.111.236/126 Metric 20 Up IP extended prefix: 10.123.123.31/32 metric 0 up IP extended prefix: 10.123.123.41/32 metric 0 up IP extended prefix: 10.123.111.236/30 metric 20 up IP address: 10.123.123.41 Authentication data: 17 bytes No queued transmissions This template produces this result: [[{'isis_processes': {'ISIS': {'R1-X1': [{'isis_area': '49.0001', 'level': '2', 'links': [{'bw_gbit': '10', 'local_intf_id': '332', 'local_ip': '10.123.111.238', 'metric': '20', 'peer_intf_id': '461', 'peer_ip': '10.123.111.237', 'peer_name': 'R1-X2'}], 'networks': [{'metric': '0', 'network': '10.123.123.31/32'}, {'metric': '0', 'network': '10.123.123.41/32'}, {'metric': '20', 'network': '::ffff:10.123.111.236/126'}], 'rid': '10.123.123.31', 'rid_v6': '2001::10:123:123:31'}]}}}]] Notes: Process ID (PID) always set to ISIS value as PID does not present in \"show isis database extensive | no-more\" command output on Juniper devices. Template Content <doc> Template to parse Juniper JunOS \"show isis database extensive | no-more\" output. </doc> <input load=\"python\"> commands = [ \"show isis database extensive | no-more\", ] platform = [\"juniper\", \"juniper_junos\"] </input> <extend template=\"ttp://platform/juniper_show_isis_database_verbose_pipe_no_more.txt\"/>","title":"cli_isis_data.juniper"},{"location":"ttp_templates/misc.N2G.cli_isis_data.readme/","text":"cli_isis_data Templates cli_isis_data template designed for use with N2G library to produce network diagrams based on ISIS link state database of Cisco IOS-XR devices. Caveats: need ttp>=0.8.0 for extend to work Results structure example: TBD","title":"cli_isis_data.readme"},{"location":"ttp_templates/misc.N2G.cli_isis_data.readme/#cli_isis_data-templates","text":"cli_isis_data template designed for use with N2G library to produce network diagrams based on ISIS link state database of Cisco IOS-XR devices. Caveats: need ttp>=0.8.0 for extend to work Results structure example: TBD","title":"cli_isis_data Templates"},{"location":"ttp_templates/misc.N2G.cli_l2_data.cisco_ios/","text":"Reference path: ttp://misc/N2G/cli_l2_data/cisco_ios.txt This template designed to parse Cisco IOS configuration and CDP and LLDP neighbors. Template Content <template name=\"cisco_ios\" results=\"per_template\"> <doc> This template designed to parse Cisco IOS configuration and CDP and LLDP neighbors. </doc> <input load=\"python\"> commands = [ \"show cdp neighbor details\", \"show lldp neighbor details\", \"show running-config\", \"show interface\", ] kwargs = {\"strip_prompt\": False} method = \"send_command\" platform = [\"cisco_ios\"] </input> <vars>local_hostname=\"gethostname\"</vars> <macro> def process_vlans(data): return {data[\"vid\"]: data[\"name\"]} def check_is_physical_port(data): for item in _ttp_[\"vars\"][\"physical_ports\"]: if data.startswith(item) and not \".\" in item: return data, {\"is_physical_port\": True} return data </macro> <!-- Interfaces configuration group --> <group name=\"{{ local_hostname }}.interfaces**.{{ interface }}**\"> interface {{ interface | resuball(IfsNormalize) }} description {{ description | re(\".+\") }} switchport {{ is_l2 | set(True) }} switchport access vlan {{ access_vlan }} switchport mode {{ l2_mode }} vrf forwarding {{ vrf }} ip address {{ ip | PHRASE | joinmatches(\",\") }} ip address {{ ip | PHRASE | joinmatches(\",\") }} secondary switchport trunk allowed vlan {{ trunk_vlans | unrange(\"-\", \",\") | joinmatches(\",\") }} channel-group {{ lag_id | DIGIT }} mode {{ lag_mode }} mtu {{ mtu }} </group> <!-- Interfaces state group --> <group name=\"{{ local_hostname }}.interfaces**.{{ interface }}**.state\"> {{ interface | _start_ | resuball(IfsNormalize) | macro(\"check_is_physical_port\") }} is {{ admin | ORPHRASE }}, line protocol is {{ line }} {{ interface | _start_ | resuball(IfsNormalize) | macro(\"check_is_physical_port\") }} is {{ admin | ORPHRASE }}, line protocol is {{ line }} ({{ line_status }}) Description: {{ description | re(\".+\") }} Hardware is {{ hardware | ORPHRASE }}, address is {{ mac }} (bia {{ ignore }}) MTU {{ mtu }} bytes, BW {{ bw_kbits }} Kbit/sec, DLY 1000 usec, {{ duplex }}-duplex, {{ link_type }}, media type is {{ media_type }} {{ duplex }}-duplex, {{ link_speed }}-speed, link type is {{ link_type }}, media type is {{ media_type | ORPHRASE }} {{ duplex }}-duplex, {{ link_speed }}, link type is {{ link_type }}, media type is {{ media_type | ORPHRASE }} Members in this channel: {{ lag_members | ORPHRASE }} </group> <!-- node_facts VLANs group --> <group name=\"{{ local_hostname }}.node_facts.vlans**\" macro=\"process_vlans\"> vlan {{ vid }} name {{ name | ORPHRASE | default(\"no name\") }} </group> <!-- LLDP peers group --> <group name=\"{{ local_hostname }}.lldp_peers*\" expand=\"\"> Local Intf: {{ src_label | resuball(IfsNormalize) }} Port id: {{ trgt_label | ORPHRASE | resuball(IfsNormalize) }} System Name: {{ target.id | split(\".\") | item(0) | split(\"(\") | item(0) }} System Capabilities: {{ ignore(ORPHRASE) }} IP: {{ target.top_label }} {{ source | set(\"local_hostname\") }} </group> <!-- CDP peers group --> <group name=\"{{ local_hostname }}.cdp_peers*\" expand=\"\"> Device ID: {{ target.id | split(\".\") | item(0) | split(\"(\") | item(0) }} IP address: {{ target.top_label }} Platform: {{ target.bottom_label | ORPHRASE }}, Capabilities: {{ ignore(ORPHRASE) }} Interface: {{ src_label | resuball(IfsNormalize) }}, Port ID (outgoing port): {{ trgt_label | ORPHRASE | resuball(IfsNormalize) }} {{ source | set(\"local_hostname\") }} </group> </template>","title":"cli_l2_data.cisco_ios"},{"location":"ttp_templates/misc.N2G.cli_l2_data.cisco_nxos/","text":"Reference path: ttp://misc/N2G/cli_l2_data/cisco_nxos.txt This template designed to parse Cisco NXOS configuration and CDP and LLDP neighbors. Template Content <template name=\"cisco_nxos\" results=\"per_template\"> <doc> This template designed to parse Cisco NXOS configuration and CDP and LLDP neighbors. </doc> <input load=\"python\"> commands = [ \"show cdp neighbor details\", \"show lldp neighbor details\", \"show running-config\", \"show interface\", ] kwargs = {\"strip_prompt\": False} method = \"send_command\" platform = [\"nxos_ssh\", \"cisco_nxos\"] </input> <vars>local_hostname=\"gethostname\"</vars> <macro> def process_vlans(data): return {data[\"vid\"]: data[\"name\"]} def check_is_physical_port(data): for item in _ttp_[\"vars\"][\"physical_ports\"]: if data.startswith(item) and not \".\" in data: return data, {\"is_physical_port\": True} return data </macro> <macro> def check_lldp_peer_name(data): undef_names = [\"not advertised\", \"null\"] if data.get(\"target.id\", \"\").lower() in undef_names: data[\"target.id\"] = data[\"data.chassis_id\"] return data </macro> <!-- Interfaces configuration group --> <group name=\"{{ local_hostname }}.interfaces**.{{ interface }}**\"> interface {{ interface | resuball(IfsNormalize) }} description {{ description | re(\".+\") }} switchport {{ is_l2 | set(True) }} switchport access vlan {{ access_vlan }} switchport mode {{ l2_mode }} switchport trunk allowed vlan {{ trunk_vlans | unrange(\"-\", \",\") | joinmatches(\",\") }} switchport trunk allowed vlan add {{ trunk_vlans | unrange(\"-\", \",\") | joinmatches(\",\") }} channel-group {{ lag_id | DIGIT }} mode {{ lag_mode }} vpc {{ mlag_id | DIGIT }} mtu {{ mtu }} vrf member {{ vrf }} ip address {{ ip | joinmatches(\",\") }} ip address {{ ip | joinmatches(\",\") }} secondary </group> <group name=\"{{ local_hostname }}.interfaces**.{{ interface }}**.state\"> {{ interface | _start_ | resuball(IfsNormalize) | macro(\"check_is_physical_port\") }} is {{ admin | ORPHRASE }}, line protocol is {{ line }}, autostate enabled {{ interface | _start_ | resuball(IfsNormalize) | macro(\"check_is_physical_port\") }} is {{ line | ORPHRASE }} admin state is {{ admin | ORPHRASE }},{{ ignore(\".*\") }} admin state is {{ admin }} Belongs to {{ parent_lag }} Description: {{ description | re(\".+\") }} Hardware: {{ hardware | ORPHRASE }}, address: {{ mac }} (bia {{ bia }}) Hardware is {{ hardware }}, address is {{ mac }} MTU {{ mtu }} bytes, BW {{ bw_kbits }} Kbit, DLY 10 usec Port mode is {{ mode }} {{ duplex }}-duplex, {{ link_speed | PHRASE }}, media type is {{ media_type }} {{ duplex }}-duplex, {{ link_speed | PHRASE | exclude(\",media\") }} Members in this channel: {{ lag_members | ORPHRASE }} </group> <!-- node_facts VLANs group --> <group name=\"{{ local_hostname }}.node_facts.vlans**\" macro=\"process_vlans\"> vlan {{ vid | exclude(\",\") }} name {{ name | ORPHRASE | default(\"no name\") }} </group> <!-- LLDP peers group --> <group name=\"{{ local_hostname }}.lldp_peers*\" chain=\"macro('check_lldp_peer_name') | expand()\"> Chassis id: {{ data.chassis_id }} Port id: {{ trgt_label | ORPHRASE | resuball(IfsNormalize) }} Local Port id: {{ src_label | resuball(IfsNormalize) }} Port Description: {{ data.peer_port_description | re(\".+\") }} System Name: {{ target.id | ORPHRASE | split(\".\") | item(0) | split(\"(\") | item(0) }} System Description: {{ data.peer_system | ORPHRASE}} System Capabilities: {{ data.peer_capabilities | ORPHRASE }} Management Address: {{ target.top_label }} {{ source | set(\"local_hostname\") }} </group> <!-- CDP peers group --> <group name=\"{{ local_hostname }}.cdp_peers*\" expand=\"\"> Device ID:{{ target.id | split(\".\") | item(0) | split(\"(\") | item(0) }} IPv4 Address: {{ target.top_label }} Platform: {{ target.bottom_label | ORPHRASE }}, Capabilities: {{ data.peer_capabilities | ORPHRASE }} Interface: {{ src_label | resuball(IfsNormalize) }}, Port ID (outgoing port): {{ trgt_label | ORPHRASE | resuball(IfsNormalize) }} MTU: {{ data.peer_mtu }} Physical Location: {{ data.peer_location | ORPHRASE }} {{ source | set(\"local_hostname\") }} </group> </template>","title":"cli_l2_data.cisco_nxos"},{"location":"ttp_templates/misc.N2G.cli_l2_data.cisco_xr/","text":"Reference path: ttp://misc/N2G/cli_l2_data/cisco_xr.txt This template designed to parse Cisco IOSXR configuration and CDP and LLDP neighbors. Commands parsed: show lldp - to extract local hostname show lldp neighbors detail - to extract LLDP neighbors show running-config interface - to extract interfaces description and LAGs show cdp neighbors detail - show extract CDP neighbors show interfaces - to extract interface state to add all connected nodes Template Content <template name=\"cisco_xr\" results=\"per_template\"> <doc> This template designed to parse Cisco IOSXR configuration and CDP and LLDP neighbors. Commands parsed: - show lldp - to extract local hostname - show lldp neighbors detail - to extract LLDP neighbors - show running-config interface - to extract interfaces description and LAGs - show cdp neighbors detail - show extract CDP neighbors - show interfaces - to extract interface state to add all connected nodes </doc> <input load=\"python\"> commands = [ \"show cdp neighbor details\", \"show lldp neighbor details\", \"show lldp\", \"show running-config interface\", \"show interfaces\", ] kwargs = {\"strip_prompt\": False} method = \"send_command\" platform = [\"cisco_xr\"] </input> <!-- gethostname used if no show lldp output provided --> <vars>local_hostname=\"gethostname\"</vars> <macro> def check_is_physical_port(data): for item in _ttp_[\"vars\"][\"physical_ports\"]: if data.startswith(item) and not \".\" in item: return data, {\"is_physical_port\": True} return data def add_lldp_target_id(data): \"\"\" Some LLDP peers output does not contain System Name, this macro is to make sure we assign chassis_id as target.id in that case. \"\"\" if ( not data.get(\"target\", {}).get(\"id\") and data.get(\"data\", {}).get(\"chassis_id\") ): data.setdefault(\"target\", {}) data[\"target\"][\"id\"] = data[\"data\"][\"chassis_id\"] return data </macro> <!-- show lldp - parse global params --> <group void=\"\"> Global LLDP information: {{ _start_ }} LLDP System Name: {{ local_hostname | record(\"local_hostname\") }} </group> <!-- Interfaces configuration group --> <group name=\"{{ local_hostname }}.interfaces**.{{ interface }}**\"> interface {{ interface | resuball(IfsNormalize) }} mtu {{ mtu }} vrf {{ vrf }} description {{ description | re(\".+\") }} ipv4 address {{ ip | PHRASE | joinmatches(\",\") }} ipv4 address {{ ip | PHRASE | joinmatches(\",\") }} secondary ipv6 address {{ ip | joinmatches(\",\") }} bundle id {{ lag_id | DIGIT }} mode {{ lag_mode }} </group> <!-- Interfaces state group --> <group name=\"{{ local_hostname }}.interfaces**.{{ interface }}**.state\"> {{ interface | _start_ | resuball(IfsNormalize) | macro(\"check_is_physical_port\") }} is {{ admin | ORPHRASE }}, line protocol is {{ line | ORPHRASE }} Hardware is {{ hardware }} interface(s) Hardware is {{ hardware }} interface Hardware is {{ hardware | ORPHRASE }} interface(s), address is {{ mac }} Hardware is {{ hardware | ORPHRASE }}, address is {{ mac }} (bia {{ ignore }}) Description: {{ description | re(\".+\") }} Internet address is {{ ip }} MTU {{ mtu }} bytes, BW {{ bw_kbits }} Kbit (Max: 1000000 Kbit) MTU {{ mtu }} bytes, BW {{ bw_kbits }} Kbit {{ duplex }}-duplex, {{ link_speed }} {{ duplex }}-duplex, {{ link_speed }}, link type is {{ link_type }} {{ duplex }}-duplex, {{ link_speed }}, {{ media_type }}, link type is {{ link_type }} {{ lag_members | joinmatches(\" \") }} {{ ignore }}-duplex {{ ignore }} {{ ignore }} </group> <!-- LLDP peers group --> <group name=\"{{ local_hostname }}.lldp_peers*\" functions=\"expand() | macro(add_lldp_target_id)\"> Local Interface: {{ src_label | resuball(IfsNormalize) }} Chassis id: {{ data.chassis_id }} Port id: {{ trgt_label | ORPHRASE | resuball(IfsNormalize) }} Port Description: {{ data.peer_port_description | re(\".+\") }} System Name: {{ target.id | split(\"(\") | item(0) }} System Name: {{ data.peer_system_name | PHRASE }} System Capabilities: {{ data.peer_capabilities | ORPHRASE }} IPv4 address: {{ target.top_label }} {{ source | set(\"local_hostname\") }} <group name=\"data**\"> System Description: {{ _start_ }} {{ peer_system_description | ORPHRASE | contains(\",\") }} {{ peer_system_description | ORPHRASE | contains(\",\") }} {{ _end_ }} </group> </group> <!-- CDP peers group --> <group name=\"{{ local_hostname }}.cdp_peers*\" expand=\"\"> Device ID: {{ target.id | split(\".\") | item(0) | split(\"(\") | item(0) }} IPv4 address: {{ target.top_label }} Platform: {{ target.bottom_label | ORPHRASE }}, Capabilities: {{ data.peer_capabilities | ORPHRASE }} Interface: {{ src_label | resuball(IfsNormalize) }} Port ID (outgoing port): {{ trgt_label | ORPHRASE | resuball(IfsNormalize) }} {{ source | set(\"local_hostname\") }} </group> </template>","title":"cli_l2_data.cisco_xr"},{"location":"ttp_templates/misc.N2G.cli_l2_data.huawei/","text":"Reference path: ttp://misc/N2G/cli_l2_data/huawei.txt This template designed to parse Huawei configuration and LLDP neighbors. Template Content <template name=\"huawei\" results=\"per_template\"> <doc> This template designed to parse Huawei configuration and LLDP neighbors. </doc> <input load=\"python\"> commands = [ \"display lldp neighbor details\", \"display current-configuration interface\", \"display interface\", ] kwargs = {\"strip_prompt\": False} method = \"send_command\" platform = [\"huawei\", \"huawei_vrpv8\"] </input> <vars>local_hostname=\"gethostname\"</vars> <macro> def process_vlans(data): return {data[\"vid\"]: data[\"name\"]} def check_is_physical_port(data): for item in _ttp_[\"vars\"][\"physical_ports\"]: if data.startswith(item) and not \".\" in data: return data, {\"is_physical_port\": True} return data </macro> <macro> def check_lldp_peer_name(data): undef_names = [\"not advertised\", \"null\", \"--\"] if data.get(\"target.id\", \"\").lower() in undef_names: data[\"target.id\"] = data[\"data.chassis_id\"] return data def lldp_choose_bottom_label(data): if \"target.bottom_label_2\" in data: data[\"target.bottom_label\"] = data.pop(\"target.bottom_label_2\") elif \"target.bottom_label\" in data: data[\"data.peer_system\"] = str(data[\"target.bottom_label\"]) data[\"target.bottom_label\"] = \"{}..\".format(data[\"target.bottom_label\"][:18]) return data </macro> <!-- Interfaces configuration group --> <group name=\"{{ local_hostname }}.interfaces**.{{ interface }}**\"> interface {{ interface | resuball(IfsNormalize) }} description {{ description | re(\".+\") }} port link-type {{ l2_mode }} dot1q termination vid {{ dot1q_vid }} port trunk allow-pass vlan {{ trunk_vlans | unrange(\"to\", \" \") | replace(' ', ',') | joinmatches(\",\") }} port trunk allow-pass vlan all {{ trunk_vlans | set(\"ALL\") }} dfs-group 1 m-lag {{ mlag_id | DIGIT }} eth-trunk {{ lag_id | DIGIT }} mode {{ lag_mode }} port trunk pvid vlan {{ access_vlan }} ip address {{ ip | PHRASE | joinmatches(\",\") }} ip binding vpn-instance {{ vrf }} peer-link 1 {{ peer_link | set(True) }} </group> <!-- Interfaces state group <group name=\"{{ local_hostname }}.interfaces**.{{ interface }}**.state\"> </group> --> <!-- node_facts VLANs group --> <group name=\"{{ local_hostname }}.node_facts.vlans**\" macro=\"process_vlans\"> vlan {{ vid | exclude(\",\") }} name {{ name | ORPHRASE | default(\"no name\") }} </group> <!-- LLDP peers group --> <group name=\"{{ local_hostname }}.lldp_peers*\" chain=\"macro('check_lldp_peer_name') | macro(lldp_choose_bottom_label) | expand()\"> {{ src_label | resuball(IfsNormalize) }} has 1 neighbor(s): Port ID :{{ trgt_label | ORPHRASE | resuball(IfsNormalize) }} Chassis ID :{{ data.chassis_id }} System name :{{ target.id | split(\".\") | item(0) | split(\"(\") | item(0) }} HUAWEI {{ target.bottom_label_2 }} System description :{{ target.bottom_label | ORPHRASE }} Port description :{{ data.peer_port_description | re(\".+\") | notequal(\"--\") }} System capabilities supported :{{ data.peer_capabilities | ORPHRASE | notequal(\"--\") }} Maximum frame Size :{{ data.peer_mtu | notequal(\"--\") }} Management address :{{ target.top_label }} {{ source | set(\"local_hostname\") }} </group> </template>","title":"cli_l2_data.huawei"},{"location":"ttp_templates/misc.N2G.cli_l2_data.juniper/","text":"Reference path: ttp://misc/N2G/cli_l2_data/juniper.txt This template designed to parse Juniper JunOS configuration and LLDP neighbors. Commands parsed: show lldp local-information - to extract local hostname show lldp neighbors - to extract LLDP neighbors show configuration interfaces | display set | no-more - to extract interfaces confgiuration and LAG details show interfaces detail | no-more - to extract interfaces state to add all connected devices Template Content <template name=\"juniper\" results=\"per_template\"> <doc> This template designed to parse Juniper JunOS configuration and LLDP neighbors. Commands parsed: - show lldp local-information - to extract local hostname - show lldp neighbors - to extract LLDP neighbors - show configuration interfaces | display set | no-more - to extract interfaces confgiuration and LAG details - show interfaces detail | no-more - to extract interfaces state to add all connected devices </doc> <input> commands = [ \"show lldp local-information | no-more\", \"show lldp neighbors | no-more\", \"show configuration interfaces | display set | no-more\", \"show interfaces detail | no-more\", ] platform = [\"juniper\", \"juniper_junos\"] </input> <!-- gethostname used if no show lldp output provided --> <vars>local_hostname=\"gethostname\"</vars> <macro> def check_is_physical_port(data): for item in _ttp_[\"vars\"][\"physical_ports\"]: if data.startswith(item) and not \".\" in item: return data, {\"is_physical_port\": True} return data def extract_lldp_peer(data): if \" \" in data[\"info\"]: *port_info, peer_name = data.pop(\"info\").split(\" \") data[\"data.peer_port_description\"] = \" \".join(port_info).strip() else: port_info, peer_name = data.pop(\"info\"), data[\"data.chassis_id\"] data[\"data.peer_port_description\"] = port_info data[\"target.id\"] = peer_name data[\"trgt_label\"] = \"\" # check if port_info is name of the interface, use it as link trgt_label if len(port_info) == 1 and not port_info[0].isdigit(): data[\"trgt_label\"], _ = _ttp_[\"match\"][\"resuball\"](port_info[0], \"IfsNormalize\") </macro> <!-- show lldp local-information - parse global params --> <group name=\"{{ local_hostname }}.node_facts.system**\"> LLDP Local Information details {{ _start_ }} Chassis ID : {{ chassis_id }} System name : {{ local_hostname | record(local_hostname) }} System descr : {{ description | PHRASE }} <group name=\"/{{ local_hostname }}.interfaces_id*\"> {{ interface | resuball(IfsNormalize) }} {{ parent }} {{ id | DIGIT }} {{ description | ORPHRASE }} {{ status }} </group> </group> <!-- Interfaces configuration group --> <group name=\"{{ local_hostname }}.interfaces**.{{ interface }}**\"> set interfaces {{ interface | resuball(IfsNormalize) }} description \"{{ description | re(\".+\") }}\" set interfaces {{ interface | resuball(IfsNormalize) }} ether-options 802.3ad {{ lag_id | DIGIT }} set interfaces {{ interface | resuball(IfsNormalize) }} mtu {{ mtu }} set interfaces {{ interface | resuball(IfsNormalize) }} aggregated-ether-options lacp {{ lag_mode }} </group> <!-- Interfaces state group --> <group name=\"{{ local_hostname }}.interfaces**.{{ interface }}**.state\"> Physical interface: {{ interface | _start_ | resuball(IfsNormalize) | macro(\"check_is_physical_port\") }}, {{ admin | ORPHRASE }}, Physical link is {{ line | ORPHRASE }} Description: {{ description | re(\".+\") }} Link-level type: Ethernet, MTU: {{ mtu }}, Speed: {{ bw_gbits }}Gbps, {{ ignore(PHRASE) }} Current address: {{ mac }}, Hardware address: {{ ignore }} </group> <!-- LLDP peers group --> <group name=\"{{ local_hostname }}.lldp_peers*\" functions=\"macro('extract_lldp_peer') | expand()\"> {{ src_label | resuball(IfsNormalize) }} {{ data.parent_interface }} {{ data.chassis_id | MAC }} {{ info | re(\".+\") }} {{ source | set(\"local_hostname\") }} </group> </template>","title":"cli_l2_data.juniper"},{"location":"ttp_templates/misc.N2G.cli_l2_data.readme/","text":"cli_l2_data Templates cli_l2_data templates designed to parse show commands output from networking devices into a structured data for the use of N2G application to produce diagrams. Results structure example: {'cisco_ios': {'switch-1': {'cdp_peers': [{'source': 'switch-1', 'src_label': 'Ge4/6', 'target': {'bottom_label': 'cisco WS-C6509', 'id': 'switch-2', 'top_label': '10.2.2.2'}, 'trgt_label': 'Ge1/5'}, {'source': 'switch-1', 'src_label': 'Ge4/7', 'target': {'bottom_label': 'cisco WS-C6509', 'id': 'switch-2', 'top_label': '10.2.2.2'}, 'trgt_label': 'Ge1/6'}], 'interfaces': {'Ge1/1': {'description': 'switch-3:Gi0/1', 'is_l2': True, 'l2_mode': 'trunk', 'lag_id': '11', 'lag_mode': 'active', 'mtu': '9216', 'state': {'admin': 'up', 'bw_kbits': '10000000', 'description': 'switch-3:Gi0/1', 'duplex': 'Full', 'hardware': 'Ten Gigabit Ethernet ' 'Port', 'is_physical_port': True, 'line': 'up', 'line_status': 'connected', 'link_speed': '10Gb/s', 'link_type': 'auto', 'mac': 'a89d.2163.1111', 'media_type': '10GBase-LR', 'mtu': '9216'}, 'trunk_vlans': '101'} 'Ge4/6': {'description': 'switch-2: trunk', 'is_l2': True, 'l2_mode': 'trunk', 'lag_id': '3', 'lag_mode': 'active', 'trunk_vlans': '200,201,202,203,204,205'} 'LAG11': {'description': 'switch-3: trunk LAG', 'is_l2': True, 'l2_mode': 'trunk', 'trunk_vlans': '101'}, 'LAG3': {'description': 'switch-2: trunk LAG', 'is_l2': True, 'l2_mode': 'trunk', 'state': {'admin': 'up', 'bw_kbits': '20000000', 'description': 'switch-2: trunk LAG', 'duplex': 'Full', 'hardware': 'EtherChannel', 'lag_members': 'Ge4/6 Ge4/7', 'line': 'up', 'line_status': 'connected', 'link_type': '10Gb/s', 'mac': 'a89d.2163.3333', 'media_type': 'N/A', 'mtu': '1500'}, 'node_facts': {'vlans': {'101': 'test_vlan', '200': 'ProdVMS'}}}, 'switch-2': {'cdp_peers': [{'source': 'switch-2', 'src_label': 'Ge1/5', 'target': {'bottom_label': 'cisco WS-C6509', 'id': 'switch-1', 'top_label': '10.1.1.1'}, 'trgt_label': 'Ge4/6'}, {'source': 'switch-2', 'src_label': 'Ge1/6', 'target': {'bottom_label': 'cisco WS-C6509', 'id': 'switch-1', 'top_label': '10.1.1.1'}, 'trgt_label': 'Ge4/7'}], 'interfaces': {'Ge1/5': {'description': 'switch-1: trunk', 'is_l2': True, 'l2_mode': 'trunk', 'lag_id': '3', 'lag_mode': 'active', 'trunk_vlans': '200,201,202,203,204,205'} 'node_facts': {'vlans': {'101': 'test_vlan', '200': 'ProdVMS'}}}}}","title":"cli_l2_data.readme"},{"location":"ttp_templates/misc.N2G.cli_l2_data.readme/#cli_l2_data-templates","text":"cli_l2_data templates designed to parse show commands output from networking devices into a structured data for the use of N2G application to produce diagrams. Results structure example: {'cisco_ios': {'switch-1': {'cdp_peers': [{'source': 'switch-1', 'src_label': 'Ge4/6', 'target': {'bottom_label': 'cisco WS-C6509', 'id': 'switch-2', 'top_label': '10.2.2.2'}, 'trgt_label': 'Ge1/5'}, {'source': 'switch-1', 'src_label': 'Ge4/7', 'target': {'bottom_label': 'cisco WS-C6509', 'id': 'switch-2', 'top_label': '10.2.2.2'}, 'trgt_label': 'Ge1/6'}], 'interfaces': {'Ge1/1': {'description': 'switch-3:Gi0/1', 'is_l2': True, 'l2_mode': 'trunk', 'lag_id': '11', 'lag_mode': 'active', 'mtu': '9216', 'state': {'admin': 'up', 'bw_kbits': '10000000', 'description': 'switch-3:Gi0/1', 'duplex': 'Full', 'hardware': 'Ten Gigabit Ethernet ' 'Port', 'is_physical_port': True, 'line': 'up', 'line_status': 'connected', 'link_speed': '10Gb/s', 'link_type': 'auto', 'mac': 'a89d.2163.1111', 'media_type': '10GBase-LR', 'mtu': '9216'}, 'trunk_vlans': '101'} 'Ge4/6': {'description': 'switch-2: trunk', 'is_l2': True, 'l2_mode': 'trunk', 'lag_id': '3', 'lag_mode': 'active', 'trunk_vlans': '200,201,202,203,204,205'} 'LAG11': {'description': 'switch-3: trunk LAG', 'is_l2': True, 'l2_mode': 'trunk', 'trunk_vlans': '101'}, 'LAG3': {'description': 'switch-2: trunk LAG', 'is_l2': True, 'l2_mode': 'trunk', 'state': {'admin': 'up', 'bw_kbits': '20000000', 'description': 'switch-2: trunk LAG', 'duplex': 'Full', 'hardware': 'EtherChannel', 'lag_members': 'Ge4/6 Ge4/7', 'line': 'up', 'line_status': 'connected', 'link_type': '10Gb/s', 'mac': 'a89d.2163.3333', 'media_type': 'N/A', 'mtu': '1500'}, 'node_facts': {'vlans': {'101': 'test_vlan', '200': 'ProdVMS'}}}, 'switch-2': {'cdp_peers': [{'source': 'switch-2', 'src_label': 'Ge1/5', 'target': {'bottom_label': 'cisco WS-C6509', 'id': 'switch-1', 'top_label': '10.1.1.1'}, 'trgt_label': 'Ge4/6'}, {'source': 'switch-2', 'src_label': 'Ge1/6', 'target': {'bottom_label': 'cisco WS-C6509', 'id': 'switch-1', 'top_label': '10.1.1.1'}, 'trgt_label': 'Ge4/7'}], 'interfaces': {'Ge1/5': {'description': 'switch-1: trunk', 'is_l2': True, 'l2_mode': 'trunk', 'lag_id': '3', 'lag_mode': 'active', 'trunk_vlans': '200,201,202,203,204,205'} 'node_facts': {'vlans': {'101': 'test_vlan', '200': 'ProdVMS'}}}}}","title":"cli_l2_data Templates"},{"location":"ttp_templates/misc.N2G.cli_ospf_data.cisco_ios/","text":"Reference path: ttp://misc/N2G/cli_ospf_data/cisco_ios.txt Template to parse Cisco IOS OSPF database content. This template initially designed for use with N2G library to produce network diagrams based on OSPF link state database of Cisco IOS devices. This template parses router-lsa only out of output produced by \"show ip ospf database router\" command. Caveats: need ttp>=0.7.0 , ttp==0.6.0 will not work due to bugs in it Produces this structure for each input datum/device output: [ [ { \"ospf_processes\": { \"1\": { \"local_rid\": \"10.0.0.4\", \"router_lsa\": [ { \"area\": \"0\", \"asbr\": False, \"bma_peers\": [ { \"link_data\": \"10.1.117.4\", \"link_id\": \"10.1.117.7\", \"metric\": \"10\", } ], \"connected_stub\": [ { \"link_data\": \"255.255.255.128\", \"link_id\": \"10.1.14.0\", \"metric\": \"10\", } ], \"originator_rid\": \"10.0.0.4\", \"ptp_peers\": [ { \"link_data\": \"10.1.14.4\", \"link_id\": \"10.0.0.10\", \"metric\": \"10\", } ], } ], } } } ] ] This template initially designed for use with N2G library to produce network diagrams based on OSPF link state database of Cisco IOS devices. This template parses external-lsa only out of output produced by \"show ip ospf database external\" command. Caveats: need ttp>=0.7.0 , ttp==0.6.0 will not work due to bugs in it Produces this structure for each input datum/device output: [ [ { \"ospf_processes\": { \"1\": { \"external_lsa\": [ { \"mask\": \"32\", \"metric\": \"20\", \"metric_type\": \"2\", \"originator_rid\": \"10.0.0.10\", \"subnet\": \"10.0.0.100\", \"tag\": \"0\", } ], \"local_rid\": \"10.0.0.4\", } } } ] ] This template initially designed for use with N2G library to produce network diagrams based on OSPF link state database of Cisco IOS devices. This template parses summary-lsa only out of output produced by \"show ip ospf database summary\" command. Caveats: need ttp>=0.7.0 , ttp==0.6.0 will not work due to bugs in it Produces this structure for each input datum/device output: [ [ { \"ospf_processes\": { \"1\": { \"local_rid\": \"10.0.0.4\", \"summary_lsa\": [ { \"area\": \"0\", \"mask\": \"31\", \"metric\": \"10\", \"originator_rid\": \"10.0.0.4\", \"subnet\": \"10.1.45.2\", } ], } } } ] ] Template Content <doc> Template to parse Cisco IOS OSPF database content. </doc> <input load=\"python\"> commands = [ \"show ip ospf database router\", \"show ip ospf database summary\", \"show ip ospf database external\", ] kwargs = {\"strip_prompt\": False} method = \"send_command\" platform = [\"cisco_ios\"] </input> <extend template=\"ttp://platform/cisco_ios_show_ip_ospf_database_router.txt\"/> <extend template=\"ttp://platform/cisco_ios_show_ip_ospf_database_external.txt\"/> <extend template=\"ttp://platform/cisco_ios_show_ip_ospf_database_summary.txt\"/>","title":"cli_ospf_data.cisco_ios"},{"location":"ttp_templates/misc.N2G.cli_ospf_data.cisco_xr/","text":"Reference path: ttp://misc/N2G/cli_ospf_data/cisco_xr.txt Template to parse Cisco IOSXR OSPF database content. This template initially designed for use with N2G library to produce network diagrams based on OSPF link state database of Cisco IOS-XR devices. This template parses router-lsa only out of output produced by \"show ospf database router\" command. Caveats: need ttp>=0.7.0 , ttp==0.6.0 will not work due to bugs in it Produces this structure for each input datum/device output: [[{'ospf_processes': {'1': {'local_rid': '10.1.2.2', 'router_lsa': [{'area': '0.0.0.0', 'asbr': True, 'bma_peers': [{'link_data': '10.3.162.14', 'link_id': '10.3.162.13', 'metric': '1'}], 'connected_stub': [{'link_data': '255.255.255.252', 'link_id': '10.0.61.0', 'metric': '9100'}], 'originator_rid': '10.1.0.91', 'ptp_peers': [{'link_data': '10.0.61.1', 'link_id': '10.1.1.251', 'metric': '9100'}]}, {'area': '0.0.0.0', 'asbr': True, 'connected_stub': [{'link_data': '255.255.255.252', 'link_id': '10.0.61.96', 'metric': '9000'}], 'originator_rid': '10.1.0.92', 'ptp_peers': [{'link_data': '0.0.2.5', 'link_id': '10.1.2.6', 'metric': '1100'}]}]}}}, {'ospf_processes': {'1': {'local_rid': '10.1.2.2', 'router_lsa': [{'area': '0.0.0.0', 'asbr': True, 'connected_stub': [{'link_data': '255.255.255.252', 'link_id': '10.0.60.204', 'metric': '9000'}], 'originator_rid': '10.1.0.91', 'ptp_peers': [{'link_data': '10.0.60.206', 'link_id': '10.0.24.6', 'metric': '9000'}]}, {'area': '0.0.0.1', 'asbr': True, 'originator_rid': '10.1.0.91', 'ptp_peers': [{'link_data': '10.0.60.206', 'link_id': '10.0.24.6', 'metric': '9000'}]}]}}}]] This template initially designed for use with N2G library to produce network diagrams based on OSPF link state database of Cisco IOS-XR devices. This template parses external-lsa only out of output produced by \"show ospf database external\" command. Caveats: need ttp>=0.7.0 , ttp==0.6.0 will not work due to bugs in it Produces this structure for each input datum/device output: [[{'ospf_processes': {'1': {'external_lsa': [{'mask': '0', 'metric': '1', 'metric_type': '2', 'originator_rid': '10.3.22.190', 'subnet': '0.0.0.0', 'tag': '10'}, {'mask': '0', 'metric': '1', 'metric_type': '2', 'originator_rid': '10.3.25.22', 'subnet': '0.0.0.0', 'tag': '10'}, {'mask': '8', 'metric': '20', 'metric_type': '2', 'originator_rid': '10.3.20.95', 'subnet': '10.0.0.0', 'tag': '0'}], 'local_rid': '10.1.2.2'}}, 'vars': {'hostname': 'router-1'}}]] This template initially designed for use with N2G library to produce network diagrams based on OSPF link state database of Cisco IOS-XR devices. This template parses external-lsa only out of output produced by \"show ospf database external\" command. Caveats: need ttp>=0.7.0 , ttp==0.6.0 will not work due to bugs in it Produces this structure for each input datum/device output: [[{'ospf_processes': {'1': {'local_rid': '10.1.2.2', 'summary_lsa': [{'area': '0.0.0.0', 'mask': '32', 'metric': '2312', 'originator_rid': '10.0.24.1', 'subnet': '10.1.0.1'}, {'area': '0.0.0.0', 'mask': '32', 'metric': '1806', 'originator_rid': '10.0.24.2', 'subnet': '10.1.0.1'}, {'area': '0.0.0.0', 'mask': '32', 'metric': '1312', 'originator_rid': '10.0.25.192', 'subnet': '10.1.0.1'}, {'area': '0.0.0.0', 'mask': '32', 'metric': '806', 'originator_rid': '10.0.25.193', 'subnet': '10.1.0.1'}, {'area': '0.0.0.32', 'mask': '32', 'metric': '2312', 'originator_rid': '10.0.24.1', 'subnet': '10.1.0.1'}]}}, 'vars': {'hostname': 'router-1'}}]] Template Content <doc> Template to parse Cisco IOSXR OSPF database content. </doc> <input load=\"python\"> commands = [ \"show ospf database router\", \"show ospf database summary\", \"show ospf database external\", ] kwargs = {\"strip_prompt\": False} method = \"send_command\" platform = [\"cisco_xr\"] </input> <extend template=\"ttp://platform/cisco_xr_show_ospf_database_router.txt\"/> <extend template=\"ttp://platform/cisco_xr_show_ospf_database_external.txt\"/> <extend template=\"ttp://platform/cisco_xr_show_ospf_database_summary.txt\"/>","title":"cli_ospf_data.cisco_xr"},{"location":"ttp_templates/misc.N2G.cli_ospf_data.huawei/","text":"Reference path: ttp://misc/N2G/cli_ospf_data/huawei.txt Template to parse Huawei devices OSPF database content. This template initially designed for use with N2G library to produce network diagrams based on OSPF link state database of Huawei devices. This template parses router-lsa only out of output produced by \"display ospf lsdb router\" command. Produces this structure for each input datum/device output: [ [ { \"ospf_processes\": { \"123\": { \"local_rid\": \"123.123.24.158\", \"router_lsa\": [ { \"area\": \"0.0.0.123\", \"connected_stub\": [ { \"link_data\": \"255.255.255.252\", \"link_id\": \"123.123.60.108\", \"metric\": \"1\", } ], \"originator_rid\": \"10.123.0.92\", \"ptp_peers\": [ { \"link_data\": \"123.123.60.109\", \"link_id\": \"123.123.24.31\", \"metric\": \"1\", }, { \"link_data\": \"123.123.60.201\", \"link_id\": \"123.123.24.5\", \"metric\": \"9000\", }, ], }, ], } } } ] ] Template Content <doc> Template to parse Huawei devices OSPF database content. </doc> <input load=\"python\"> commands = [ \"display ospf lsdb router\", ] kwargs = {\"strip_prompt\": False} method = \"send_command\" platform = [\"huawei\", \"huawei_vrpv8\"] </input> <extend template=\"ttp://platform/huawei_display_ospf_lsdb_router.txt\"/>","title":"cli_ospf_data.huawei"},{"location":"ttp_templates/misc.N2G.cli_ospf_data.readme/","text":"cli_ospf_data Templates This template designed for use with N2G library to produce network diagrams based on OSPF link state database of network devices. Caveats: need ttp>=0.8.0 for extend to work Results structure example: TBD","title":"cli_ospf_data.readme"},{"location":"ttp_templates/misc.N2G.cli_ospf_data.readme/#cli_ospf_data-templates","text":"This template designed for use with N2G library to produce network diagrams based on OSPF link state database of network devices. Caveats: need ttp>=0.8.0 for extend to work Results structure example: TBD","title":"cli_ospf_data Templates"},{"location":"ttp_templates/misc.Netmiko.cisco.ios.arp/","text":"Reference path: ttp://misc/Netmiko/cisco.ios.arp.txt TTP template to parse Cisco IOS \"show ip arp\" output. Template can be invoked using Netmiko run_ttp method like this: import pprint from netmiko import ConnectHandler net_connect = ConnectHandler( device_type=\"cisco_ios\", host=\"1.2.3.4\", username=\"admin\", password=\"admin\", ) res = net_connect.run_ttp(\"ttp://misc/netmiko/cisco.ios.arp.txt\", res_kwargs={\"structure\": \"flat_list\"}) pprint.pprint(res) # prints something along the lines of: # [{'age': 8, # 'ip': '172.29.50.1', # 'mac': '84:b8:02:76:ac:0e', # 'protocol': 'Internet', # 'type': 'ARPA'}, # {'age': 221, # 'interface': 'Vlan20', # 'ip': '172.29.50.2', # 'mac': '00:19:07:25:34:4a', # 'protocol': 'Internet', # 'type': 'ARPA'}, # {'age': -1, # 'interface': 'Vlan21', # 'ip': '172.29.50.3', # 'mac': '00:24:f7:dd:77:41', # 'protocol': 'Internet', # 'type': 'ARPA'}] TTP Template to parse Cisco IOS \"show ip arp output\". This template produces list of dictionaries results where each dictionary item compatible to this model: module arp-table { yang-version 1.1; namespace \"ttp://platform/cisco_ios_show_ip_arp\"; list entry { config false; key \"ip\"; leaf protocol { type string; } leaf ip { type string; mandatory true; description \"IP address\"; } leaf age { type uint32; description \"IP address\"; } leaf mac { type string; mandatory \"true\"; description \"MAC address\"; } leaf type { type string; } leaf interface { type string; default \"Uncknown\"; mandatory false; description \"Interface name\"; } } } Sample instance data: TBD Template Content <doc> TTP template to parse Cisco IOS \"show ip arp\" output. Template can be invoked using Netmiko run_ttp method like this: ''' import pprint from netmiko import ConnectHandler net_connect = ConnectHandler( device_type=\"cisco_ios\", host=\"1.2.3.4\", username=\"admin\", password=\"admin\", ) res = net_connect.run_ttp(\"ttp://misc/netmiko/cisco.ios.arp.txt\", res_kwargs={\"structure\": \"flat_list\"}) pprint.pprint(res) # prints something along the lines of: # [{'age': 8, # 'ip': '172.29.50.1', # 'mac': '84:b8:02:76:ac:0e', # 'protocol': 'Internet', # 'type': 'ARPA'}, # {'age': 221, # 'interface': 'Vlan20', # 'ip': '172.29.50.2', # 'mac': '00:19:07:25:34:4a', # 'protocol': 'Internet', # 'type': 'ARPA'}, # {'age': -1, # 'interface': 'Vlan21', # 'ip': '172.29.50.3', # 'mac': '00:24:f7:dd:77:41', # 'protocol': 'Internet', # 'type': 'ARPA'}] ''' </doc> <input> commands = [ \"show ip arp\" ] </input> <extend template=\"ttp://platform/cisco_ios_show_ip_arp.txt\"/>","title":"cisco.ios.arp"},{"location":"ttp_templates/misc.Netmiko.cisco.ios.cfg.bgp/","text":"Reference path: ttp://misc/Netmiko/cisco.ios.cfg.bgp.txt Requirements: TTP >= 0.8.x To use this template with Netmiko (>=3.4.x) run_ttp method: import pprint from netmiko import ConnectHandler net_connect = ConnectHandler( device_type=\"cisco_ios\", host=\"1.2.3.4\", username=\"admin\", password=\"admin\", ) res = net_connect.run_ttp(\"ttp://misc/netmiko/cisco.ios.cfg.bgp.txt\") pprint.pprint(res) Template to parse Cisco IOS BGP configuration. Requirements: TTP >= 0.7.x Structure produced by this template does not follow any known convention or schema for example openconfig-bgp, but rather was the easiest one to produce using TTP built-in features without overwhelming template with post-processing python code. Resulted structure follows Cisco native configuration style and capable of parsing subsets of: BGP global configuration BGP global neighbors and peer-groups definition AFI configuration including neighbors and networks VRF configuration including neighbors, networks and other parameters Sample device output: router bgp 65001 ! bgp router-id 10.5.1.1 bgp log-neighbor-changes neighbor 2001:db8::1 remote-as 65003 neighbor 2001:db8::1 description Peer1-Global neighbor 10.11.0.81 remote-as 65002 neighbor 10.11.0.81 description Peer2-Global neighbor 10.11.0.81 shutdown neighbor RR-CLIENTS peer-group neighbor RR-CLIENTS remote-as 65001 neighbor RR-CLIENTS description [ibgp - rr clients] neighbor RR-CLIENTS update-source GigabitEthernet1 neighbor 10.0.0.3 peer-group RR-CLIENTS neighbor 10.0.0.5 peer-group RR-CLIENTS ! address-family ipv4 network 10.255.10.0 mask 255.255.248.0 network 10.255.10.0 mask 255.255.255.0 redistribute connected route-map PORTABLE-v4 neighbor 10.11.0.81 activate neighbor 10.11.0.81 description Peer2-IPv4 neighbor RR-CLIENTS route-reflector-client neighbor RR-CLIENTS route-map PASS-IN in neighbor RR-CLIENTS route-map PASS-OUT out neighbor RR-CLIENTS maximum-prefix 1000 80 restart 15 neighbor 10.0.0.3 activate neighbor 10.0.0.5 activate exit-address-family ! address-family ipv6 redistribute connected network 2001:db8::/48 neighbor 2001:db8::1 activate neighbor 2001:db8::1 description Peer1-IPv6 exit-address-family ! address-family ipv4 multicast exit-address-family ! address-family vpnv4 unicast neighbor 3.3.3.3 activate exit-address-family ! address-family ipv4 vrf VoIP network 10.255.10.0 mask 255.255.248.0 bgp router-id 10.2.1.193 redistribute connected route-map tospokes neighbor 10.2.1.65 remote-as 65001 neighbor 10.2.1.65 description voip peer 1 neighbor 10.2.1.65 activate neighbor 10.2.1.78 remote-as 65001 neighbor 10.2.1.78 description voip peer 2 neighbor 10.2.1.78 shutdown neighbor 10.2.1.78 activate neighbor 10.2.1.78 next-hop-self neighbor 10.2.1.78 prefix-list VoIP-prefixes out exit-address-family ! address-family ipv4 vrf CUST-2 bgp router-id 1.1.1.1 redistribute connected neighbor 2.2.2.2 remote-as 65002 neighbor 2.2.2.2 description peer 12 neighbor 2.2.2.2 activate exit-address-family ! After parsing above output, TTP should produce these results: [[{'bgp': {'afis': {'ipv4_multicast': {}, 'ipv4_unicast': {'config': {'networks': [{'mask': '255.255.248.0', 'network': '10.255.10.0'}, {'mask': '255.255.255.0', 'network': '10.255.10.0'}], 'redistribute_connected': True, 'redistribute_connected_rpl': 'PORTABLE-v4'}, 'neighbors': {'10.0.0.3': {'activate': True}, '10.0.0.5': {'activate': True}, '10.11.0.81': {'activate': True}, 'RR-CLIENTS': {'max_prefix_action': 'restart', 'max_prefix_limit': '1000', 'max_prefix_restart_interval': '15', 'max_prefix_threshold': '80', 'rpl_out': 'PASS-OUT', 'rr_client': True}}}, 'ipv6_unicast': {'config': {'networks': [{'mask': '48', 'network': '2001:db8::'}], 'redistribute_connected': True}, 'neighbors': {'2001:db8::1': {'activate': True}}}, 'vpnv4_unicast': {'neighbors': {'3.3.3.3': {'activate': True}}}}, 'asn': '65001', 'config': {'bgp_rid': '10.5.1.1', 'log_neighbor_changes': True}, 'neighbors': {'10.0.0.3': {'peer_group': 'RR-CLIENTS'}, '10.0.0.5': {'peer_group': 'RR-CLIENTS'}, '10.11.0.81': {'asn': '65002', 'description': 'Peer2-Global', 'disabled': True}, '2001:db8::1': {'asn': '65003', 'description': 'Peer1-Global'}, 'RR-CLIENTS': {'asn': '65001', 'description': '[ibgp - rr clients]', 'is_peer_group': True, 'update_source': 'GigabitEthernet1'}}, 'vrfs': {'CUST-2': {'afi': 'ipv4', 'config': {'bgp_rid': '1.1.1.1', 'redistribute_connected': True}, 'neighbors': {'2.2.2.2': {'activate': True, 'asn': '65002', 'description': 'peer 12'}}}, 'VoIP': {'afi': 'ipv4', 'config': {'bgp_rid': '10.2.1.193', 'networks': [{'mask': '255.255.248.0', 'network': '10.255.10.0'}], 'redistribute_connected': True, 'redistribute_connected_rpl': 'tospokes'}, 'neighbors': {'10.2.1.65': {'activate': True, 'asn': '65001', 'description': 'voip peer 1'}, '10.2.1.78': {'activate': True, 'asn': '65001', 'description': 'voip peer 2', 'disabled': True, 'next_hop_self': True, 'pfl_out': 'VoIP-prefixes'}}}}}}]] To use this template with Netmiko (>=3.4.x) run_ttp method: import pprint from netmiko import ConnectHandler net_connect = ConnectHandler( device_type=\"cisco_ios\", host=\"1.2.3.4\", username=\"admin\", password=\"admin\", ) res = net_connect.run_ttp(\"ttp://misc/netmiko/cisco.ios.cfg.bgp.txt\") pprint.pprint(res) Template Content <doc> Requirements: 'TTP >= 0.8.x' To use this template with Netmiko (>=3.4.x) 'run_ttp' method: ''' import pprint from netmiko import ConnectHandler net_connect = ConnectHandler( device_type=\"cisco_ios\", host=\"1.2.3.4\", username=\"admin\", password=\"admin\", ) res = net_connect.run_ttp(\"ttp://misc/netmiko/cisco.ios.cfg.bgp.txt\") pprint.pprint(res) ''' </doc> <input> commands = [ \"show running-config | section bgp\" ] </input> <extend template=\"ttp://platform/cisco_ios_show_running_configuration_pipe_section_bgp.txt\"/>","title":"cisco.ios.cfg.bgp"},{"location":"ttp_templates/misc.Netmiko.cisco.ios.cfg.interface/","text":"Reference path: ttp://misc/Netmiko/cisco.ios.cfg.interface.txt Template to parse \"show running-config | section interface\" output for Cisco IOS. Template to produce list of dictionaries with interface configuration details using Cisco IOSXE \"show running-config | section interface\" command output. The exact command is \"show running-config\" and not \"show running-configuration\", as it is changed in later versions of IOSXE. Template Content <doc> Template to parse \"show running-config | section interface\" output for Cisco IOS. </doc> <input> commands = [\"show running-config | section interface\"] </input> <extend template=\"ttp://platform/cisco_ios_show_running_config_pipe_section_interface.txt\"/>","title":"cisco.ios.cfg.interface"},{"location":"ttp_templates/misc.Netmiko.cisco.ios.cfg.ip/","text":"Reference path: ttp://misc/Netmiko/cisco.ios.cfg.ip.txt Template to parse \"show running-config | section interface\" output. This template produces one dictionary item per IP address configured on device's interfaces including secondary and VRRP/HSRP IP addresses. Output is a list of dictionaries. Sample data: r1#show run | sec interface interface GigabitEthernet1 vrf forwarding MGMT ip address 10.7.89.55 255.255.255.0 negotiation auto no mop enabled interface GigabitEthernet1 vrf forwarding MGMT ip address 10.7.89.56 255.255.255.0 negotiation auto no mop enabled no mop sysid Sample results, structure=\"flat_list\": [ { \"description\": \"description\", \"hostname\": \"r1\", \"interface\": \"GigabitEthernet1\", \"ip\": \"10.7.89.55\", \"mask\": \"255.255.255.0\", \"vrf\": \"MGMT\" }, { \"description\": \"description\", \"hostname\": \"r1\", \"interface\": \"GigabitEthernet1\", \"ip\": \"10.7.89.56\", \"mask\": \"255.255.255.0\", \"vrf\": \"MGMT\" } ] Template can be invoked using Netmiko run_ttp method like this: import pprint from netmiko import ConnectHandler net_connect = ConnectHandler( device_type=\"cisco_ios\", host=\"1.2.3.4\", username=\"admin\", password=\"admin\", ) res = net_connect.run_ttp(\"ttp://misc/netmiko/cisco.ios.cfg.ip.txt\", res_kwargs={\"structure\": \"flat_list\"}) pprint.pprint(res) Template Content <doc> Template to parse \"show running-config | section interface\" output. This template produces one dictionary item per IP address configured on device's interfaces including secondary and VRRP/HSRP IP addresses. Output is a list of dictionaries. Sample data: ''' r1#show run | sec interface interface GigabitEthernet1 vrf forwarding MGMT ip address 10.7.89.55 255.255.255.0 negotiation auto no mop enabled interface GigabitEthernet1 vrf forwarding MGMT ip address 10.7.89.56 255.255.255.0 negotiation auto no mop enabled no mop sysid ''' Sample results, structure=\"flat_list\": ''' [ { \"description\": \"description\", \"hostname\": \"r1\", \"interface\": \"GigabitEthernet1\", \"ip\": \"10.7.89.55\", \"mask\": \"255.255.255.0\", \"vrf\": \"MGMT\" }, { \"description\": \"description\", \"hostname\": \"r1\", \"interface\": \"GigabitEthernet1\", \"ip\": \"10.7.89.56\", \"mask\": \"255.255.255.0\", \"vrf\": \"MGMT\" } ] ''' Template can be invoked using Netmiko run_ttp method like this: ''' import pprint from netmiko import ConnectHandler net_connect = ConnectHandler( device_type=\"cisco_ios\", host=\"1.2.3.4\", username=\"admin\", password=\"admin\", ) res = net_connect.run_ttp(\"ttp://misc/netmiko/cisco.ios.cfg.ip.txt\", res_kwargs={\"structure\": \"flat_list\"}) pprint.pprint(res) ''' </doc> <input> commands = [ \"show running-config | section interface\" ] # need to keep prompt for \"gethostname\" to work kwargs = { \"strip_prompt\": False, \"strip_command\": False } </input> <vars> hostname=\"gethostname\" record_all = [ \"record(interface)\", \"record(description)\", \"record(vrf)\", \"void()\" ] set_all = [ \"set(interface)\", \"set(description)\", \"set(vrf)\", \"set(hostname)\" ] </vars> <group chain=\"record_all\"> interface {{ interface | resuball(\"short_interface_names\") }} description {{ description | re(\".+\") }} vrf forwarding {{ vrf | default(\"default\") }} <group name=\"/\" chain=\"set_all\" method=\"table\"> ip address {{ ipv4 | IP }} {{ mask }} ip address {{ ipv4 | IP | let(\"secondary\", True) }} {{ mask }} secondary ipv6 address {{ ipv6 | IPV6 | _exact_ }}/{{ mask }} vrrp 1 ip {{ ipv4 | IP | let(\"vip\", True) | let(\"vip_type\", \"VRRP\") }} standby 1 ip {{ ipv4 | IP | let(\"vip\", True) | let(\"vip_type\", \"HSRP\") }} </group> ! {{ _end_ }} </group>","title":"cisco.ios.cfg.ip"},{"location":"ttp_templates/misc.Netmiko.cisco.ios.cfg.nat.static/","text":"Reference path: ttp://misc/Netmiko/cisco.ios.cfg.nat.static.txt Template to parse Cisco IOS show run | include source static command output Using Netmiko run_ttp method. Extends template: ttp://platform/cisco_ios_show_running_config_pipe_include_source_static.txt Code to invoke this template Netmiko run_ttp method: from netmiko import ConnectHandler net_connect = ConnectHandler( device_type=\"cisco_ios\", host=\"1.2.3.4\", username=\"admin\", password=\"admin\", ) res = net_connect.run_ttp(\"ttp://misc/netmiko/cisco.ios.cfg.nat.static.txt\") GitHub Issue: https://github.com/dmulyalin/ttp_templates/issues/1 Author: Denis Mulyalin in cooperation with abhi1693 Template to parse Cisco IOS show run | include source static command output. Template's YANG model (not tested): module nat { yang-version 1.1; namespace \"ttp://platform/cisco_ios_show_running_config_pipe_include_source_static.txt\"; prefix nat; revision \"2022-May-04\" { description \"Initial Revision\"; } description \"Template to parse Cisco IOS static NAT configuration\"; list static { key inside_ip; leaf inside_ip { type string; } leaf location { type string; } leaf global_ip { type string; } leaf interface { type string; } leaf inside_port { type uint32; } leaf global_port { type uint32; } leaf vrf { type string; } } } Sample data: ip nat inside source static 10.10.10.10 3.3.3.3 extendable ip nat inside source static tcp 192.168.1.10 443 3.3.4.4 443 vrf VRF1000 extendable ip nat inside source static 192.168.2.10 3.3.4.5 vrf VRF1002 extendable ip nat inside source static tcp 192.168.3.10 3389 3.3.5.6 13389 extendable ip nat inside source static 20.20.20.20 6.6.6.6 extendable ip nat inside source static tcp 30.30.30.30 443 interface TenGigabitEthernet0/0/0 1443 Expected output: [ { \"nat\": { \"static\": [ { \"global_ip\": \"3.3.3.3\", \"inside_ip\": \"10.10.10.10\", \"location\": \"inside\" }, { \"global_ip\": \"3.3.4.4\", \"global_port\": 443, \"inside_ip\": \"192.168.1.10\", \"inside_port\": 443, \"location\": \"inside\", \"protocol\": \"tcp\", \"vrf\": \"VRF1000\" }, { \"global_ip\": \"3.3.4.5\", \"inside_ip\": \"192.168.2.10\", \"location\": \"inside\", \"vrf\": \"VRF1002\" }, { \"global_ip\": \"3.3.5.6\", \"global_port\": 13389, \"inside_ip\": \"192.168.3.10\", \"inside_port\": 3389, \"location\": \"inside\", \"protocol\": \"tcp\" }, { \"global_ip\": \"6.6.6.6\", \"inside_ip\": \"20.20.20.20\", \"location\": \"inside\" }, { \"global_port\": 1443, \"inside_ip\": \"30.30.30.30\", \"inside_port\": 443, \"interface\": \"TenGigabitEthernet0/0/0\", \"location\": \"inside\", \"protocol\": \"tcp\" } ] } } ] Template Content <doc> Template to parse Cisco IOS 'show run | include source static' command output Using Netmiko run_ttp method. Extends template: 'ttp://platform/cisco_ios_show_running_config_pipe_include_source_static.txt' Code to invoke this template Netmiko 'run_ttp' method: ''' from netmiko import ConnectHandler net_connect = ConnectHandler( device_type=\"cisco_ios\", host=\"1.2.3.4\", username=\"admin\", password=\"admin\", ) res = net_connect.run_ttp(\"ttp://misc/netmiko/cisco.ios.cfg.nat.static.txt\") ''' </doc> <input> commands = [ \"show running-config | include source static\" ] </input> <extend template=\"ttp://platform/cisco_ios_show_running_config_pipe_include_source_static.txt\"/>","title":"cisco.ios.cfg.nat.static"},{"location":"ttp_templates/misc.Netmiko.cisco.iosxr.arp/","text":"Reference path: ttp://misc/Netmiko/cisco.iosxr.arp.txt TTP template to parse Cisco IOS XR \"show arp vrf all\" output with Netmiko. Template can be invoked using Netmiko run_ttp method like this: import pprint from netmiko import ConnectHandler net_connect = ConnectHandler( device_type=\"cisco_xr\", host=\"1.2.3.4\", username=\"admin\", password=\"admin\", ) res = net_connect.run_ttp(\"ttp://misc/netmiko/cisco.iosxr.arp.txt\", res_kwargs={\"structure\": \"flat_list\"}) pprint.pprint(res) # prints something along the lines of: # [{'age': 8, # 'ip': '172.29.50.1', # 'mac': '84:b8:02:76:ac:0e', # 'protocol': 'Internet', # 'type': 'ARPA'}, # {'age': 221, # 'interface': 'Vlan20', # 'ip': '172.29.50.2', # 'mac': '00:19:07:25:34:4a', # 'protocol': 'Internet', # 'type': 'ARPA'}, # {'age': '-', # 'interface': 'Vlan21', # 'ip': '172.29.50.3', # 'mac': '00:24:f7:dd:77:41', # 'protocol': 'Internet', # 'type': 'ARPA'}] TTP template to parse Cisco IOS XR \"show arp vrf all\" output. Template Content <doc> TTP template to parse Cisco IOS XR \"show arp vrf all\" output with Netmiko. Template can be invoked using Netmiko run_ttp method like this: ''' import pprint from netmiko import ConnectHandler net_connect = ConnectHandler( device_type=\"cisco_xr\", host=\"1.2.3.4\", username=\"admin\", password=\"admin\", ) res = net_connect.run_ttp(\"ttp://misc/netmiko/cisco.iosxr.arp.txt\", res_kwargs={\"structure\": \"flat_list\"}) pprint.pprint(res) # prints something along the lines of: # [{'age': 8, # 'ip': '172.29.50.1', # 'mac': '84:b8:02:76:ac:0e', # 'protocol': 'Internet', # 'type': 'ARPA'}, # {'age': 221, # 'interface': 'Vlan20', # 'ip': '172.29.50.2', # 'mac': '00:19:07:25:34:4a', # 'protocol': 'Internet', # 'type': 'ARPA'}, # {'age': '-', # 'interface': 'Vlan21', # 'ip': '172.29.50.3', # 'mac': '00:24:f7:dd:77:41', # 'protocol': 'Internet', # 'type': 'ARPA'}] ''' </doc> <input> commands = [ \"show arp vrf all\" ] </input> <extend template=\"ttp://platform/cisco_xr_show_arp_vrf_all.txt\"/>","title":"cisco.iosxr.arp"},{"location":"ttp_templates/misc.Netmiko.cisco.iosxr.cfg.interface/","text":"Reference path: ttp://misc/Netmiko/cisco.iosxr.cfg.interface.txt Template to parse \"show running-config interface\" output for Cisco IOSXR. Template to produce list of dictionaries with interface configuration details using Cisco IOS-XR \"show run interface\" command output. Template Content <doc> Template to parse \"show running-config interface\" output for Cisco IOSXR. </doc> <input> commands = [\"show running-config interface\"] </input> <extend template=\"ttp://platform/cisco_xr_show_running_config_interface.txt\"/>","title":"cisco.iosxr.cfg.interface"},{"location":"ttp_templates/misc.Netmiko.cisco.iosxr.cfg.ip/","text":"Reference path: ttp://misc/Netmiko/cisco.iosxr.cfg.ip.txt Template to parse \"show running-config interface\" output. This template produces one dictionary item per IP address configured on device's interfaces including secondary and VRRP/HSRP IP addresses. Output is a list of dictionaries. Sample data: RP/0/RP0/CPU0:r1#show running-config interface interface Bundle-Ether1 description Description of interface ipv4 address 10.1.2.54 255.255.255.252 ipv6 address fd00:1:2::31/126 ! interface Loopback123 description VRF 123 vrf VRF-1123 ipv4 address 10.1.0.10 255.255.255.255 ! RP/0/RP0/CPU0:r1#show running-config router vrrp router vrrp interface GigabitEthernet0/0/0/48 address-family ipv4 vrrp 1 address 1.1.1.1 ! ! address-family ipv6 vrrp 1 address global fd::1 ! RP/0/RP0/CPU0:r1#show running-config router hsrp router hsrp interface GigabitEthernet0/0/0/22 address-family ipv4 hsrp 1 address 3.3.3.3 ! ! address-family ipv6 hsrp 1 address global fd::3 Sample results, structure=\"flat_list\": [ { \"description\": \"description\", \"hostname\": \"r1\", \"interface\": \"GigabitEthernet1\", \"ip\": \"10.7.89.55\", \"mask\": \"255.255.255.0\", \"vrf\": \"MGMT\" }, { \"description\": \"description\", \"hostname\": \"r1\", \"interface\": \"GigabitEthernet1\", \"ip\": \"10.7.89.56\", \"mask\": \"255.255.255.0\", \"vrf\": \"MGMT\" } ] Template can be invoked using Netmiko run_ttp method like this: import pprint from netmiko import ConnectHandler net_connect = ConnectHandler( device_type=\"cisco_ios\", host=\"1.2.3.4\", username=\"admin\", password=\"admin\", ) res = net_connect.run_ttp(\"ttp://misc/netmiko/cisco.ios.cfg.ip.txt\", res_kwargs={\"structure\": \"flat_list\"}) pprint.pprint(res) How this template works: Parses output from device using group with name=\"intf_lookup**.{{ interface }}\" to form interfaces lookup table and record description with VRF Interfaces IP addresses parsed next using group name=\"intf\" adding info about interface using intf_lookup lookup table VRRP VIP parsed, adding info about interface using intf_lookup lookup table HSRP VIP parsed, adding info about interface using intf_lookup lookup table This is sample structure produced after above parsing finishes: [{'intf': [{'interface': 'Bundle-Ether1'}, {'interface': 'Loopback123'}], 'intf_lookup': {'Bundle-Ether1': {'description': 'Description of interface', 'vrf': 'customer_1'}, 'Loopback123': {'description': 'VRF 123', 'vrf': 'VRF-1123'}}, 'ip': [{'description': 'Description of interface', 'hostname': 'r1', 'interface': 'Bundle-Ether1', 'ipv4': '10.1.2.54', 'mask': '255.255.255.252', 'vrf': 'customer_1'}, {'description': 'Description of interface', 'hostname': 'r1', 'interface': 'Bundle-Ether1', 'ipv6': 'fd00:1:2::31', 'mask': '126', 'vrf': 'customer_1'}, {'description': 'VRF 123', 'hostname': 'r1', 'interface': 'Loopback123', 'ipv4': '10.1.0.10', 'mask': '255.255.255.255', 'vrf': 'VRF-1123'}]}, {'ip': [{'description': 'Description of interface', 'hostname': 'r1', 'interface': 'Bundle-Ether1', 'ipv4': '1.1.1.1', 'vip': True, 'vip_type': 'VRRP', 'vrf': 'customer_1'}, {'description': 'Description of interface', 'hostname': 'r1', 'interface': 'Bundle-Ether1', 'ipv6': 'fd::1', 'vip': True, 'vip_type': 'VRRP', 'vrf': 'customer_1'}], 'vrrp': {'vrrp_intf': {'interface': 'Bundle-Ether1'}}}, {'hsrp': {'hsrp_intf': {'interface': 'Bundle-Ether1'}}, 'ip': [{'description': 'Description of interface', 'hostname': 'r1', 'interface': 'Bundle-Ether1', 'ipv4': '3.3.3.3', 'vip': True, 'vip_type': 'HSRP', 'vrf': 'customer_1'}, {'description': 'Description of interface', 'hostname': 'r1', 'interface': 'Bundle-Ether1', 'ipv6': 'fd::3', 'vip': True, 'vip_type': 'HSRP', 'vrf': 'customer_1'}]}] Above structure passed through output with \"process\" macro function to transform results into a list of IP address dictionaries such as: [{'description': 'Description of interface', 'hostname': 'r1', 'interface': 'Bundle-Ether1', 'ipv4': '10.1.2.54', 'mask': '255.255.255.252', 'vrf': 'customer_1'}, {'description': 'Description of interface', 'hostname': 'r1', 'interface': 'Bundle-Ether1', 'ipv6': 'fd00:1:2::31', 'mask': '126', 'vrf': 'customer_1'}, {'description': 'VRF 123', 'hostname': 'r1', 'interface': 'Loopback123', 'ipv4': '10.1.0.10', 'mask': '255.255.255.255', 'vrf': 'VRF-1123'}, {'description': 'Description of interface', 'hostname': 'r1', 'interface': 'Bundle-Ether1', 'ipv4': '1.1.1.1', 'vip': True, 'vip_type': 'VRRP', 'vrf': 'customer_1'}, {'description': 'Description of interface', 'hostname': 'r1', 'interface': 'Bundle-Ether1', 'ipv6': 'fd::1', 'vip': True, 'vip_type': 'VRRP', 'vrf': 'customer_1'}, {'description': 'Description of interface', 'hostname': 'r1', 'interface': 'Bundle-Ether1', 'ipv4': '3.3.3.3', 'vip': True, 'vip_type': 'HSRP', 'vrf': 'customer_1'}, {'description': 'Description of interface', 'hostname': 'r1', 'interface': 'Bundle-Ether1', 'ipv6': 'fd::3', 'vip': True, 'vip_type': 'HSRP', 'vrf': 'customer_1'}] Template Content <doc> Template to parse \"show running-config interface\" output. This template produces one dictionary item per IP address configured on device's interfaces including secondary and VRRP/HSRP IP addresses. Output is a list of dictionaries. Sample data: ''' RP/0/RP0/CPU0:r1#show running-config interface interface Bundle-Ether1 description Description of interface ipv4 address 10.1.2.54 255.255.255.252 ipv6 address fd00:1:2::31/126 ! interface Loopback123 description VRF 123 vrf VRF-1123 ipv4 address 10.1.0.10 255.255.255.255 ! RP/0/RP0/CPU0:r1#show running-config router vrrp router vrrp interface GigabitEthernet0/0/0/48 address-family ipv4 vrrp 1 address 1.1.1.1 ! ! address-family ipv6 vrrp 1 address global fd::1 ! RP/0/RP0/CPU0:r1#show running-config router hsrp router hsrp interface GigabitEthernet0/0/0/22 address-family ipv4 hsrp 1 address 3.3.3.3 ! ! address-family ipv6 hsrp 1 address global fd::3 ''' Sample results, structure=\"flat_list\": ''' [ { \"description\": \"description\", \"hostname\": \"r1\", \"interface\": \"GigabitEthernet1\", \"ip\": \"10.7.89.55\", \"mask\": \"255.255.255.0\", \"vrf\": \"MGMT\" }, { \"description\": \"description\", \"hostname\": \"r1\", \"interface\": \"GigabitEthernet1\", \"ip\": \"10.7.89.56\", \"mask\": \"255.255.255.0\", \"vrf\": \"MGMT\" } ] ''' Template can be invoked using Netmiko 'run_ttp' method like this: ''' import pprint from netmiko import ConnectHandler net_connect = ConnectHandler( device_type=\"cisco_ios\", host=\"1.2.3.4\", username=\"admin\", password=\"admin\", ) res = net_connect.run_ttp(\"ttp://misc/netmiko/cisco.ios.cfg.ip.txt\", res_kwargs={\"structure\": \"flat_list\"}) pprint.pprint(res) ''' How this template works: 1. Parses output from device using group with name=\"intf_lookup**.{{ interface }}\" to form interfaces lookup table and record description with VRF 2. Interfaces IP addresses parsed next using group name=\"intf\" adding info about interface using intf_lookup lookup table 3. VRRP VIP parsed, adding info about interface using intf_lookup lookup table 4. HSRP VIP parsed, adding info about interface using intf_lookup lookup table This is sample structure produced after above parsing finishes: ''' [{'intf': [{'interface': 'Bundle-Ether1'}, {'interface': 'Loopback123'}], 'intf_lookup': {'Bundle-Ether1': {'description': 'Description of interface', 'vrf': 'customer_1'}, 'Loopback123': {'description': 'VRF 123', 'vrf': 'VRF-1123'}}, 'ip': [{'description': 'Description of interface', 'hostname': 'r1', 'interface': 'Bundle-Ether1', 'ipv4': '10.1.2.54', 'mask': '255.255.255.252', 'vrf': 'customer_1'}, {'description': 'Description of interface', 'hostname': 'r1', 'interface': 'Bundle-Ether1', 'ipv6': 'fd00:1:2::31', 'mask': '126', 'vrf': 'customer_1'}, {'description': 'VRF 123', 'hostname': 'r1', 'interface': 'Loopback123', 'ipv4': '10.1.0.10', 'mask': '255.255.255.255', 'vrf': 'VRF-1123'}]}, {'ip': [{'description': 'Description of interface', 'hostname': 'r1', 'interface': 'Bundle-Ether1', 'ipv4': '1.1.1.1', 'vip': True, 'vip_type': 'VRRP', 'vrf': 'customer_1'}, {'description': 'Description of interface', 'hostname': 'r1', 'interface': 'Bundle-Ether1', 'ipv6': 'fd::1', 'vip': True, 'vip_type': 'VRRP', 'vrf': 'customer_1'}], 'vrrp': {'vrrp_intf': {'interface': 'Bundle-Ether1'}}}, {'hsrp': {'hsrp_intf': {'interface': 'Bundle-Ether1'}}, 'ip': [{'description': 'Description of interface', 'hostname': 'r1', 'interface': 'Bundle-Ether1', 'ipv4': '3.3.3.3', 'vip': True, 'vip_type': 'HSRP', 'vrf': 'customer_1'}, {'description': 'Description of interface', 'hostname': 'r1', 'interface': 'Bundle-Ether1', 'ipv6': 'fd::3', 'vip': True, 'vip_type': 'HSRP', 'vrf': 'customer_1'}]}] ''' Above structure passed through output with \"process\" macro function to transform results into a list of IP address dictionaries such as: ''' [{'description': 'Description of interface', 'hostname': 'r1', 'interface': 'Bundle-Ether1', 'ipv4': '10.1.2.54', 'mask': '255.255.255.252', 'vrf': 'customer_1'}, {'description': 'Description of interface', 'hostname': 'r1', 'interface': 'Bundle-Ether1', 'ipv6': 'fd00:1:2::31', 'mask': '126', 'vrf': 'customer_1'}, {'description': 'VRF 123', 'hostname': 'r1', 'interface': 'Loopback123', 'ipv4': '10.1.0.10', 'mask': '255.255.255.255', 'vrf': 'VRF-1123'}, {'description': 'Description of interface', 'hostname': 'r1', 'interface': 'Bundle-Ether1', 'ipv4': '1.1.1.1', 'vip': True, 'vip_type': 'VRRP', 'vrf': 'customer_1'}, {'description': 'Description of interface', 'hostname': 'r1', 'interface': 'Bundle-Ether1', 'ipv6': 'fd::1', 'vip': True, 'vip_type': 'VRRP', 'vrf': 'customer_1'}, {'description': 'Description of interface', 'hostname': 'r1', 'interface': 'Bundle-Ether1', 'ipv4': '3.3.3.3', 'vip': True, 'vip_type': 'HSRP', 'vrf': 'customer_1'}, {'description': 'Description of interface', 'hostname': 'r1', 'interface': 'Bundle-Ether1', 'ipv6': 'fd::3', 'vip': True, 'vip_type': 'HSRP', 'vrf': 'customer_1'}] ''' </doc> <input> commands = [\"show running-config interface\"] # need to keep prompt for \"gethostname\" to work kwargs = { \"strip_prompt\": False, \"strip_command\": False } </input> <input name=\"vrrp_cfg\"> commands = [\"show running-config router vrrp\"] </input> <input name=\"hsrp_cfg\"> commands = [\"show running-config router hsrp\"] </input> <vars> hostname=\"gethostname\" set_all = [ \"set(hostname)\", \"set(interface)\", \"lookup(group='intf_lookup', key='interface', update=True)\" ] </vars> <group name=\"intf_lookup**.{{ interface }}\"> interface {{ interface | resuball(\"short_interface_names\") }} description {{ description | re(\".+\") }} vrf {{ vrf | default(\"default\") }} </group> <group name=\"intf\" record=\"interface\"> interface {{ interface | resuball(\"short_interface_names\") }} <group name=\"/ip*\" chain=\"set_all\" method=\"table\"> ipv4 address {{ ipv4 | IP | _exact_ }} {{ mask4 }} ipv4 address {{ ipv4 | IP | _exact_ | let(\"secondary\", True) }} {{ mask4 }} secondary ipv6 address {{ ipv6 | IPV6 | _exact_ }}/{{ mask6 }} </group> ! {{ _end_ }} </group> <group name=\"vrrp\" input=\"vrrp_cfg\"> router vrrp {{ _start_ }} <group name=\"vrrp_intf\" record=\"interface\"> interface {{ interface | resuball(\"short_interface_names\") }} <group name=\"/ip*\" chain=\"set_all\" method=\"table\"> address {{ ipv4 | IP | let(\"vip\", True) | let(\"vip_type\", \"VRRP\") }} address global {{ ipv6 | IPV6 | let(\"vip\", True) | let(\"vip_type\", \"VRRP\") }} </group> </group> ! {{ _end_ }} </group> <group name=\"hsrp\" input=\"hsrp_cfg\"> router hsrp {{ _start_ }} <group name=\"hsrp_intf\" record=\"interface\"> interface {{ interface | resuball(\"short_interface_names\") }} <group name=\"/ip*\" chain=\"set_all\" method=\"table\"> address {{ ipv4 | IP | let(\"vip\", True) | let(\"vip_type\", \"HSRP\") }} address global {{ ipv6 | IPV6 | let(\"vip\", True) | let(\"vip_type\", \"HSRP\") }} </group> </group> ! {{ _end_ }} </group> <output macro=\"process\"/> <macro> def process(data): ret = [] for input_res_item in data: ret.extend(input_res_item.get(\"ip\", [])) return ret </macro>","title":"cisco.iosxr.cfg.ip"},{"location":"ttp_templates/misc.Netmiko.huawei.vrp.cfg.interface/","text":"Reference path: ttp://misc/Netmiko/huawei.vrp.cfg.interface.txt Template to parse \"display current-configuration interface\" output for Huawei devices. Template to produce list of dictionaries with interface configuration details using Huawei \"display current-configuration interface\" command output. Template Content <doc> Template to parse \"display current-configuration interface\" output for Huawei devices. </doc> <input> commands = [\"display current-configuration interface\"] </input> <extend template=\"ttp://platform/huawei_display_current_configuration_interface.txt\"/>","title":"huawei.vrp.cfg.interface"},{"location":"ttp_templates/misc.Netmiko.huawei.vrp.cfg.ip/","text":"Reference path: ttp://misc/Netmiko/huawei.vrp.cfg.ip.txt Template to parse \"display current-configuration interface\" output. This template produces one dictionary item per IP address configured on device's interfaces including secondary and VRRP IP addresses. Output is a list of dictionaries. Sample data: Huawei-box-1-dis cur interface interface Eth-Trunk1.100 vlan-type dot1q 100 mtu 9600 description Link description here ip address 10.1.130.2 255.255.255.252 ip binding vpn-instance VRF1 vrrp6 vrid 1 virtual-ip 2001:db8::100 # Sample results, structure=\"flat_list\": [ { \"description\": \"description\", \"hostname\": \"Huawei-box-1\", \"interface\": \"Eth-Trunk1.100\", \"ip\": \"10.1.130.2\", \"mask\": \"255.255.255.252\", \"vrf\": \"VRF1\" } ] Template supports Netmiko run_ttp method: import pprint from netmiko import ConnectHandler net_connect = ConnectHandler( device_type=\"huawei\", host=\"1.2.3.4\", username=\"admin\", password=\"admin\", ) res = net_connect.run_ttp(\"ttp://misc/netmiko/huawei.vrp.cfg.ip.txt\", res_kwargs={\"structure\": \"flat_list\"}) pprint.pprint(res) # prints something along the lines of: # Template Content <doc> Template to parse \"display current-configuration interface\" output. This template produces one dictionary item per IP address configured on device's interfaces including secondary and VRRP IP addresses. Output is a list of dictionaries. Sample data: ''' Huawei-box-1-dis cur interface interface Eth-Trunk1.100 vlan-type dot1q 100 mtu 9600 description Link description here ip address 10.1.130.2 255.255.255.252 ip binding vpn-instance VRF1 vrrp6 vrid 1 virtual-ip 2001:db8::100 # ''' Sample results, structure=\"flat_list\": ''' [ { \"description\": \"description\", \"hostname\": \"Huawei-box-1\", \"interface\": \"Eth-Trunk1.100\", \"ip\": \"10.1.130.2\", \"mask\": \"255.255.255.252\", \"vrf\": \"VRF1\" } ] ''' Template supports Netmiko run_ttp method: ''' import pprint from netmiko import ConnectHandler net_connect = ConnectHandler( device_type=\"huawei\", host=\"1.2.3.4\", username=\"admin\", password=\"admin\", ) res = net_connect.run_ttp(\"ttp://misc/netmiko/huawei.vrp.cfg.ip.txt\", res_kwargs={\"structure\": \"flat_list\"}) pprint.pprint(res) # prints something along the lines of: # ''' </doc> <input> commands = [ \"display current-configuration interface\" ] # need to keep prompt for \"gethostname\" to work kwargs = { \"strip_prompt\": False, \"strip_command\": False } </input> <vars> hostname=\"gethostname\" record_all = [ \"record(interface)\", \"record(description)\", \"record(vrf)\", \"void()\" ] set_all = [ \"set(interface)\", \"set(description)\", \"set(vrf)\", \"set(hostname)\" ] </vars> <group chain=\"record_all\"> interface {{ interface | resuball(\"short_interface_names\") }} description {{ description | re(\".+\") }} ip binding vpn-instance {{ vrf | default(\"default\") }} <group name=\"/\" chain=\"set_all\" method=\"table\"> ip address {{ ipv4 | IP }} {{ mask }} ip address {{ ipv4 | IP | let(\"secondary\", True) }} {{ mask }} sub ipv6 address {{ ipv6 | IPV6 | _exact_ }}/{{ mask }} vrrp vrid 1 virtual-ip {{ ipv4 | IP | let(\"vip\", True) | let(\"vip_type\", \"VRRP\") }} vrrp6 vrid 1 virtual-ip {{ ipv6 | IPV6 | let(\"vip\", True) | let(\"vip_type\", \"VRRP\") | _exact_ }} </group> # {{ _end_ }} </group>","title":"huawei.vrp.cfg.ip"},{"location":"ttp_templates/misc.ttp_templates_tests.cisco_ios_interfaces_cfg_per_ip/","text":"Reference path: ttp://misc/ttp_templates_tests/cisco_ios_interfaces_cfg_per_ip.txt This template produces one dictionary item per ip address configured on device's interfaces including secondary and VRRP IPs. Output is a list of dictionaries. Sample data: r1#show run | sec interface interface GigabitEthernet1 vrf forwarding MGMT ip address 10.223.89.55 255.255.255.0 negotiation auto no mop enabled interface GigabitEthernet1 vrf forwarding MGMT ip address 10.223.89.56 255.255.255.0 negotiation auto no mop enabled no mop sysid Sample results, structure=\"flat_list\": [ { \"description\": \"description\", \"hostname\": \"r1\", \"interface\": \"GigabitEthernet1\", \"ip\": \"10.223.89.55\", \"mask\": \"255.255.255.0\", \"vrf\": \"MGMT\" }, { \"description\": \"description\", \"hostname\": \"r1\", \"interface\": \"GigabitEthernet1\", \"ip\": \"10.223.89.56\", \"mask\": \"255.255.255.0\", \"vrf\": \"MGMT\" } ] How to use:: from ttp import ttp from ttp_templates import get_template from pprint import pprint data = \"text output from device\" parser = ttp( template=get_template(misc=\"ttp_templates_tests/cisco_ios_interfaces_cfg_per_ip.txt\") ) parser.add_input(data, template_name=\"interfaces\") parser.parse() pprint(parser.result()) Template Content <template name=\"interfaces\" results=\"per_template\"> <doc> This template produces one dictionary item per ip address configured on device's interfaces including secondary and VRRP IPs. Output is a list of dictionaries. Sample data: ''' r1#show run | sec interface interface GigabitEthernet1 vrf forwarding MGMT ip address 10.223.89.55 255.255.255.0 negotiation auto no mop enabled interface GigabitEthernet1 vrf forwarding MGMT ip address 10.223.89.56 255.255.255.0 negotiation auto no mop enabled no mop sysid ''' Sample results, structure=\"flat_list\": ''' [ { \"description\": \"description\", \"hostname\": \"r1\", \"interface\": \"GigabitEthernet1\", \"ip\": \"10.223.89.55\", \"mask\": \"255.255.255.0\", \"vrf\": \"MGMT\" }, { \"description\": \"description\", \"hostname\": \"r1\", \"interface\": \"GigabitEthernet1\", \"ip\": \"10.223.89.56\", \"mask\": \"255.255.255.0\", \"vrf\": \"MGMT\" } ] ''' How to use:: ''' from ttp import ttp from ttp_templates import get_template from pprint import pprint data = \"text output from device\" parser = ttp( template=get_template(misc=\"ttp_templates_tests/cisco_ios_interfaces_cfg_per_ip.txt\") ) parser.add_input(data, template_name=\"interfaces\") parser.parse() pprint(parser.result()) ''' </doc> <input> commands = [ \"show run | sec interface\" ] </input> <vars> hostname=\"gethostname\" record_all = [ \"record(interface)\", \"record(description)\", \"record(vrf)\", \"void()\" ] set_all = [ \"set(interface)\", \"set(description)\", \"set(vrf)\", \"set(hostname)\" ] </vars> <group name=\"intf_cfg\" chain=\"record_all\"> interface {{ interface }} description {{ description | ORPHRASE }} vrf forwarding {{ vrf }} <group name=\"/\" chain=\"set_all\" method=\"table\"> ip address {{ ip }} {{ mask }} ip address {{ ip | let(\"secondary\", True) }} {{ mask }} secondary vrrp 1 ip {{ ip | let(\"vrrp vip\", True) }} vrrp 1 ip {{ ip | let(\"vrrp vip\", True) | let(\"secondary\", True) }} secondary </group> </group> </template>","title":"cisco_ios_interfaces_cfg_per_ip"},{"location":"ttp_templates/misc.ttp_templates_tests.netmiko_cisco_ios_interfaces/","text":"Reference path: ttp://misc/ttp_templates_tests/netmiko_cisco_ios_interfaces.txt This template used in to test Netmiko run_ttp method Template Content <template name=\"interfaces\" results=\"per_template\"> <doc> This template used in to test Netmiko 'run_ttp' method </doc> <input> commands = [ \"show run | sec interface\" ] </input> <group name=\"intf_cfg\"> interface {{ interface }} description {{ description | ORPHRASE }} ip address {{ ip }} {{ mask }} </group> </template>","title":"netmiko_cisco_ios_interfaces"},{"location":"ttp_templates/platform.arista_eos_show_hostname/","text":"Reference path: ttp://platform/arista_eos_show_hostname.txt Template to parse Arista EOS \"show hostname\" command output Template Content <doc> Template to parse Arista EOS \"show hostname\" command output </doc> <group> Hostname: {{ hostname }} FQDN: {{ fqdn }} </group>","title":"arista_eos_show_hostname"},{"location":"ttp_templates/platform.cisco_ios_show_ip_arp/","text":"Reference path: ttp://platform/cisco_ios_show_ip_arp.txt TTP Template to parse Cisco IOS \"show ip arp output\". This template produces list of dictionaries results where each dictionary item compatible to this model: module arp-table { yang-version 1.1; namespace \"ttp://platform/cisco_ios_show_ip_arp\"; list entry { config false; key \"ip\"; leaf protocol { type string; } leaf ip { type string; mandatory true; description \"IP address\"; } leaf age { type uint32; description \"IP address\"; } leaf mac { type string; mandatory \"true\"; description \"MAC address\"; } leaf type { type string; } leaf interface { type string; default \"Uncknown\"; mandatory false; description \"Interface name\"; } } } Sample instance data: TBD Template Content <doc> TTP Template to parse Cisco IOS \"show ip arp output\". This template produces list of dictionaries results where each dictionary item compatible to this model: ''' module arp-table { yang-version 1.1; namespace \"ttp://platform/cisco_ios_show_ip_arp\"; list entry { config false; key \"ip\"; leaf protocol { type string; } leaf ip { type string; mandatory true; description \"IP address\"; } leaf age { type uint32; description \"IP address\"; } leaf mac { type string; mandatory \"true\"; description \"MAC address\"; } leaf type { type string; } leaf interface { type string; default \"Uncknown\"; mandatory false; description \"Interface name\"; } } } ''' Sample instance data: ''' TBD ''' </doc> <group method=\"table\" to_int=\"age\"> {{ protocol }} {{ ip | IP }} {{ age | replace(\"-\", \"-1\") }} {{ mac | mac_eui }} {{ type | let(\"interface\", \"Uncknown\") }} {{ protocol }} {{ ip | IP }} {{ age | replace(\"-\", \"-1\") }} {{ mac | mac_eui }} {{ type }} {{ interface | resuball(\"short_interface_names\") }} </group>","title":"cisco_ios_show_ip_arp"},{"location":"ttp_templates/platform.cisco_ios_show_ip_ospf_database_external/","text":"Reference path: ttp://platform/cisco_ios_show_ip_ospf_database_external.txt This template initially designed for use with N2G library to produce network diagrams based on OSPF link state database of Cisco IOS devices. This template parses external-lsa only out of output produced by \"show ip ospf database external\" command. Caveats: need ttp>=0.7.0 , ttp==0.6.0 will not work due to bugs in it Produces this structure for each input datum/device output: [ [ { \"ospf_processes\": { \"1\": { \"external_lsa\": [ { \"mask\": \"32\", \"metric\": \"20\", \"metric_type\": \"2\", \"originator_rid\": \"10.0.0.10\", \"subnet\": \"10.0.0.100\", \"tag\": \"0\", } ], \"local_rid\": \"10.0.0.4\", } } } ] ] Template Content <doc> This template initially designed for use with N2G library to produce network diagrams based on OSPF link state database of Cisco IOS devices. This template parses external-lsa only out of output produced by \"show ip ospf database external\" command. Caveats: - need 'ttp>=0.7.0', 'ttp==0.6.0' will not work due to bugs in it Produces this structure for each input datum/device output: ''' [ [ { \"ospf_processes\": { \"1\": { \"external_lsa\": [ { \"mask\": \"32\", \"metric\": \"20\", \"metric_type\": \"2\", \"originator_rid\": \"10.0.0.10\", \"subnet\": \"10.0.0.100\", \"tag\": \"0\", } ], \"local_rid\": \"10.0.0.4\", } } } ] ] ''' </doc> <group name=\"ospf_processes.{{ pid }}**\"> OSPF Router with ID ({{ local_rid }}) (Process ID {{ pid }}) <group name=\"external_lsa*\" void=\"\"> Type-5 AS External Link States {{ _start_ }} <group> LS Type: AS External Link {{ _start_ }} Link State ID: {{ subnet }} (External Network Number ) Advertising Router: {{ originator_rid }} Network Mask: /{{ mask }} Metric Type: {{ metric_type }} (Larger than any link state path) Metric: {{ metric }} External Route Tag: {{ tag }} {{ _end_ }} </group> </group> </group>","title":"cisco_ios_show_ip_ospf_database_external"},{"location":"ttp_templates/platform.cisco_ios_show_ip_ospf_database_router/","text":"Reference path: ttp://platform/cisco_ios_show_ip_ospf_database_router.txt This template initially designed for use with N2G library to produce network diagrams based on OSPF link state database of Cisco IOS devices. This template parses router-lsa only out of output produced by \"show ip ospf database router\" command. Caveats: need ttp>=0.7.0 , ttp==0.6.0 will not work due to bugs in it Produces this structure for each input datum/device output: [ [ { \"ospf_processes\": { \"1\": { \"local_rid\": \"10.0.0.4\", \"router_lsa\": [ { \"area\": \"0\", \"asbr\": False, \"bma_peers\": [ { \"link_data\": \"10.1.117.4\", \"link_id\": \"10.1.117.7\", \"metric\": \"10\", } ], \"connected_stub\": [ { \"link_data\": \"255.255.255.128\", \"link_id\": \"10.1.14.0\", \"metric\": \"10\", } ], \"originator_rid\": \"10.0.0.4\", \"ptp_peers\": [ { \"link_data\": \"10.1.14.4\", \"link_id\": \"10.0.0.10\", \"metric\": \"10\", } ], } ], } } } ] ] Template Content <doc> This template initially designed for use with N2G library to produce network diagrams based on OSPF link state database of Cisco IOS devices. This template parses router-lsa only out of output produced by \"show ip ospf database router\" command. Caveats: - need 'ttp>=0.7.0', 'ttp==0.6.0' will not work due to bugs in it Produces this structure for each input datum/device output: ''' [ [ { \"ospf_processes\": { \"1\": { \"local_rid\": \"10.0.0.4\", \"router_lsa\": [ { \"area\": \"0\", \"asbr\": False, \"bma_peers\": [ { \"link_data\": \"10.1.117.4\", \"link_id\": \"10.1.117.7\", \"metric\": \"10\", } ], \"connected_stub\": [ { \"link_data\": \"255.255.255.128\", \"link_id\": \"10.1.14.0\", \"metric\": \"10\", } ], \"originator_rid\": \"10.0.0.4\", \"ptp_peers\": [ { \"link_data\": \"10.1.14.4\", \"link_id\": \"10.0.0.10\", \"metric\": \"10\", } ], } ], } } } ] ] ''' </doc> <group name=\"ospf_processes.{{ pid }}**\"> OSPF Router with ID ({{ local_rid }}) (Process ID {{ pid }}) <group name=\"router_lsa*\" functions=\"record('area') | del('area') | void\"> Router Link States (Area {{ area }}) <group set=\"area\"> LS Type: Router Links {{ _start_ }} Advertising Router: {{ originator_rid }} AS Boundary Router {{ asbr | set(True) | default(False) }} <group name=\"ptp_peers*\"> Link connected to: another Router (point-to-point) {{ _start_ }} (Link ID) Neighboring Router ID: {{ link_id }} (Link Data) Router Interface address: {{ link_data }} TOS 0 Metrics: {{ metric }} {{ _end_ }} </group> <group name=\"connected_stub*\"> Link connected to: a Stub Network {{ _start_ }} (Link ID) Network/subnet number: {{ link_id }} (Link Data) Network Mask: {{ link_data }} TOS 0 Metrics: {{ metric }} {{ _end_ }} </group> <group name=\"bma_peers*\"> Link connected to: a Transit Network {{ _start_ }} (Link ID) Designated Router address: {{ link_id }} (Link Data) Router Interface address: {{ link_data }} TOS 0 Metrics: {{ metric }} {{ _end_ }} </group> </group> </group> </group>","title":"cisco_ios_show_ip_ospf_database_router"},{"location":"ttp_templates/platform.cisco_ios_show_ip_ospf_database_summary/","text":"Reference path: ttp://platform/cisco_ios_show_ip_ospf_database_summary.txt This template initially designed for use with N2G library to produce network diagrams based on OSPF link state database of Cisco IOS devices. This template parses summary-lsa only out of output produced by \"show ip ospf database summary\" command. Caveats: need ttp>=0.7.0 , ttp==0.6.0 will not work due to bugs in it Produces this structure for each input datum/device output: [ [ { \"ospf_processes\": { \"1\": { \"local_rid\": \"10.0.0.4\", \"summary_lsa\": [ { \"area\": \"0\", \"mask\": \"31\", \"metric\": \"10\", \"originator_rid\": \"10.0.0.4\", \"subnet\": \"10.1.45.2\", } ], } } } ] ] Template Content <doc> This template initially designed for use with N2G library to produce network diagrams based on OSPF link state database of Cisco IOS devices. This template parses summary-lsa only out of output produced by \"show ip ospf database summary\" command. Caveats: - need 'ttp>=0.7.0', 'ttp==0.6.0' will not work due to bugs in it Produces this structure for each input datum/device output: ''' [ [ { \"ospf_processes\": { \"1\": { \"local_rid\": \"10.0.0.4\", \"summary_lsa\": [ { \"area\": \"0\", \"mask\": \"31\", \"metric\": \"10\", \"originator_rid\": \"10.0.0.4\", \"subnet\": \"10.1.45.2\", } ], } } } ] ] ''' </doc> <group name=\"ospf_processes.{{ pid }}**\"> OSPF Router with ID ({{ local_rid }}) (Process ID {{ pid }}) <group name=\"summary_lsa*\" functions=\"record('area') | del('area') | void\"> Summary Net Link States (Area {{ area }}) <group set=\"area\"> LS Type: Summary Links(Network) {{ _start_ }} Link State ID: {{ subnet }} (summary Network Number) Advertising Router: {{ originator_rid }} Network Mask: /{{ mask }} MTID: 0 Metric: {{ metric }} {{ _end_ }} </group> </group> </group>","title":"cisco_ios_show_ip_ospf_database_summary"},{"location":"ttp_templates/platform.cisco_ios_show_running_config_pipe_include_source_static/","text":"Reference path: ttp://platform/cisco_ios_show_running_config_pipe_include_source_static.txt GitHub Issue: https://github.com/dmulyalin/ttp_templates/issues/1 Author: Denis Mulyalin in cooperation with abhi1693 Template to parse Cisco IOS show run | include source static command output. Template's YANG model (not tested): module nat { yang-version 1.1; namespace \"ttp://platform/cisco_ios_show_running_config_pipe_include_source_static.txt\"; prefix nat; revision \"2022-May-04\" { description \"Initial Revision\"; } description \"Template to parse Cisco IOS static NAT configuration\"; list static { key inside_ip; leaf inside_ip { type string; } leaf location { type string; } leaf global_ip { type string; } leaf interface { type string; } leaf inside_port { type uint32; } leaf global_port { type uint32; } leaf vrf { type string; } } } Sample data: ip nat inside source static 10.10.10.10 3.3.3.3 extendable ip nat inside source static tcp 192.168.1.10 443 3.3.4.4 443 vrf VRF1000 extendable ip nat inside source static 192.168.2.10 3.3.4.5 vrf VRF1002 extendable ip nat inside source static tcp 192.168.3.10 3389 3.3.5.6 13389 extendable ip nat inside source static 20.20.20.20 6.6.6.6 extendable ip nat inside source static tcp 30.30.30.30 443 interface TenGigabitEthernet0/0/0 1443 Expected output: [ { \"nat\": { \"static\": [ { \"global_ip\": \"3.3.3.3\", \"inside_ip\": \"10.10.10.10\", \"location\": \"inside\" }, { \"global_ip\": \"3.3.4.4\", \"global_port\": 443, \"inside_ip\": \"192.168.1.10\", \"inside_port\": 443, \"location\": \"inside\", \"protocol\": \"tcp\", \"vrf\": \"VRF1000\" }, { \"global_ip\": \"3.3.4.5\", \"inside_ip\": \"192.168.2.10\", \"location\": \"inside\", \"vrf\": \"VRF1002\" }, { \"global_ip\": \"3.3.5.6\", \"global_port\": 13389, \"inside_ip\": \"192.168.3.10\", \"inside_port\": 3389, \"location\": \"inside\", \"protocol\": \"tcp\" }, { \"global_ip\": \"6.6.6.6\", \"inside_ip\": \"20.20.20.20\", \"location\": \"inside\" }, { \"global_port\": 1443, \"inside_ip\": \"30.30.30.30\", \"inside_port\": 443, \"interface\": \"TenGigabitEthernet0/0/0\", \"location\": \"inside\", \"protocol\": \"tcp\" } ] } } ] Template Content <doc> GitHub Issue: https://github.com/dmulyalin/ttp_templates/issues/1 Author: Denis Mulyalin in cooperation with abhi1693 Template to parse Cisco IOS 'show run | include source static' command output. Template's YANG model (not tested): ''' module nat { yang-version 1.1; namespace \"ttp://platform/cisco_ios_show_running_config_pipe_include_source_static.txt\"; prefix nat; revision \"2022-May-04\" { description \"Initial Revision\"; } description \"Template to parse Cisco IOS static NAT configuration\"; list static { key inside_ip; leaf inside_ip { type string; } leaf location { type string; } leaf global_ip { type string; } leaf interface { type string; } leaf inside_port { type uint32; } leaf global_port { type uint32; } leaf vrf { type string; } } } ''' Sample data: ''' ip nat inside source static 10.10.10.10 3.3.3.3 extendable ip nat inside source static tcp 192.168.1.10 443 3.3.4.4 443 vrf VRF1000 extendable ip nat inside source static 192.168.2.10 3.3.4.5 vrf VRF1002 extendable ip nat inside source static tcp 192.168.3.10 3389 3.3.5.6 13389 extendable ip nat inside source static 20.20.20.20 6.6.6.6 extendable ip nat inside source static tcp 30.30.30.30 443 interface TenGigabitEthernet0/0/0 1443 ''' Expected output: ''' [ { \"nat\": { \"static\": [ { \"global_ip\": \"3.3.3.3\", \"inside_ip\": \"10.10.10.10\", \"location\": \"inside\" }, { \"global_ip\": \"3.3.4.4\", \"global_port\": 443, \"inside_ip\": \"192.168.1.10\", \"inside_port\": 443, \"location\": \"inside\", \"protocol\": \"tcp\", \"vrf\": \"VRF1000\" }, { \"global_ip\": \"3.3.4.5\", \"inside_ip\": \"192.168.2.10\", \"location\": \"inside\", \"vrf\": \"VRF1002\" }, { \"global_ip\": \"3.3.5.6\", \"global_port\": 13389, \"inside_ip\": \"192.168.3.10\", \"inside_port\": 3389, \"location\": \"inside\", \"protocol\": \"tcp\" }, { \"global_ip\": \"6.6.6.6\", \"inside_ip\": \"20.20.20.20\", \"location\": \"inside\" }, { \"global_port\": 1443, \"inside_ip\": \"30.30.30.30\", \"inside_port\": 443, \"interface\": \"TenGigabitEthernet0/0/0\", \"location\": \"inside\", \"protocol\": \"tcp\" } ] } } ] ''' </doc> <group name=\"nat**.static*\" method=\"table\"> ip nat {{ location }} source static {{ inside_ip | IP }} {{ global_ip | IP }} extendable ip nat {{ location }} source static {{ inside_ip | IP }} interface {{ interface }} ip nat {{ location }} source static {{ inside_ip | IP }} {{ global_ip | IP }} vrf {{ vrf }} extendable ip nat {{ location }} source static {{ protocol }} {{ inside_ip | IP }} {{ inside_port | DIGIT | to_int }} interface {{ interface }} {{ global_port | DIGIT | to_int }} ip nat {{ location }} source static {{ protocol }} {{ inside_ip | IP }} {{ inside_port | DIGIT | to_int }} {{ global_ip | IP }} {{ global_port | DIGIT | to_int }} extendable ip nat {{ location }} source static {{ protocol }} {{ inside_ip | IP }} {{ inside_port | DIGIT | to_int }} {{ global_ip | IP }} {{ global_port | DIGIT | to_int }} vrf {{ vrf }} extendable </group>","title":"cisco_ios_show_running_config_pipe_include_source_static"},{"location":"ttp_templates/platform.cisco_ios_show_running_config_pipe_section_interface/","text":"Reference path: ttp://platform/cisco_ios_show_running_config_pipe_section_interface.txt Template to produce list of dictionaries with interface configuration details using Cisco IOSXE \"show running-config | section interface\" command output. The exact command is \"show running-config\" and not \"show running-configuration\", as it is changed in later versions of IOSXE. Template Content <doc> Template to produce list of dictionaries with interface configuration details using Cisco IOSXE \"show running-config | section interface\" command output. The exact command is \"show running-config\" and not \"show running-configuration\", as it is changed in later versions of IOSXE. </doc> <group> interface {{ interface }} description {{ description | re(\".*\") }} ip address {{ ipv4 }} {{ mask_v4 }} ipv6 address {{ ipv6 }}/{{ mask_v6 }} shutdown {{ disabled | set(True) }} mtu {{ mtu }} encapsulation dot1Q {{ dot1q }} encapsulation dot1q {{ dot1q }} vrf forwarding {{ vrf }} ip vrf forwarding {{ vrf }} service-policy input {{ qos_policy_in }} service-policy output {{ qos_policy_out }} ip access-group {{ acl_in }} in ip access-group {{ acl_out }} out ! {{ _end_ }} </group>","title":"cisco_ios_show_running_config_pipe_section_interface"},{"location":"ttp_templates/platform.cisco_ios_show_running_configuration_pipe_section_bgp/","text":"Reference path: ttp://platform/cisco_ios_show_running_configuration_pipe_section_bgp.txt Template to parse Cisco IOS BGP configuration. Requirements: TTP >= 0.7.x Structure produced by this template does not follow any known convention or schema for example openconfig-bgp, but rather was the easiest one to produce using TTP built-in features without overwhelming template with post-processing python code. Resulted structure follows Cisco native configuration style and capable of parsing subsets of: BGP global configuration BGP global neighbors and peer-groups definition AFI configuration including neighbors and networks VRF configuration including neighbors, networks and other parameters Sample device output: router bgp 65001 ! bgp router-id 10.5.1.1 bgp log-neighbor-changes neighbor 2001:db8::1 remote-as 65003 neighbor 2001:db8::1 description Peer1-Global neighbor 10.11.0.81 remote-as 65002 neighbor 10.11.0.81 description Peer2-Global neighbor 10.11.0.81 shutdown neighbor RR-CLIENTS peer-group neighbor RR-CLIENTS remote-as 65001 neighbor RR-CLIENTS description [ibgp - rr clients] neighbor RR-CLIENTS update-source GigabitEthernet1 neighbor 10.0.0.3 peer-group RR-CLIENTS neighbor 10.0.0.5 peer-group RR-CLIENTS ! address-family ipv4 network 10.255.10.0 mask 255.255.248.0 network 10.255.10.0 mask 255.255.255.0 redistribute connected route-map PORTABLE-v4 neighbor 10.11.0.81 activate neighbor 10.11.0.81 description Peer2-IPv4 neighbor RR-CLIENTS route-reflector-client neighbor RR-CLIENTS route-map PASS-IN in neighbor RR-CLIENTS route-map PASS-OUT out neighbor RR-CLIENTS maximum-prefix 1000 80 restart 15 neighbor 10.0.0.3 activate neighbor 10.0.0.5 activate exit-address-family ! address-family ipv6 redistribute connected network 2001:db8::/48 neighbor 2001:db8::1 activate neighbor 2001:db8::1 description Peer1-IPv6 exit-address-family ! address-family ipv4 multicast exit-address-family ! address-family vpnv4 unicast neighbor 3.3.3.3 activate exit-address-family ! address-family ipv4 vrf VoIP network 10.255.10.0 mask 255.255.248.0 bgp router-id 10.2.1.193 redistribute connected route-map tospokes neighbor 10.2.1.65 remote-as 65001 neighbor 10.2.1.65 description voip peer 1 neighbor 10.2.1.65 activate neighbor 10.2.1.78 remote-as 65001 neighbor 10.2.1.78 description voip peer 2 neighbor 10.2.1.78 shutdown neighbor 10.2.1.78 activate neighbor 10.2.1.78 next-hop-self neighbor 10.2.1.78 prefix-list VoIP-prefixes out exit-address-family ! address-family ipv4 vrf CUST-2 bgp router-id 1.1.1.1 redistribute connected neighbor 2.2.2.2 remote-as 65002 neighbor 2.2.2.2 description peer 12 neighbor 2.2.2.2 activate exit-address-family ! After parsing above output, TTP should produce these results: [[{'bgp': {'afis': {'ipv4_multicast': {}, 'ipv4_unicast': {'config': {'networks': [{'mask': '255.255.248.0', 'network': '10.255.10.0'}, {'mask': '255.255.255.0', 'network': '10.255.10.0'}], 'redistribute_connected': True, 'redistribute_connected_rpl': 'PORTABLE-v4'}, 'neighbors': {'10.0.0.3': {'activate': True}, '10.0.0.5': {'activate': True}, '10.11.0.81': {'activate': True}, 'RR-CLIENTS': {'max_prefix_action': 'restart', 'max_prefix_limit': '1000', 'max_prefix_restart_interval': '15', 'max_prefix_threshold': '80', 'rpl_out': 'PASS-OUT', 'rr_client': True}}}, 'ipv6_unicast': {'config': {'networks': [{'mask': '48', 'network': '2001:db8::'}], 'redistribute_connected': True}, 'neighbors': {'2001:db8::1': {'activate': True}}}, 'vpnv4_unicast': {'neighbors': {'3.3.3.3': {'activate': True}}}}, 'asn': '65001', 'config': {'bgp_rid': '10.5.1.1', 'log_neighbor_changes': True}, 'neighbors': {'10.0.0.3': {'peer_group': 'RR-CLIENTS'}, '10.0.0.5': {'peer_group': 'RR-CLIENTS'}, '10.11.0.81': {'asn': '65002', 'description': 'Peer2-Global', 'disabled': True}, '2001:db8::1': {'asn': '65003', 'description': 'Peer1-Global'}, 'RR-CLIENTS': {'asn': '65001', 'description': '[ibgp - rr clients]', 'is_peer_group': True, 'update_source': 'GigabitEthernet1'}}, 'vrfs': {'CUST-2': {'afi': 'ipv4', 'config': {'bgp_rid': '1.1.1.1', 'redistribute_connected': True}, 'neighbors': {'2.2.2.2': {'activate': True, 'asn': '65002', 'description': 'peer 12'}}}, 'VoIP': {'afi': 'ipv4', 'config': {'bgp_rid': '10.2.1.193', 'networks': [{'mask': '255.255.248.0', 'network': '10.255.10.0'}], 'redistribute_connected': True, 'redistribute_connected_rpl': 'tospokes'}, 'neighbors': {'10.2.1.65': {'activate': True, 'asn': '65001', 'description': 'voip peer 1'}, '10.2.1.78': {'activate': True, 'asn': '65001', 'description': 'voip peer 2', 'disabled': True, 'next_hop_self': True, 'pfl_out': 'VoIP-prefixes'}}}}}}]] To use this template with Netmiko (>=3.4.x) run_ttp method: import pprint from netmiko import ConnectHandler net_connect = ConnectHandler( device_type=\"cisco_ios\", host=\"1.2.3.4\", username=\"admin\", password=\"admin\", ) res = net_connect.run_ttp(\"ttp://misc/netmiko/cisco.ios.cfg.bgp.txt\") pprint.pprint(res) Template Content <doc> Template to parse Cisco IOS BGP configuration. Requirements: 'TTP >= 0.7.x' Structure produced by this template does not follow any known convention or schema for example openconfig-bgp, but rather was the easiest one to produce using TTP built-in features without overwhelming template with post-processing python code. Resulted structure follows Cisco native configuration style and capable of parsing subsets of: - BGP global configuration - BGP global neighbors and peer-groups definition - AFI configuration including neighbors and networks - VRF configuration including neighbors, networks and other parameters Sample device output: ''' router bgp 65001 ! bgp router-id 10.5.1.1 bgp log-neighbor-changes neighbor 2001:db8::1 remote-as 65003 neighbor 2001:db8::1 description Peer1-Global neighbor 10.11.0.81 remote-as 65002 neighbor 10.11.0.81 description Peer2-Global neighbor 10.11.0.81 shutdown neighbor RR-CLIENTS peer-group neighbor RR-CLIENTS remote-as 65001 neighbor RR-CLIENTS description [ibgp - rr clients] neighbor RR-CLIENTS update-source GigabitEthernet1 neighbor 10.0.0.3 peer-group RR-CLIENTS neighbor 10.0.0.5 peer-group RR-CLIENTS ! address-family ipv4 network 10.255.10.0 mask 255.255.248.0 network 10.255.10.0 mask 255.255.255.0 redistribute connected route-map PORTABLE-v4 neighbor 10.11.0.81 activate neighbor 10.11.0.81 description Peer2-IPv4 neighbor RR-CLIENTS route-reflector-client neighbor RR-CLIENTS route-map PASS-IN in neighbor RR-CLIENTS route-map PASS-OUT out neighbor RR-CLIENTS maximum-prefix 1000 80 restart 15 neighbor 10.0.0.3 activate neighbor 10.0.0.5 activate exit-address-family ! address-family ipv6 redistribute connected network 2001:db8::/48 neighbor 2001:db8::1 activate neighbor 2001:db8::1 description Peer1-IPv6 exit-address-family ! address-family ipv4 multicast exit-address-family ! address-family vpnv4 unicast neighbor 3.3.3.3 activate exit-address-family ! address-family ipv4 vrf VoIP network 10.255.10.0 mask 255.255.248.0 bgp router-id 10.2.1.193 redistribute connected route-map tospokes neighbor 10.2.1.65 remote-as 65001 neighbor 10.2.1.65 description voip peer 1 neighbor 10.2.1.65 activate neighbor 10.2.1.78 remote-as 65001 neighbor 10.2.1.78 description voip peer 2 neighbor 10.2.1.78 shutdown neighbor 10.2.1.78 activate neighbor 10.2.1.78 next-hop-self neighbor 10.2.1.78 prefix-list VoIP-prefixes out exit-address-family ! address-family ipv4 vrf CUST-2 bgp router-id 1.1.1.1 redistribute connected neighbor 2.2.2.2 remote-as 65002 neighbor 2.2.2.2 description peer 12 neighbor 2.2.2.2 activate exit-address-family ! ''' After parsing above output, TTP should produce these results: ''' [[{'bgp': {'afis': {'ipv4_multicast': {}, 'ipv4_unicast': {'config': {'networks': [{'mask': '255.255.248.0', 'network': '10.255.10.0'}, {'mask': '255.255.255.0', 'network': '10.255.10.0'}], 'redistribute_connected': True, 'redistribute_connected_rpl': 'PORTABLE-v4'}, 'neighbors': {'10.0.0.3': {'activate': True}, '10.0.0.5': {'activate': True}, '10.11.0.81': {'activate': True}, 'RR-CLIENTS': {'max_prefix_action': 'restart', 'max_prefix_limit': '1000', 'max_prefix_restart_interval': '15', 'max_prefix_threshold': '80', 'rpl_out': 'PASS-OUT', 'rr_client': True}}}, 'ipv6_unicast': {'config': {'networks': [{'mask': '48', 'network': '2001:db8::'}], 'redistribute_connected': True}, 'neighbors': {'2001:db8::1': {'activate': True}}}, 'vpnv4_unicast': {'neighbors': {'3.3.3.3': {'activate': True}}}}, 'asn': '65001', 'config': {'bgp_rid': '10.5.1.1', 'log_neighbor_changes': True}, 'neighbors': {'10.0.0.3': {'peer_group': 'RR-CLIENTS'}, '10.0.0.5': {'peer_group': 'RR-CLIENTS'}, '10.11.0.81': {'asn': '65002', 'description': 'Peer2-Global', 'disabled': True}, '2001:db8::1': {'asn': '65003', 'description': 'Peer1-Global'}, 'RR-CLIENTS': {'asn': '65001', 'description': '[ibgp - rr clients]', 'is_peer_group': True, 'update_source': 'GigabitEthernet1'}}, 'vrfs': {'CUST-2': {'afi': 'ipv4', 'config': {'bgp_rid': '1.1.1.1', 'redistribute_connected': True}, 'neighbors': {'2.2.2.2': {'activate': True, 'asn': '65002', 'description': 'peer 12'}}}, 'VoIP': {'afi': 'ipv4', 'config': {'bgp_rid': '10.2.1.193', 'networks': [{'mask': '255.255.248.0', 'network': '10.255.10.0'}], 'redistribute_connected': True, 'redistribute_connected_rpl': 'tospokes'}, 'neighbors': {'10.2.1.65': {'activate': True, 'asn': '65001', 'description': 'voip peer 1'}, '10.2.1.78': {'activate': True, 'asn': '65001', 'description': 'voip peer 2', 'disabled': True, 'next_hop_self': True, 'pfl_out': 'VoIP-prefixes'}}}}}}]] ''' To use this template with Netmiko (>=3.4.x) run_ttp method: ''' import pprint from netmiko import ConnectHandler net_connect = ConnectHandler( device_type=\"cisco_ios\", host=\"1.2.3.4\", username=\"admin\", password=\"admin\", ) res = net_connect.run_ttp(\"ttp://misc/netmiko/cisco.ios.cfg.bgp.txt\") pprint.pprint(res) ''' </doc> <vars> bgp_default = { \"asn\": \"\", \"config\": {}, \"afis\": {}, \"neighbors\": {}, \"vrfs\": {} } </vars> <group name=\"bgp\" default=\"bgp_default\"> router bgp {{ asn }} <group name=\"config**\" method=\"table\"> bgp router-id {{ bgp_rid }} bgp log-neighbor-changes {{ log_neighbor_changes | set(True) }} </group> <group name=\"neighbors**.{{ neighbor }}**\" method=\"table\"> neighbor {{ neighbor | let(\"is_peer_group\", True) }} peer-group neighbor {{ neighbor }} remote-as {{ asn }} neighbor {{ neighbor }} description {{ description | re(\".+\") }} neighbor {{ neighbor }} update-source {{ update_source }} neighbor {{ neighbor }} peer-group {{ peer_group }} neighbor {{ neighbor | let(\"disabled\", True) }} shutdown </group> <group name=\"afis**.{{ afi }}_{{ safi }}\"> address-family {{ afi }} address-family {{ afi }} {{ safi | default(unicast) | _start_ }} <group name=\"config**.networks*\" method=\"table\"> network {{ network | IP }} mask {{ mask }} network {{ network | IPV6 }}/{{ mask }} </group> <group name=\"config**\" method=\"table\"> redistribute connected route-map {{ redistribute_connected_rpl | let(\"redistribute_connected\", True) }} redistribute connected {{ redistribute_connected | set(True) }} </group> <group name=\"neighbors**.{{ neighbor }}**\" method=\"table\"> neighbor {{ neighbor | let(\"activate\", True) }} activate neighbor {{ neighbor | let(\"next_hop_self\", True) }} next-hop-self neighbor {{ neighbor | let(\"rr_client\", True) }} route-reflector-client neighbor {{ neighbor }} prefix-list {{ pfl_out }} out neighbor {{ neighbor }} prefix-list {{ pfl_in }} in neighbor {{ neighbor }} route-map {[ rpl_in }} in neighbor {{ neighbor }} route-map {{ rpl_out }} out neighbor {{ neighbor }} maximum-prefix {{ max_prefix_limit | let(\"max_prefix_action\", \"restart\") }} {{ max_prefix_threshold }} restart {{ max_prefix_restart_interval }} </group> exit-address-family {{ _end_ }} </group> <group name=\"vrfs**.{{ vrf }}\"> address-family {{ afi }} vrf {{ vrf }} <group name=\"config**.networks*\" method=\"table\"> network {{ network | IP }} mask {{ mask }} network {{ network | IPV6 }}/{{ mask }} </group> <group name=\"config**\" method=\"table\"> bgp router-id {{ bgp_rid }} redistribute connected route-map {{ redistribute_connected_rpl | let(\"redistribute_connected\", True) }} redistribute connected {{ redistribute_connected | set(True) }} </group> <group name=\"neighbors**.{{ neighbor }}**\" method=\"table\"> neighbor {{ neighbor }} remote-as {{ asn }} neighbor {{ neighbor }} description {{ description | re(\".+\") }} neighbor {{ neighbor | let(\"activate\", True) }} activate neighbor {{ neighbor | let(\"disabled\", True) }} shutdown neighbor {{ neighbor | let(\"next_hop_self\", True) }} next-hop-self neighbor {{ neighbor | let(\"rr_client\", True) }} route-reflector-client neighbor {{ neighbor }} prefix-list {{ pfl_out }} out neighbor {{ neighbor }} prefix-list {{ pfl_in }} in neighbor {{ neighbor }} route-map {[ rpl_in }} in neighbor {{ neighbor }} route-map {{ rpl_out }} out neighbor {{ neighbor }} maximum-prefix {{ max_prefix_limit | let(\"max_prefix_action\", \"restart\") }} {{ max_prefix_threshold }} restart {{ max_prefix_restart_interval }} </group> exit-address-family {{ _end_ }} </group> </group>","title":"cisco_ios_show_running_configuration_pipe_section_bgp"},{"location":"ttp_templates/platform.cisco_xr_show_arp_vrf_all/","text":"Reference path: ttp://platform/cisco_xr_show_arp_vrf_all.txt TTP template to parse Cisco IOS XR \"show arp vrf all\" output. Template Content <doc> TTP template to parse Cisco IOS XR \"show arp vrf all\" output. </doc> <group method=\"table\" to_int=\"age\"> {{ ip | IP }} {{ age | replace(\"-\", \"-1\") }} {{ mac | mac_eui }} {{ state | lower }} {{ type }} {{ interface | resuball(\"short_interface_names\") }} </group>","title":"cisco_xr_show_arp_vrf_all"},{"location":"ttp_templates/platform.cisco_xr_show_isis_database_verbose/","text":"Reference path: ttp://platform/cisco_xr_show_isis_database_verbose.txt Template to parse ISIS LSDB of Cisco IOS-XR devices out of \"show isis database verbose\" command output. This template produces this structure: [[{'isis_processes': {'100': {'R1-X1': [{'isis_area': '49.0001', 'level': 'Level-2', 'links': [{'affinity': '0x00000000', 'bw_kbit': '10000000', 'isis_pid': '100', 'local_intf_id': '9', 'local_ip': '10.123.0.17', 'metric': '16777214', 'peer_intf_id': '50', 'peer_ip': '10.123.0.18', 'peer_name': 'R1-X2'}, {'affinity': '0x00000000', 'bw_kbit': '10000000', 'isis_pid': '100', 'local_intf_id': '7', 'local_ip': '10.123.0.25', 'metric': '123', 'peer_intf_id': '53', 'peer_ip': '10.123.0.26', 'peer_name': 'R2-X1'}], 'networks': [{'isis_pid': '100', 'metric': '0', 'network': '10.111.1.1/32'}], 'rid': '10.111.1.1'}]}}}]] Template Content <doc> Template to parse ISIS LSDB of Cisco IOS-XR devices out of \"show isis database verbose\" command output. This template produces this structure: ''' [[{'isis_processes': {'100': {'R1-X1': [{'isis_area': '49.0001', 'level': 'Level-2', 'links': [{'affinity': '0x00000000', 'bw_kbit': '10000000', 'isis_pid': '100', 'local_intf_id': '9', 'local_ip': '10.123.0.17', 'metric': '16777214', 'peer_intf_id': '50', 'peer_ip': '10.123.0.18', 'peer_name': 'R1-X2'}, {'affinity': '0x00000000', 'bw_kbit': '10000000', 'isis_pid': '100', 'local_intf_id': '7', 'local_ip': '10.123.0.25', 'metric': '123', 'peer_intf_id': '53', 'peer_ip': '10.123.0.26', 'peer_name': 'R2-X1'}], 'networks': [{'isis_pid': '100', 'metric': '0', 'network': '10.111.1.1/32'}], 'rid': '10.111.1.1'}]}}}]] ''' </doc> <group name=\"isis_processes.{{ pid }}**\" functions=\"record('level') | record('pid', 'isis_pid') | del('level')\"> IS-IS {{ pid }} ({{ level }}) Link State Database <group name=\"{{ hostname }}*\" functions=\"set('level')\"> {{ hostname | _start_ }}.00-00{{ ignore(r\"[\\s\\*]\") }} {{ ignore }} {{ ignore }} {{ ignore(r\"[/\\d\\s\\*]+\") }} 0/0/0 {{ hostname | _start_ }}.00-00{{ ignore(r\"[\\s\\*]\") }} * {{ ignore }} {{ ignore }} {{ ignore(r\"[/\\d\\s\\*]+\") }} 0/0/0 Auth: {{ auth }}, Length: 17 Area Address: {{ isis_area }} Router ID: {{ rid }} IPv6 Router ID: {{ rid_v6 }} IPv6 Router ID: {{ rid_v6 }} <group name=\"networks*\" set=\"isis_pid\"> Metric: {{ metric | _start_ }} IP-Extended {{ network }} Metric: {{ metric | _start_ }} MT (IPv6 Unicast) IPv6 {{ network | _exact_ }} Metric: {{ metric | _start_ }} MT (IPv6 Unicast) IPv6-Ext-InAr {{ network | _exact_ }} </group> <group name=\"links*\" set=\"isis_pid\"> Metric: {{ metric | _start_ }} IS-Extended {{ peer_name }}.00 Metric: {{ metric | _start_ }} MT (IPv6 Unicast) IS-Extended {{ peer_name }}.00 Local Interface ID: {{ local_intf_id }}, Remote Interface ID: {{ peer_intf_id }} Interface IP Address: {{ local_ip }} Neighbor IP Address: {{ peer_ip }} Affinity: {{ affinity }} Physical BW: {{ bw_kbit }} kbits/sec Link Average Delay: {{ delay_avg_us }} us Link Min/Max Delay: {{ delay_min_us }}/{{ delay_max_us }} us Link Delay Variation: {{ delay_variation_us }} us <group name=\"srv6_endx_sid*\"> END.X SID: {{ sid | IPV6}} B:0 S:0 P:0 uA (PSP/USD) Alg:{{ algo }} Block Length: {{ block_length }}, Node-ID Length: {{ node_id_length }}, Func-Length: {{ func_length }}, Args-Length: {{ args_length }} </group> </group> <group name=\"srv6_locators*\" set=\"isis_pid\"> SRv6 Locator: MT (IPv6 Unicast) {{ locator | IPV6 }}/{{ mask }} D:0 Metric: 0 Algorithm: {{ algo }} </group> </group> </group>","title":"cisco_xr_show_isis_database_verbose"},{"location":"ttp_templates/platform.cisco_xr_show_ospf_database_external/","text":"Reference path: ttp://platform/cisco_xr_show_ospf_database_external.txt This template initially designed for use with N2G library to produce network diagrams based on OSPF link state database of Cisco IOS-XR devices. This template parses external-lsa only out of output produced by \"show ospf database external\" command. Caveats: need ttp>=0.7.0 , ttp==0.6.0 will not work due to bugs in it Produces this structure for each input datum/device output: [[{'ospf_processes': {'1': {'external_lsa': [{'mask': '0', 'metric': '1', 'metric_type': '2', 'originator_rid': '10.3.22.190', 'subnet': '0.0.0.0', 'tag': '10'}, {'mask': '0', 'metric': '1', 'metric_type': '2', 'originator_rid': '10.3.25.22', 'subnet': '0.0.0.0', 'tag': '10'}, {'mask': '8', 'metric': '20', 'metric_type': '2', 'originator_rid': '10.3.20.95', 'subnet': '10.0.0.0', 'tag': '0'}], 'local_rid': '10.1.2.2'}}, 'vars': {'hostname': 'router-1'}}]] Template Content <doc> This template initially designed for use with N2G library to produce network diagrams based on OSPF link state database of Cisco IOS-XR devices. This template parses external-lsa only out of output produced by \"show ospf database external\" command. Caveats: - need 'ttp>=0.7.0', 'ttp==0.6.0' will not work due to bugs in it Produces this structure for each input datum/device output: ''' [[{'ospf_processes': {'1': {'external_lsa': [{'mask': '0', 'metric': '1', 'metric_type': '2', 'originator_rid': '10.3.22.190', 'subnet': '0.0.0.0', 'tag': '10'}, {'mask': '0', 'metric': '1', 'metric_type': '2', 'originator_rid': '10.3.25.22', 'subnet': '0.0.0.0', 'tag': '10'}, {'mask': '8', 'metric': '20', 'metric_type': '2', 'originator_rid': '10.3.20.95', 'subnet': '10.0.0.0', 'tag': '0'}], 'local_rid': '10.1.2.2'}}, 'vars': {'hostname': 'router-1'}}]] ''' </doc> <group name=\"ospf_processes.{{ pid }}**\"> OSPF Router with ID ({{ local_rid }}) (Process ID {{ pid }}) <group name=\"external_lsa*\" functions=\"void\"> Type-5 AS External Link States {{ _start_ }} <group contains=\"subnet\"> LS Type: AS External Link {{ _start_ }} Link State ID: {{ subnet }} (External Network Number) Advertising Router: {{ originator_rid }} Network Mask: /{{ mask }} Metric Type: {{ metric_type }} {{ ignore(\".+\") }} Metric: {{ metric }} External Route Tag: {{ tag }} {{ _end_ }} </group> </group> </group>","title":"cisco_xr_show_ospf_database_external"},{"location":"ttp_templates/platform.cisco_xr_show_ospf_database_router/","text":"Reference path: ttp://platform/cisco_xr_show_ospf_database_router.txt This template initially designed for use with N2G library to produce network diagrams based on OSPF link state database of Cisco IOS-XR devices. This template parses router-lsa only out of output produced by \"show ospf database router\" command. Caveats: need ttp>=0.7.0 , ttp==0.6.0 will not work due to bugs in it Produces this structure for each input datum/device output: [[{'ospf_processes': {'1': {'local_rid': '10.1.2.2', 'router_lsa': [{'area': '0.0.0.0', 'asbr': True, 'bma_peers': [{'link_data': '10.3.162.14', 'link_id': '10.3.162.13', 'metric': '1'}], 'connected_stub': [{'link_data': '255.255.255.252', 'link_id': '10.0.61.0', 'metric': '9100'}], 'originator_rid': '10.1.0.91', 'ptp_peers': [{'link_data': '10.0.61.1', 'link_id': '10.1.1.251', 'metric': '9100'}]}, {'area': '0.0.0.0', 'asbr': True, 'connected_stub': [{'link_data': '255.255.255.252', 'link_id': '10.0.61.96', 'metric': '9000'}], 'originator_rid': '10.1.0.92', 'ptp_peers': [{'link_data': '0.0.2.5', 'link_id': '10.1.2.6', 'metric': '1100'}]}]}}}, {'ospf_processes': {'1': {'local_rid': '10.1.2.2', 'router_lsa': [{'area': '0.0.0.0', 'asbr': True, 'connected_stub': [{'link_data': '255.255.255.252', 'link_id': '10.0.60.204', 'metric': '9000'}], 'originator_rid': '10.1.0.91', 'ptp_peers': [{'link_data': '10.0.60.206', 'link_id': '10.0.24.6', 'metric': '9000'}]}, {'area': '0.0.0.1', 'asbr': True, 'originator_rid': '10.1.0.91', 'ptp_peers': [{'link_data': '10.0.60.206', 'link_id': '10.0.24.6', 'metric': '9000'}]}]}}}]] Template Content <doc> This template initially designed for use with N2G library to produce network diagrams based on OSPF link state database of Cisco IOS-XR devices. This template parses router-lsa only out of output produced by \"show ospf database router\" command. Caveats: - need 'ttp>=0.7.0', 'ttp==0.6.0' will not work due to bugs in it Produces this structure for each input datum/device output: ''' [[{'ospf_processes': {'1': {'local_rid': '10.1.2.2', 'router_lsa': [{'area': '0.0.0.0', 'asbr': True, 'bma_peers': [{'link_data': '10.3.162.14', 'link_id': '10.3.162.13', 'metric': '1'}], 'connected_stub': [{'link_data': '255.255.255.252', 'link_id': '10.0.61.0', 'metric': '9100'}], 'originator_rid': '10.1.0.91', 'ptp_peers': [{'link_data': '10.0.61.1', 'link_id': '10.1.1.251', 'metric': '9100'}]}, {'area': '0.0.0.0', 'asbr': True, 'connected_stub': [{'link_data': '255.255.255.252', 'link_id': '10.0.61.96', 'metric': '9000'}], 'originator_rid': '10.1.0.92', 'ptp_peers': [{'link_data': '0.0.2.5', 'link_id': '10.1.2.6', 'metric': '1100'}]}]}}}, {'ospf_processes': {'1': {'local_rid': '10.1.2.2', 'router_lsa': [{'area': '0.0.0.0', 'asbr': True, 'connected_stub': [{'link_data': '255.255.255.252', 'link_id': '10.0.60.204', 'metric': '9000'}], 'originator_rid': '10.1.0.91', 'ptp_peers': [{'link_data': '10.0.60.206', 'link_id': '10.0.24.6', 'metric': '9000'}]}, {'area': '0.0.0.1', 'asbr': True, 'originator_rid': '10.1.0.91', 'ptp_peers': [{'link_data': '10.0.60.206', 'link_id': '10.0.24.6', 'metric': '9000'}]}]}}}]] ''' </doc> <group name=\"ospf_processes.{{ pid }}**\"> OSPF Router with ID ({{ local_rid }}) (Process ID {{ pid }}) <group name=\"router_lsa*\" functions=\"record('area') | del('area') | void\"> Router Link States (Area {{ area }}) <group set=\"area\"> LS Type: Router Links {{ _start_ }} Advertising Router: {{ originator_rid }} Area Border Router {{ asbr | set(True) | default(False) }} <group name=\"ptp_peers*\"> Link connected to: another Router (point-to-point) {{ _start_ }} (Link ID) Neighboring Router ID: {{ link_id }} (Link Data) Router Interface address: {{ link_data }} TOS 0 Metrics: {{ metric }} {{ _end_ }} </group> <group name=\"connected_stub*\"> Link connected to: a Stub Network {{ _start_ }} (Link ID) Network/subnet number: {{ link_id }} (Link Data) Network Mask: {{ link_data }} TOS 0 Metrics: {{ metric }} {{ _end_ }} </group> <group name=\"bma_peers*\"> Link connected to: a Transit Network {{ _start_ }} (Link ID) Designated Router address: {{ link_id }} (Link Data) Router Interface address: {{ link_data }} TOS 0 Metrics: {{ metric }} {{ _end_ }} </group> </group> </group> </group>","title":"cisco_xr_show_ospf_database_router"},{"location":"ttp_templates/platform.cisco_xr_show_ospf_database_summary/","text":"Reference path: ttp://platform/cisco_xr_show_ospf_database_summary.txt This template initially designed for use with N2G library to produce network diagrams based on OSPF link state database of Cisco IOS-XR devices. This template parses external-lsa only out of output produced by \"show ospf database external\" command. Caveats: need ttp>=0.7.0 , ttp==0.6.0 will not work due to bugs in it Produces this structure for each input datum/device output: [[{'ospf_processes': {'1': {'local_rid': '10.1.2.2', 'summary_lsa': [{'area': '0.0.0.0', 'mask': '32', 'metric': '2312', 'originator_rid': '10.0.24.1', 'subnet': '10.1.0.1'}, {'area': '0.0.0.0', 'mask': '32', 'metric': '1806', 'originator_rid': '10.0.24.2', 'subnet': '10.1.0.1'}, {'area': '0.0.0.0', 'mask': '32', 'metric': '1312', 'originator_rid': '10.0.25.192', 'subnet': '10.1.0.1'}, {'area': '0.0.0.0', 'mask': '32', 'metric': '806', 'originator_rid': '10.0.25.193', 'subnet': '10.1.0.1'}, {'area': '0.0.0.32', 'mask': '32', 'metric': '2312', 'originator_rid': '10.0.24.1', 'subnet': '10.1.0.1'}]}}, 'vars': {'hostname': 'router-1'}}]] Template Content <doc> This template initially designed for use with N2G library to produce network diagrams based on OSPF link state database of Cisco IOS-XR devices. This template parses external-lsa only out of output produced by \"show ospf database external\" command. Caveats: - need 'ttp>=0.7.0', 'ttp==0.6.0' will not work due to bugs in it Produces this structure for each input datum/device output: ''' [[{'ospf_processes': {'1': {'local_rid': '10.1.2.2', 'summary_lsa': [{'area': '0.0.0.0', 'mask': '32', 'metric': '2312', 'originator_rid': '10.0.24.1', 'subnet': '10.1.0.1'}, {'area': '0.0.0.0', 'mask': '32', 'metric': '1806', 'originator_rid': '10.0.24.2', 'subnet': '10.1.0.1'}, {'area': '0.0.0.0', 'mask': '32', 'metric': '1312', 'originator_rid': '10.0.25.192', 'subnet': '10.1.0.1'}, {'area': '0.0.0.0', 'mask': '32', 'metric': '806', 'originator_rid': '10.0.25.193', 'subnet': '10.1.0.1'}, {'area': '0.0.0.32', 'mask': '32', 'metric': '2312', 'originator_rid': '10.0.24.1', 'subnet': '10.1.0.1'}]}}, 'vars': {'hostname': 'router-1'}}]] ''' </doc> <group name=\"ospf_processes.{{ pid }}**\"> OSPF Router with ID ({{ local_rid }}) (Process ID {{ pid }}) <group name=\"summary_lsa*\" functions=\"record('area') | del('area') | void\"> Summary Net Link States (Area {{ area }}) <group set=\"area\" contains=\"subnet\"> LS Type: Summary Links (Network) {{ _start_ }} Link State ID: {{ subnet }} (Summary Network Number) Advertising Router: {{ originator_rid }} Network Mask: /{{ mask }} TOS: 0 Metric: {{ metric }} {{ _end_ }} </group> </group> </group>","title":"cisco_xr_show_ospf_database_summary"},{"location":"ttp_templates/platform.cisco_xr_show_running_config_interface/","text":"Reference path: ttp://platform/cisco_xr_show_running_config_interface.txt Template to produce list of dictionaries with interface configuration details using Cisco IOS-XR \"show run interface\" command output. Template Content <doc> Template to produce list of dictionaries with interface configuration details using Cisco IOS-XR \"show run interface\" command output. </doc> <group> interface {{ interface | _start_ }} interface {{ interface | _start_ }} l2transport description {{ description | re(\".*\") }} mtu {{ mtu }} service-policy input {{ qos_policy_in }} service-policy output {{ qos_policy_out }} ipv4 address {{ ipv4 }} {{ mask_v4 }} ipv6 address {{ ipv6 }}/{{ mask_v6 }} encapsulation dot1q {{ dot1q }} vrf {{ vrf }} bundle id {{ lag_id }} mode {{ ignore }} shutdown {{ disabled | set(True) }} ! {{ _end_ }} </group>","title":"cisco_xr_show_running_config_interface"},{"location":"ttp_templates/platform.huawei_display_current_configuration_interface/","text":"Reference path: ttp://platform/huawei_display_current_configuration_interface.txt Template to produce list of dictionaries with interface configuration details using Huawei \"display current-configuration interface\" command output. Template Content <doc> Template to produce list of dictionaries with interface configuration details using Huawei \"display current-configuration interface\" command output. </doc> <group> interface {{ interface }} vlan-type dot1q {{ dot1q }} dot1q termination vid {{ dot1q }} mtu {{ mtu }} description {{ description | re(\".*\") }} ip binding vpn-instance {{ vrf }} ip address {{ ipv4 }} {{ mask_v4 }} ipv6 address {{ ipv6 }}/{{ mask_v6 }} shutdown {{ disabled | set(True) }} qos-profile {{ qos_policy_in }} inbound {{ ignore(\"PHRASE\") }} qos-profile {{ qos_policy_out }} outbound {{ ignore(\"PHRASE\") }} # {{ _end_ }} </group>","title":"huawei_display_current_configuration_interface"},{"location":"ttp_templates/platform.huawei_display_ospf_lsdb_router/","text":"Reference path: ttp://platform/huawei_display_ospf_lsdb_router.txt This template initially designed for use with N2G library to produce network diagrams based on OSPF link state database of Huawei devices. This template parses router-lsa only out of output produced by \"display ospf lsdb router\" command. Produces this structure for each input datum/device output: [ [ { \"ospf_processes\": { \"123\": { \"local_rid\": \"123.123.24.158\", \"router_lsa\": [ { \"area\": \"0.0.0.123\", \"connected_stub\": [ { \"link_data\": \"255.255.255.252\", \"link_id\": \"123.123.60.108\", \"metric\": \"1\", } ], \"originator_rid\": \"10.123.0.92\", \"ptp_peers\": [ { \"link_data\": \"123.123.60.109\", \"link_id\": \"123.123.24.31\", \"metric\": \"1\", }, { \"link_data\": \"123.123.60.201\", \"link_id\": \"123.123.24.5\", \"metric\": \"9000\", }, ], }, ], } } } ] ] Template Content <doc> This template initially designed for use with N2G library to produce network diagrams based on OSPF link state database of Huawei devices. This template parses router-lsa only out of output produced by \"display ospf lsdb router\" command. Produces this structure for each input datum/device output: ''' [ [ { \"ospf_processes\": { \"123\": { \"local_rid\": \"123.123.24.158\", \"router_lsa\": [ { \"area\": \"0.0.0.123\", \"connected_stub\": [ { \"link_data\": \"255.255.255.252\", \"link_id\": \"123.123.60.108\", \"metric\": \"1\", } ], \"originator_rid\": \"10.123.0.92\", \"ptp_peers\": [ { \"link_data\": \"123.123.60.109\", \"link_id\": \"123.123.24.31\", \"metric\": \"1\", }, { \"link_data\": \"123.123.60.201\", \"link_id\": \"123.123.24.5\", \"metric\": \"9000\", }, ], }, ], } } } ] ] ''' </doc> <group name=\"ospf_processes.{{ pid }}**\"> {{ ignore(\" +\") }} OSPF Process {{ pid }} with Router ID {{ local_rid }} <group name=\"router_lsa*\" functions=\"record('area') | del('area') | void\"> {{ ignore(\" +\") }} Area: {{ area }} <group set=\"area\"> Type : Router {{ _start_ }} Adv rtr : {{ originator_rid }} <group name=\"{{ link_type }}*\" contains=\"link_type\"> * Link ID: {{ link_id | _start_ }} Link ID: {{ link_id | _start_ }} Data : {{ link_data }} Link Type: StubNet {{ link_type | set(connected_stub) }} Link Type: P-2-P {{ link_type | set(ptp_peers) }} Link Type: TransNet {{ link_type | set(bma_peers) }} Metric : {{ metric }} </group> </group> </group> </group>","title":"huawei_display_ospf_lsdb_router"},{"location":"ttp_templates/platform.juniper_show_isis_database_verbose_pipe_no_more/","text":"Reference path: ttp://platform/juniper_show_isis_database_verbose_pipe_no_more.txt Template to parse ISIS LSDB of Juniper JunOS devices out of \"show isis database extensive | no-more\" command output. For this sample data: IS-IS level 2 link-state database: R1-X1.00-00 Sequence: 0x22425, Checksum: 0x8904, Lifetime: 463 secs IS neighbor: R1-X2.00 Metric: 20 Two-way fragment: R1-X2.00-00, Two-way first fragment: R1-X2.00-00 IP prefix: 10.123.123.31/32 Metric: 0 Internal Up IP prefix: 10.123.123.41/32 Metric: 0 Internal Up V6 prefix: ::ffff:10.123.111.236/126 Metric: 20 Internal Up Header: LSP ID: R1-X1.00-00, Length: 233 bytes Allocated length: 284 bytes, Router ID: 10.123.123.31 Remaining lifetime: 463 secs, Level: 2, Interface: 80 Estimated free bytes: 51, Actual free bytes: 51 Aging timer expires in: 463 secs Protocols: IP, IPv6 Packet: LSP ID: R1-X1.00-00, Length: 233 bytes, Lifetime : 1194 secs Checksum: 0x8904, Sequence: 0x22425, Attributes: 0x3 L1 L2 NLPID: 0x83, Fixed length: 27 bytes, Version: 1, Sysid length: 0 bytes Packet type: 20, Packet version: 1, Max area: 0 TLVs: Area address: 49.0001 (3) LSP Buffer Size: 1492 Speaks: IP Speaks: IPV6 IP router id: 10.123.123.31 IP address: 10.123.123.31 IPv6 TE Router ID: 2001::10:123:123:31 Hostname: R1-X1 Extended IS Reachability TLV, Type: 22, Length: 85 IS extended neighbor: R1-X2.00, Metric: default 20 SubTLV len: 74 IP address: 10.123.111.238 Neighbor's IP address: 10.123.111.237 Local interface index: 332, Remote interface index: 461 Current reservable bandwidth: Priority 0 : 7Gbps Priority 1 : 7Gbps Priority 2 : 7Gbps Priority 3 : 7Gbps Priority 4 : 7Gbps Priority 5 : 7Gbps Priority 6 : 6.7Gbps Priority 7 : 6.7Gbps Maximum reservable bandwidth: 7Gbps Maximum bandwidth: 10Gbps Administrative groups: 0 none IPv6 prefix: ::ffff:10.123.111.236/126 Metric 20 Up IP extended prefix: 10.123.123.31/32 metric 0 up IP extended prefix: 10.123.123.41/32 metric 0 up IP extended prefix: 10.123.111.236/30 metric 20 up IP address: 10.123.123.41 Authentication data: 17 bytes No queued transmissions This template produces this result: [[{'isis_processes': {'ISIS': {'R1-X1': [{'isis_area': '49.0001', 'level': '2', 'links': [{'bw_gbit': '10', 'local_intf_id': '332', 'local_ip': '10.123.111.238', 'metric': '20', 'peer_intf_id': '461', 'peer_ip': '10.123.111.237', 'peer_name': 'R1-X2'}], 'networks': [{'metric': '0', 'network': '10.123.123.31/32'}, {'metric': '0', 'network': '10.123.123.41/32'}, {'metric': '20', 'network': '::ffff:10.123.111.236/126'}], 'rid': '10.123.123.31', 'rid_v6': '2001::10:123:123:31'}]}}}]] Notes: Process ID (PID) always set to ISIS value as PID does not present in \"show isis database extensive | no-more\" command output on Juniper devices. Template Content <doc> Template to parse ISIS LSDB of Juniper JunOS devices out of \"show isis database extensive | no-more\" command output. For this sample data: ''' IS-IS level 2 link-state database: R1-X1.00-00 Sequence: 0x22425, Checksum: 0x8904, Lifetime: 463 secs IS neighbor: R1-X2.00 Metric: 20 Two-way fragment: R1-X2.00-00, Two-way first fragment: R1-X2.00-00 IP prefix: 10.123.123.31/32 Metric: 0 Internal Up IP prefix: 10.123.123.41/32 Metric: 0 Internal Up V6 prefix: ::ffff:10.123.111.236/126 Metric: 20 Internal Up Header: LSP ID: R1-X1.00-00, Length: 233 bytes Allocated length: 284 bytes, Router ID: 10.123.123.31 Remaining lifetime: 463 secs, Level: 2, Interface: 80 Estimated free bytes: 51, Actual free bytes: 51 Aging timer expires in: 463 secs Protocols: IP, IPv6 Packet: LSP ID: R1-X1.00-00, Length: 233 bytes, Lifetime : 1194 secs Checksum: 0x8904, Sequence: 0x22425, Attributes: 0x3 L1 L2 NLPID: 0x83, Fixed length: 27 bytes, Version: 1, Sysid length: 0 bytes Packet type: 20, Packet version: 1, Max area: 0 TLVs: Area address: 49.0001 (3) LSP Buffer Size: 1492 Speaks: IP Speaks: IPV6 IP router id: 10.123.123.31 IP address: 10.123.123.31 IPv6 TE Router ID: 2001::10:123:123:31 Hostname: R1-X1 Extended IS Reachability TLV, Type: 22, Length: 85 IS extended neighbor: R1-X2.00, Metric: default 20 SubTLV len: 74 IP address: 10.123.111.238 Neighbor's IP address: 10.123.111.237 Local interface index: 332, Remote interface index: 461 Current reservable bandwidth: Priority 0 : 7Gbps Priority 1 : 7Gbps Priority 2 : 7Gbps Priority 3 : 7Gbps Priority 4 : 7Gbps Priority 5 : 7Gbps Priority 6 : 6.7Gbps Priority 7 : 6.7Gbps Maximum reservable bandwidth: 7Gbps Maximum bandwidth: 10Gbps Administrative groups: 0 none IPv6 prefix: ::ffff:10.123.111.236/126 Metric 20 Up IP extended prefix: 10.123.123.31/32 metric 0 up IP extended prefix: 10.123.123.41/32 metric 0 up IP extended prefix: 10.123.111.236/30 metric 20 up IP address: 10.123.123.41 Authentication data: 17 bytes No queued transmissions ''' This template produces this result: ''' [[{'isis_processes': {'ISIS': {'R1-X1': [{'isis_area': '49.0001', 'level': '2', 'links': [{'bw_gbit': '10', 'local_intf_id': '332', 'local_ip': '10.123.111.238', 'metric': '20', 'peer_intf_id': '461', 'peer_ip': '10.123.111.237', 'peer_name': 'R1-X2'}], 'networks': [{'metric': '0', 'network': '10.123.123.31/32'}, {'metric': '0', 'network': '10.123.123.41/32'}, {'metric': '20', 'network': '::ffff:10.123.111.236/126'}], 'rid': '10.123.123.31', 'rid_v6': '2001::10:123:123:31'}]}}}]] ''' Notes: - Process ID (PID) always set to 'ISIS' value as PID does not present in \"show isis database extensive | no-more\" command output on Juniper devices. </doc> <group name=\"isis_processes.ISIS**\" functions=\"record('level') | del('level')\"> IS-IS level {{ level }} link-state database: <group name=\"{{ hostname }}*\" set=\"level\"> {{ hostname }}.00-00 Sequence: {{ ignore }}, Checksum: {{ ignore }}, Lifetime: {{ ignore }} secs Area address: {{ isis_area }} (3) IP router id: {{ rid }} IPv6 TE Router ID: {{ rid_v6 }} <group name=\"networks*\"> IP prefix: {{ network }} Metric: {{ metric | _start_ }} Internal Up V6 prefix: {{ network }} Metric: {{ metric | _start_ }} Internal Up </group> <group name=\"links*\"> IS extended neighbor: {{ peer_name }}.00, Metric: default {{ metric | _start_ }} SubTLV len: 74 IP address: {{ local_ip }} Neighbor's IP address: {{ peer_ip }} Local interface index: {{ local_intf_id }}, Remote interface index: {{ peer_intf_id }} Maximum bandwidth: {{ bw_gbit }}Gbps </group> </group> </group>","title":"juniper_show_isis_database_verbose_pipe_no_more"},{"location":"ttp_templates/platform.test_platform_show_run_pipe_sec_interface/","text":"Reference path: ttp://platform/test_platform_show_run_pipe_sec_interface.txt Template to help with testing ttp_templates api Template Content <doc> Template to help with testing ttp_templates api </doc> <group> interface {{ interface }} description {{ description | re(\".+\") }} encapsulation dot1q {{ dot1q }} ip address {{ ip }} {{ mask }} shutdown {{ disabled | set(True) }} </group>","title":"test_platform_show_run_pipe_sec_interface"},{"location":"ttp_templates/yang.ietf-interfaces_cisco_ios/","text":"Reference path: ttp://yang/ietf-interfaces_cisco_ios.txt This templates produces structured data compatible with ietf-interfaces YANG module out of Cisco IOS show run configuration output. YANG ietf-interfaces module tree: +--rw ietf-interfaces:interfaces | +--rw interface* [name] | +--ro admin-status {enumeration} | +--rw description? {string} | +--rw enabled? {boolean} | +--ro higher-layer-if* {interface-ref(leafref)} | +--ro if-index {int32} | +--rw ietf-ip:ipv4! | | +--rw address* [ip] | | | +--rw ip {ipv4-address-no-zone(string)} | | | +--ro origin? {ip-address-origin(enumeration)} | | | +--rw (subnet) | | | +--:(netmask) | | | | +--rw netmask? {dotted-quad(string)} | | | +--:(prefix-length) | | | +--rw prefix-length? {uint8} | | +--rw enabled? {boolean} | | +--rw forwarding? {boolean} | | +--rw mtu? {uint16} | | +--rw neighbor* [ip] | | +--rw ip {ipv4-address-no-zone(string)} | | +--rw link-layer-address {phys-address(string)} | | +--ro origin? {neighbor-origin(enumeration)} | +--rw ietf-ip:ipv6! | | +--rw address* [ip] | | | +--rw ip {ipv6-address-no-zone(string)} | | | +--ro origin? {ip-address-origin(enumeration)} | | | +--rw prefix-length {uint8} | | | +--ro status? {enumeration} | | +--rw autoconf | | | +--rw create-global-addresses? {boolean} | | | +--rw create-temporary-addresses? {boolean} | | | +--rw temporary-preferred-lifetime? {uint32} | | | +--rw temporary-valid-lifetime? {uint32} | | +--rw dup-addr-detect-transmits? {uint32} | | +--rw enabled? {boolean} | | +--rw forwarding? {boolean} | | +--rw mtu? {uint32} | | +--rw neighbor* [ip] | | +--rw ip {ipv6-address-no-zone(string)} | | +--ro is-router? {empty} | | +--rw link-layer-address {phys-address(string)} | | +--ro origin? {neighbor-origin(enumeration)} | | +--ro state? {enumeration} | +--ro last-change? {date-and-time(string)} | +--rw link-up-down-trap-enable? {enumeration} | +--ro lower-layer-if* {interface-ref(leafref)} | +--rw name {string} | +--ro oper-status {enumeration} | +--ro phys-address? {phys-address(string)} | +--ro speed? {gauge64(uint64)} | +--ro statistics | | +--ro discontinuity-time {date-and-time(string)} | | +--ro in-broadcast-pkts? {counter64(uint64)} | | +--ro in-discards? {counter32(uint32)} | | +--ro in-errors? {counter32(uint32)} | | +--ro in-multicast-pkts? {counter64(uint64)} | | +--ro in-octets? {counter64(uint64)} | | +--ro in-unicast-pkts? {counter64(uint64)} | | +--ro in-unknown-protos? {counter32(uint32)} | | +--ro out-broadcast-pkts? {counter64(uint64)} | | +--ro out-discards? {counter32(uint32)} | | +--ro out-errors? {counter32(uint32)} | | +--ro out-multicast-pkts? {counter64(uint64)} | | +--ro out-octets? {counter64(uint64)} | | +--ro out-unicast-pkts? {counter64(uint64)} | +--rw type {identityref} +--ro ietf-interfaces:interfaces-state +--ro interface* [name] +--ro admin-status {enumeration} +--ro higher-layer-if* {interface-state-ref(leafref)} +--ro if-index {int32} +--ro ietf-ip:ipv4! | +--ro address* [ip] | | +--ro ip {ipv4-address-no-zone(string)} | | +--ro origin? {ip-address-origin(enumeration)} | | +--ro (subnet)? | | +--:(netmask) | | | +--ro netmask? {dotted-quad(string)} | | +--:(prefix-length) | | +--ro prefix-length? {uint8} | +--ro forwarding? {boolean} | +--ro mtu? {uint16} | +--ro neighbor* [ip] | +--ro ip {ipv4-address-no-zone(string)} | +--ro link-layer-address? {phys-address(string)} | +--ro origin? {neighbor-origin(enumeration)} +--ro ietf-ip:ipv6! | +--ro address* [ip] | | +--ro ip {ipv6-address-no-zone(string)} | | +--ro origin? {ip-address-origin(enumeration)} | | +--ro prefix-length {uint8} | | +--ro status? {enumeration} | +--ro forwarding? {boolean} | +--ro mtu? {uint32} | +--ro neighbor* [ip] | +--ro ip {ipv6-address-no-zone(string)} | +--ro is-router? {empty} | +--ro link-layer-address? {phys-address(string)} | +--ro origin? {neighbor-origin(enumeration)} | +--ro state? {enumeration} +--ro last-change? {date-and-time(string)} +--ro lower-layer-if* {interface-state-ref(leafref)} +--ro name {string} +--ro oper-status {enumeration} +--ro phys-address? {phys-address(string)} +--ro speed? {gauge64(uint64)} +--ro statistics | +--ro discontinuity-time {date-and-time(string)} | +--ro in-broadcast-pkts? {counter64(uint64)} | +--ro in-discards? {counter32(uint32)} | +--ro in-errors? {counter32(uint32)} | +--ro in-multicast-pkts? {counter64(uint64)} | +--ro in-octets? {counter64(uint64)} | +--ro in-unicast-pkts? {counter64(uint64)} | +--ro in-unknown-protos? {counter32(uint32)} | +--ro out-broadcast-pkts? {counter64(uint64)} | +--ro out-discards? {counter32(uint32)} | +--ro out-errors? {counter32(uint32)} | +--ro out-multicast-pkts? {counter64(uint64)} | +--ro out-octets? {counter64(uint64)} | +--ro out-unicast-pkts? {counter64(uint64)} +--ro type {identityref} Sample data: interface GigabitEthernet1/3.251 description Customer #32148 encapsulation dot1q 251 ip address 172.16.33.10 255.255.255.128 shutdown ! interface GigabitEthernet1/4 description vCPEs access control ip address 172.16.33.10 255.255.255.128 ! Sample results: { \"ietf-interfaces:interfaces\": { \"interface\": [ { \"admin-status\": \"down\", \"description\": \"Customer \" \"#32148\", \"enabled\": False, \"ietf-ip:ipv4\": { \"address\": [ { \"ip\": \"172.16.33.10\", \"netmask\": \"255.255.255.128\", \"origin\": \"static\", } ] }, \"if-index\": 1, \"link-up-down-trap-enable\": \"enabled\", \"name\": \"GigabitEthernet1/3.251\", \"oper-status\": \"unknown\", \"statistics\": { \"discontinuity-time\": \"1970-01-01T00:00:00+00:00\" }, \"type\": \"iana-if-type:ethernetCsmacd\", }, { \"admin-status\": \"up\", \"description\": \"vCPEs \" \"access \" \"control\", \"enabled\": True, \"ietf-ip:ipv4\": { \"address\": [ { \"ip\": \"172.16.33.10\", \"netmask\": \"255.255.255.128\", \"origin\": \"static\", } ] }, \"if-index\": 1, \"link-up-down-trap-enable\": \"enabled\", \"name\": \"GigabitEthernet1/4\", \"oper-status\": \"unknown\", \"statistics\": { \"discontinuity-time\": \"1970-01-01T00:00:00+00:00\" }, \"type\": \"iana-if-type:ethernetCsmacd\", }, ] } } ---------------------------------------------------------------------------- Cisco IOS interfaces groups and inputs ---------------------------------------------------------------------------- Template Content <doc> This templates produces structured data compatible with ietf-interfaces YANG module out of Cisco IOS 'show run' configuration output. YANG ietf-interfaces module tree: ''' +--rw ietf-interfaces:interfaces | +--rw interface* [name] | +--ro admin-status {enumeration} | +--rw description? {string} | +--rw enabled? {boolean} | +--ro higher-layer-if* {interface-ref(leafref)} | +--ro if-index {int32} | +--rw ietf-ip:ipv4! | | +--rw address* [ip] | | | +--rw ip {ipv4-address-no-zone(string)} | | | +--ro origin? {ip-address-origin(enumeration)} | | | +--rw (subnet) | | | +--:(netmask) | | | | +--rw netmask? {dotted-quad(string)} | | | +--:(prefix-length) | | | +--rw prefix-length? {uint8} | | +--rw enabled? {boolean} | | +--rw forwarding? {boolean} | | +--rw mtu? {uint16} | | +--rw neighbor* [ip] | | +--rw ip {ipv4-address-no-zone(string)} | | +--rw link-layer-address {phys-address(string)} | | +--ro origin? {neighbor-origin(enumeration)} | +--rw ietf-ip:ipv6! | | +--rw address* [ip] | | | +--rw ip {ipv6-address-no-zone(string)} | | | +--ro origin? {ip-address-origin(enumeration)} | | | +--rw prefix-length {uint8} | | | +--ro status? {enumeration} | | +--rw autoconf | | | +--rw create-global-addresses? {boolean} | | | +--rw create-temporary-addresses? {boolean} | | | +--rw temporary-preferred-lifetime? {uint32} | | | +--rw temporary-valid-lifetime? {uint32} | | +--rw dup-addr-detect-transmits? {uint32} | | +--rw enabled? {boolean} | | +--rw forwarding? {boolean} | | +--rw mtu? {uint32} | | +--rw neighbor* [ip] | | +--rw ip {ipv6-address-no-zone(string)} | | +--ro is-router? {empty} | | +--rw link-layer-address {phys-address(string)} | | +--ro origin? {neighbor-origin(enumeration)} | | +--ro state? {enumeration} | +--ro last-change? {date-and-time(string)} | +--rw link-up-down-trap-enable? {enumeration} | +--ro lower-layer-if* {interface-ref(leafref)} | +--rw name {string} | +--ro oper-status {enumeration} | +--ro phys-address? {phys-address(string)} | +--ro speed? {gauge64(uint64)} | +--ro statistics | | +--ro discontinuity-time {date-and-time(string)} | | +--ro in-broadcast-pkts? {counter64(uint64)} | | +--ro in-discards? {counter32(uint32)} | | +--ro in-errors? {counter32(uint32)} | | +--ro in-multicast-pkts? {counter64(uint64)} | | +--ro in-octets? {counter64(uint64)} | | +--ro in-unicast-pkts? {counter64(uint64)} | | +--ro in-unknown-protos? {counter32(uint32)} | | +--ro out-broadcast-pkts? {counter64(uint64)} | | +--ro out-discards? {counter32(uint32)} | | +--ro out-errors? {counter32(uint32)} | | +--ro out-multicast-pkts? {counter64(uint64)} | | +--ro out-octets? {counter64(uint64)} | | +--ro out-unicast-pkts? {counter64(uint64)} | +--rw type {identityref} +--ro ietf-interfaces:interfaces-state +--ro interface* [name] +--ro admin-status {enumeration} +--ro higher-layer-if* {interface-state-ref(leafref)} +--ro if-index {int32} +--ro ietf-ip:ipv4! | +--ro address* [ip] | | +--ro ip {ipv4-address-no-zone(string)} | | +--ro origin? {ip-address-origin(enumeration)} | | +--ro (subnet)? | | +--:(netmask) | | | +--ro netmask? {dotted-quad(string)} | | +--:(prefix-length) | | +--ro prefix-length? {uint8} | +--ro forwarding? {boolean} | +--ro mtu? {uint16} | +--ro neighbor* [ip] | +--ro ip {ipv4-address-no-zone(string)} | +--ro link-layer-address? {phys-address(string)} | +--ro origin? {neighbor-origin(enumeration)} +--ro ietf-ip:ipv6! | +--ro address* [ip] | | +--ro ip {ipv6-address-no-zone(string)} | | +--ro origin? {ip-address-origin(enumeration)} | | +--ro prefix-length {uint8} | | +--ro status? {enumeration} | +--ro forwarding? {boolean} | +--ro mtu? {uint32} | +--ro neighbor* [ip] | +--ro ip {ipv6-address-no-zone(string)} | +--ro is-router? {empty} | +--ro link-layer-address? {phys-address(string)} | +--ro origin? {neighbor-origin(enumeration)} | +--ro state? {enumeration} +--ro last-change? {date-and-time(string)} +--ro lower-layer-if* {interface-state-ref(leafref)} +--ro name {string} +--ro oper-status {enumeration} +--ro phys-address? {phys-address(string)} +--ro speed? {gauge64(uint64)} +--ro statistics | +--ro discontinuity-time {date-and-time(string)} | +--ro in-broadcast-pkts? {counter64(uint64)} | +--ro in-discards? {counter32(uint32)} | +--ro in-errors? {counter32(uint32)} | +--ro in-multicast-pkts? {counter64(uint64)} | +--ro in-octets? {counter64(uint64)} | +--ro in-unicast-pkts? {counter64(uint64)} | +--ro in-unknown-protos? {counter32(uint32)} | +--ro out-broadcast-pkts? {counter64(uint64)} | +--ro out-discards? {counter32(uint32)} | +--ro out-errors? {counter32(uint32)} | +--ro out-multicast-pkts? {counter64(uint64)} | +--ro out-octets? {counter64(uint64)} | +--ro out-unicast-pkts? {counter64(uint64)} +--ro type {identityref} ''' Sample data: ''' interface GigabitEthernet1/3.251 description Customer #32148 encapsulation dot1q 251 ip address 172.16.33.10 255.255.255.128 shutdown ! interface GigabitEthernet1/4 description vCPEs access control ip address 172.16.33.10 255.255.255.128 ! ''' Sample results: ''' { \"ietf-interfaces:interfaces\": { \"interface\": [ { \"admin-status\": \"down\", \"description\": \"Customer \" \"#32148\", \"enabled\": False, \"ietf-ip:ipv4\": { \"address\": [ { \"ip\": \"172.16.33.10\", \"netmask\": \"255.255.255.128\", \"origin\": \"static\", } ] }, \"if-index\": 1, \"link-up-down-trap-enable\": \"enabled\", \"name\": \"GigabitEthernet1/3.251\", \"oper-status\": \"unknown\", \"statistics\": { \"discontinuity-time\": \"1970-01-01T00:00:00+00:00\" }, \"type\": \"iana-if-type:ethernetCsmacd\", }, { \"admin-status\": \"up\", \"description\": \"vCPEs \" \"access \" \"control\", \"enabled\": True, \"ietf-ip:ipv4\": { \"address\": [ { \"ip\": \"172.16.33.10\", \"netmask\": \"255.255.255.128\", \"origin\": \"static\", } ] }, \"if-index\": 1, \"link-up-down-trap-enable\": \"enabled\", \"name\": \"GigabitEthernet1/4\", \"oper-status\": \"unknown\", \"statistics\": { \"discontinuity-time\": \"1970-01-01T00:00:00+00:00\" }, \"type\": \"iana-if-type:ethernetCsmacd\", }, ] } } ''' </doc> <macro> def add_iftype(data): if \"eth\" in data.lower(): return data, {\"type\": \"iana-if-type:ethernetCsmacd\"} return data, {\"type\": None} </macro> <doc> # ---------------------------------------------------------------------------- # Cisco IOS interfaces groups and inputs # ---------------------------------------------------------------------------- </doc> <input> commands = [ \"show running-config | section interface\", \"show interface\" ] </input> <group name=\"ietf-interfaces:interfaces.interface*\"> ## ---------------------------------------------------------------------------- ## ietf-interface section ## ---------------------------------------------------------------------------- interface {{ name | macro(add_iftype) }} description {{ description | re(\".+\") }} shutdown {{ enabled | set(False) | let(\"admin-status\", \"down\") }} {{ link-up-down-trap-enable | set(enabled) }} {{ admin-status | set(up) }} {{ enabled | set(True) }} {{ if-index | set(1) }} {{ statistics | set({\"discontinuity-time\": \"1970-01-01T00:00:00+00:00\"}) }} {{ oper-status | set(unknown) }} ## ---------------------------------------------------------------------------- ## ietf-ip section ## ---------------------------------------------------------------------------- <group name=\"ietf-ip:ipv4\"> ip mtu {{ mtu | to_int }} </group> <group name=\"ietf-ip:ipv4.address*\"> ip address {{ ip | _start_ }} {{ netmask }} ip address {{ ip | _start_ }} {{ netmask }} secondary {{ origin | set(static) }} </group> <group name=\"ietf-ip:ipv6.address*\"> ipv6 address {{ ip | _start_ }}/{{ prefix-length | to_int }} {{ origin | set(static) }} </group> </group> <output condition=\"validate_with_yangson, True\"> validate_yangson=\"'./yang-modules/ietf/'\" </output>","title":"ietf-interfaces_cisco_ios"},{"location":"ttp_templates/yang.ietf-interfaces_cisco_ios/#-","text":"","title":"----------------------------------------------------------------------------"},{"location":"ttp_templates/yang.ietf-interfaces_cisco_ios/#cisco-ios-interfaces-groups-and-inputs","text":"","title":"Cisco IOS interfaces groups and inputs"},{"location":"ttp_templates/yang.ietf-interfaces_cisco_ios/#-_1","text":"Template Content <doc> This templates produces structured data compatible with ietf-interfaces YANG module out of Cisco IOS 'show run' configuration output. YANG ietf-interfaces module tree: ''' +--rw ietf-interfaces:interfaces | +--rw interface* [name] | +--ro admin-status {enumeration} | +--rw description? {string} | +--rw enabled? {boolean} | +--ro higher-layer-if* {interface-ref(leafref)} | +--ro if-index {int32} | +--rw ietf-ip:ipv4! | | +--rw address* [ip] | | | +--rw ip {ipv4-address-no-zone(string)} | | | +--ro origin? {ip-address-origin(enumeration)} | | | +--rw (subnet) | | | +--:(netmask) | | | | +--rw netmask? {dotted-quad(string)} | | | +--:(prefix-length) | | | +--rw prefix-length? {uint8} | | +--rw enabled? {boolean} | | +--rw forwarding? {boolean} | | +--rw mtu? {uint16} | | +--rw neighbor* [ip] | | +--rw ip {ipv4-address-no-zone(string)} | | +--rw link-layer-address {phys-address(string)} | | +--ro origin? {neighbor-origin(enumeration)} | +--rw ietf-ip:ipv6! | | +--rw address* [ip] | | | +--rw ip {ipv6-address-no-zone(string)} | | | +--ro origin? {ip-address-origin(enumeration)} | | | +--rw prefix-length {uint8} | | | +--ro status? {enumeration} | | +--rw autoconf | | | +--rw create-global-addresses? {boolean} | | | +--rw create-temporary-addresses? {boolean} | | | +--rw temporary-preferred-lifetime? {uint32} | | | +--rw temporary-valid-lifetime? {uint32} | | +--rw dup-addr-detect-transmits? {uint32} | | +--rw enabled? {boolean} | | +--rw forwarding? {boolean} | | +--rw mtu? {uint32} | | +--rw neighbor* [ip] | | +--rw ip {ipv6-address-no-zone(string)} | | +--ro is-router? {empty} | | +--rw link-layer-address {phys-address(string)} | | +--ro origin? {neighbor-origin(enumeration)} | | +--ro state? {enumeration} | +--ro last-change? {date-and-time(string)} | +--rw link-up-down-trap-enable? {enumeration} | +--ro lower-layer-if* {interface-ref(leafref)} | +--rw name {string} | +--ro oper-status {enumeration} | +--ro phys-address? {phys-address(string)} | +--ro speed? {gauge64(uint64)} | +--ro statistics | | +--ro discontinuity-time {date-and-time(string)} | | +--ro in-broadcast-pkts? {counter64(uint64)} | | +--ro in-discards? {counter32(uint32)} | | +--ro in-errors? {counter32(uint32)} | | +--ro in-multicast-pkts? {counter64(uint64)} | | +--ro in-octets? {counter64(uint64)} | | +--ro in-unicast-pkts? {counter64(uint64)} | | +--ro in-unknown-protos? {counter32(uint32)} | | +--ro out-broadcast-pkts? {counter64(uint64)} | | +--ro out-discards? {counter32(uint32)} | | +--ro out-errors? {counter32(uint32)} | | +--ro out-multicast-pkts? {counter64(uint64)} | | +--ro out-octets? {counter64(uint64)} | | +--ro out-unicast-pkts? {counter64(uint64)} | +--rw type {identityref} +--ro ietf-interfaces:interfaces-state +--ro interface* [name] +--ro admin-status {enumeration} +--ro higher-layer-if* {interface-state-ref(leafref)} +--ro if-index {int32} +--ro ietf-ip:ipv4! | +--ro address* [ip] | | +--ro ip {ipv4-address-no-zone(string)} | | +--ro origin? {ip-address-origin(enumeration)} | | +--ro (subnet)? | | +--:(netmask) | | | +--ro netmask? {dotted-quad(string)} | | +--:(prefix-length) | | +--ro prefix-length? {uint8} | +--ro forwarding? {boolean} | +--ro mtu? {uint16} | +--ro neighbor* [ip] | +--ro ip {ipv4-address-no-zone(string)} | +--ro link-layer-address? {phys-address(string)} | +--ro origin? {neighbor-origin(enumeration)} +--ro ietf-ip:ipv6! | +--ro address* [ip] | | +--ro ip {ipv6-address-no-zone(string)} | | +--ro origin? {ip-address-origin(enumeration)} | | +--ro prefix-length {uint8} | | +--ro status? {enumeration} | +--ro forwarding? {boolean} | +--ro mtu? {uint32} | +--ro neighbor* [ip] | +--ro ip {ipv6-address-no-zone(string)} | +--ro is-router? {empty} | +--ro link-layer-address? {phys-address(string)} | +--ro origin? {neighbor-origin(enumeration)} | +--ro state? {enumeration} +--ro last-change? {date-and-time(string)} +--ro lower-layer-if* {interface-state-ref(leafref)} +--ro name {string} +--ro oper-status {enumeration} +--ro phys-address? {phys-address(string)} +--ro speed? {gauge64(uint64)} +--ro statistics | +--ro discontinuity-time {date-and-time(string)} | +--ro in-broadcast-pkts? {counter64(uint64)} | +--ro in-discards? {counter32(uint32)} | +--ro in-errors? {counter32(uint32)} | +--ro in-multicast-pkts? {counter64(uint64)} | +--ro in-octets? {counter64(uint64)} | +--ro in-unicast-pkts? {counter64(uint64)} | +--ro in-unknown-protos? {counter32(uint32)} | +--ro out-broadcast-pkts? {counter64(uint64)} | +--ro out-discards? {counter32(uint32)} | +--ro out-errors? {counter32(uint32)} | +--ro out-multicast-pkts? {counter64(uint64)} | +--ro out-octets? {counter64(uint64)} | +--ro out-unicast-pkts? {counter64(uint64)} +--ro type {identityref} ''' Sample data: ''' interface GigabitEthernet1/3.251 description Customer #32148 encapsulation dot1q 251 ip address 172.16.33.10 255.255.255.128 shutdown ! interface GigabitEthernet1/4 description vCPEs access control ip address 172.16.33.10 255.255.255.128 ! ''' Sample results: ''' { \"ietf-interfaces:interfaces\": { \"interface\": [ { \"admin-status\": \"down\", \"description\": \"Customer \" \"#32148\", \"enabled\": False, \"ietf-ip:ipv4\": { \"address\": [ { \"ip\": \"172.16.33.10\", \"netmask\": \"255.255.255.128\", \"origin\": \"static\", } ] }, \"if-index\": 1, \"link-up-down-trap-enable\": \"enabled\", \"name\": \"GigabitEthernet1/3.251\", \"oper-status\": \"unknown\", \"statistics\": { \"discontinuity-time\": \"1970-01-01T00:00:00+00:00\" }, \"type\": \"iana-if-type:ethernetCsmacd\", }, { \"admin-status\": \"up\", \"description\": \"vCPEs \" \"access \" \"control\", \"enabled\": True, \"ietf-ip:ipv4\": { \"address\": [ { \"ip\": \"172.16.33.10\", \"netmask\": \"255.255.255.128\", \"origin\": \"static\", } ] }, \"if-index\": 1, \"link-up-down-trap-enable\": \"enabled\", \"name\": \"GigabitEthernet1/4\", \"oper-status\": \"unknown\", \"statistics\": { \"discontinuity-time\": \"1970-01-01T00:00:00+00:00\" }, \"type\": \"iana-if-type:ethernetCsmacd\", }, ] } } ''' </doc> <macro> def add_iftype(data): if \"eth\" in data.lower(): return data, {\"type\": \"iana-if-type:ethernetCsmacd\"} return data, {\"type\": None} </macro> <doc> # ---------------------------------------------------------------------------- # Cisco IOS interfaces groups and inputs # ---------------------------------------------------------------------------- </doc> <input> commands = [ \"show running-config | section interface\", \"show interface\" ] </input> <group name=\"ietf-interfaces:interfaces.interface*\"> ## ---------------------------------------------------------------------------- ## ietf-interface section ## ---------------------------------------------------------------------------- interface {{ name | macro(add_iftype) }} description {{ description | re(\".+\") }} shutdown {{ enabled | set(False) | let(\"admin-status\", \"down\") }} {{ link-up-down-trap-enable | set(enabled) }} {{ admin-status | set(up) }} {{ enabled | set(True) }} {{ if-index | set(1) }} {{ statistics | set({\"discontinuity-time\": \"1970-01-01T00:00:00+00:00\"}) }} {{ oper-status | set(unknown) }} ## ---------------------------------------------------------------------------- ## ietf-ip section ## ---------------------------------------------------------------------------- <group name=\"ietf-ip:ipv4\"> ip mtu {{ mtu | to_int }} </group> <group name=\"ietf-ip:ipv4.address*\"> ip address {{ ip | _start_ }} {{ netmask }} ip address {{ ip | _start_ }} {{ netmask }} secondary {{ origin | set(static) }} </group> <group name=\"ietf-ip:ipv6.address*\"> ipv6 address {{ ip | _start_ }}/{{ prefix-length | to_int }} {{ origin | set(static) }} </group> </group> <output condition=\"validate_with_yangson, True\"> validate_yangson=\"'./yang-modules/ietf/'\" </output>","title":"----------------------------------------------------------------------------"},{"location":"ttp_templates/yang.openconfig-lldp_cisco_ios/","text":"Reference path: ttp://yang/openconfig-lldp_cisco_ios.txt Template to produce openconfig-lldp compatible structure by parsing output of this Cisco IOS command: show lldp neighbors detail Device output should contain device prompt, otherwise device hostname will not be extracted. Returns result compatible with this subset of openconfig-lldp YANG model: module: openconfig-lldp +--rw lldp +--rw config | +--rw system-name? string +--rw interfaces +--rw interface* [name] +--rw name +--ro neighbors +--ro neighbor* [id] +--ro id +--ro state | +--ro system-name? string | +--ro system-description? string | +--ro chassis-id? string | +--ro chassis-id-type? oc-lldp-types:chassis-id-type | +--ro id? string | +--ro port-id? string | +--ro port-id-type? oc-lldp-types:port-id-type | +--ro port-description? string | +--ro management-address? string +--ro capabilities +--ro capability* [name] +--ro name Template Content <doc> Template to produce openconfig-lldp compatible structure by parsing output of this Cisco IOS command: - show lldp neighbors detail Device output should contain device prompt, otherwise device hostname will not be extracted. Returns result compatible with this subset of openconfig-lldp YANG model: ''' module: openconfig-lldp +--rw lldp +--rw config | +--rw system-name? string +--rw interfaces +--rw interface* [name] +--rw name +--ro neighbors +--ro neighbor* [id] +--ro id +--ro state | +--ro system-name? string | +--ro system-description? string | +--ro chassis-id? string | +--ro chassis-id-type? oc-lldp-types:chassis-id-type | +--ro id? string | +--ro port-id? string | +--ro port-id-type? oc-lldp-types:port-id-type | +--ro port-description? string | +--ro management-address? string +--ro capabilities +--ro capability* [name] +--ro name ''' </doc> <macro> def process(data): \"\"\" Function to process parsing results in a structure compatible with openconfig-lldp YANG module. Parsing results are a dictionary keyed by interface name, that is done to combine multiple neighbors in a list under the interface, while in opencofnig-lldp model structure under \"lldp.interfaces.inderface\" must be a list. Moreover, neighbors must contain \"id\" key and use \"state\" key to store information about neighbour details. \"\"\" ret = [] for res_item in data: # transform dictionary of interfaces into a list ret_template = { \"opencondig-lldp\": { \"lldp\": { \"interfaces\": {\"interface\": []}, \"config\": { \"system-name\": res_item.get(\"system_name\", {}).get(\"hostname\") } } } } interfaces = res_item.get(\"lldp\", {}).get(\"interfaces\", {}).get(\"inderface\", {}) for interface_name, interface_data in interfaces.items(): # set neighbors IDs and form structure with \"state\" key neighbors = interface_data[\"neighbors\"][\"neighbor\"] interface_data[\"neighbors\"][\"neighbor\"] = [] for id, neigbour in enumerate(neighbors, 1): interface_data[\"neighbors\"][\"neighbor\"].append( { \"id\": id, \"state\": {\"id\": id, **neigbour} } ) # form final interface structure ret_template[\"opencondig-lldp\"][\"lldp\"][\"interfaces\"][\"interface\"].append( { \"name\": interface_name, **interface_data } ) ret.append(ret_template) return ret def map_capabilities(data): \"\"\" Function to map capabilities \"\"\" ret = [] mapper = { \"B\": {\"name\": \"MAC_BRIDGE\"}, \"R\": {\"name\": \"ROUTER\"} } for code in data.get(\"codes\", []): if code in mapper: ret.append(mapper[code]) return {\"capability\": ret} </macro> <vars> ifmap = { 'ATM': ['^ATM', '^AT'], 'BDI': ['^Bd', '^Bdi'], 'EOBC': ['^EOBC', '^EO'], 'Eth': ['^Ethernet', '^Eth', '^eth', r'^Et(?=\\d)', r'^et(?=\\d)'], 'FE': ['^FastEthernet', '^FastEth', '^FastE', '^Fast', '^Fas', '^FE', '^Fa', '^fa'], 'Fddi': ['^Fddi', '^FD'], '50GE': ['^FiftyGigabitEthernet', '^FiftyGigEthernet', '^FiftyGigEth', '^FiftyGigE', '^FI', '^Fi', '^fi'], '40GE': ['^FortyGigabitEthernet', '^FortyGigEthernet', '^FortyGigEth', '^FortyGigE', '^FortyGig', '^FGE', '^FO', '^Fo'], '400GE': ['^FourHundredGigabitEthernet', '^FourHundredGigEthernet', '^FourHundredGigEth', '^FourHundredGigE', '^FourHundredGig', '^F', '^f'], 'GE': ['^GigabitEthernet', '^GigEthernet', '^GigEth', '^GigE', '^Gig', '^GE', '^Ge', '^ge', '^Gi', '^gi'], '100GE': ['^HundredGigabitEthernet', '^HundredGigEthernet', '^HundredGigEth', '^HundredGigE', '^HundredGig', '^Hu'], 'Lo': ['^Loopback', '^loopback', '^Lo', '^lo'], 'MFR': ['^MFR'], 'Ma': ['^Management_short'], 'MGMT': ['^Management', '^Mgmt', '^mgmt', '^Ma'], 'Multilink': ['^Multilink', '^Mu'], 'POS': ['^POS', '^PO'], 'LAG': ['^PortChannel', '^Port-channel', '^Port-Channel', '^port-channel', '^po', '^Po', \"^Bundle-Ether\", \"^BE\"], 'Serial': ['^Serial', '^Se', '^S'], '10GE': ['^TenGigabitEthernet', '^TenGigEthernet', '^TenGigEth', '^TenGigE', '^TenGig', '^TeGig', '^Ten', '^Te', '^te'], 'Tunnel': ['^Tunnel', '^Tun', '^Tu'], '25GE': ['^TwentyFiveGigabitEthernet', '^TwentyFiveGigEthernet', '^TwentyFiveGigEth', '^TwentyFiveGigE', '^TwentyFiveGig', '^Twe', '^TF', '^Tf', '^tf'], '2GE': ['^Tw', '^Two'], '200GE': ['^TwoHundredGigabitEthernet', '^TwoHundredGigEthernet', '^TwoHundredGigEth', '^TwoHundredGigE', '^TwoHundredGig', '^TH', '^Th', '^th'], 'VLAN': ['^VLAN', '^V', '^Vl'], 'Virtual-Access': ['^Virtual-Access', '^Vi'], 'Virtual-Template': ['^Virtual-Template', '^Vt'], 'WLAN': ['^Wlan-GigabitEthernet'], 'nve': ['^n', '^nv', '^nve'] } </vars> <vars name=\"system_name\"> hostname=\"gethostname\" </vars> <group name=\"lldp.interfaces.inderface**.{{ name }}\"> ## ## Parses \"show lldp neighbors detail\" output ## Local Intf: {{ name | resuball(ifmap) }} <group name=\"neighbors.neighbor*\"> Chassis id: {{ chassis-id | mac_eui }} Port id: {{ port-id | resuball(ifmap) }} Port Description: {{ port-description | re(\".+\") | default(None) }} System Name: {{ system-name }} IP: {{ management-address | default(None) }} <group name=\"_\"> System Description: {{ _start_ }} {{ system-description | _line_ | strip | joinmatches(\" \") }} Time remaining: {{ ignore }} seconds {{ _end_ }} </group> <group name=\"capabilities\" macro=\"map_capabilities\"> System Capabilities: {{ codes | split(\",\") }} </group> {{ port-id-type | set(\"INTERFACE_NAME\") }} {{ chassis-id-type | set(\"MAC_ADDRESS\") }} </group> </group> <output macro=\"process\"/> <output condition=\"validate_with_yangson, True\"> validate_yangson=\"'./yang-modules/openconfig/lldp/'\" </output>","title":"openconfig-lldp_cisco_ios"},{"location":"ttp_templates/yang.openconfig-lldp_cisco_nxos/","text":"Reference path: ttp://yang/openconfig-lldp_cisco_nxos.txt Required devices' commands output: show lldp neighbors detail Device output should contain device prompt, otherwise device hostname will not be extracted. Returns result compatible with this subset of openconfig-lldp YANG model: module: openconfig-lldp +--rw lldp +--rw config | +--rw system-name? string +--rw interfaces +--rw interface* [name] +--rw name +--ro neighbors +--ro neighbor* [id] +--ro id +--ro state | +--ro system-name? string | +--ro system-description? string | +--ro chassis-id? string | +--ro chassis-id-type? oc-lldp-types:chassis-id-type | +--ro id? string | +--ro port-id? string | +--ro port-id-type? oc-lldp-types:port-id-type | +--ro port-description? string | +--ro management-address? string +--ro capabilities +--ro capability* [name] +--ro name Template Content <doc> Required devices' commands output: - show lldp neighbors detail Device output should contain device prompt, otherwise device hostname will not be extracted. Returns result compatible with this subset of 'openconfig-lldp' YANG model: ''' module: openconfig-lldp +--rw lldp +--rw config | +--rw system-name? string +--rw interfaces +--rw interface* [name] +--rw name +--ro neighbors +--ro neighbor* [id] +--ro id +--ro state | +--ro system-name? string | +--ro system-description? string | +--ro chassis-id? string | +--ro chassis-id-type? oc-lldp-types:chassis-id-type | +--ro id? string | +--ro port-id? string | +--ro port-id-type? oc-lldp-types:port-id-type | +--ro port-description? string | +--ro management-address? string +--ro capabilities +--ro capability* [name] +--ro name ''' </doc> <macro> def process(data): \"\"\" Function to process parsing results in a structure compatible with openconfig-lldp YANG module. Parsing results are a dictionary keyed by interface name, that is done to combine multiple neighbors in a list under the interface, while in opencofnig-lldp model structure under \"lldp.interfaces.inderface\" must be a list. Moreover, neighbors must contain \"id\" key and use \"state\" key to store information about neighbor details. \"\"\" ret = [] for res_item in data: # transform dictionary of interfaces into a list ret_template = { \"opencondig-lldp\": { \"lldp\": { \"interfaces\": {\"interface\": []}, \"config\": { \"system-name\": res_item.get(\"system_name\", {}).get(\"hostname\") } } } } interfaces = res_item.get(\"lldp\", {}).get(\"interfaces\", {}).get(\"inderface\", {}) for interface_name, interface_data in interfaces.items(): # set neighbors IDs and form structure with \"state\" key neighbors = interface_data[\"neighbors\"][\"neighbor\"] interface_data[\"neighbors\"][\"neighbor\"] = [] for id, neigbour in enumerate(neighbors, 1): interface_data[\"neighbors\"][\"neighbor\"].append( { \"id\": id, \"state\": {\"id\": id, **neigbour} } ) # form final interface structure ret_template[\"opencondig-lldp\"][\"lldp\"][\"interfaces\"][\"interface\"].append( { \"name\": interface_name, **interface_data } ) ret.append(ret_template) return ret def map_capabilities(data): \"\"\" Function to map capabilities \"\"\" ret = [] mapper = { \"B\": {\"name\": \"MAC_BRIDGE\"}, \"R\": {\"name\": \"ROUTER\"} } for code in data.get(\"codes\", []): if code in mapper: ret.append(mapper[code]) return {\"capability\": ret} </macro> <vars> ifmap = { 'ATM': ['^ATM', '^AT'], 'BDI': ['^Bd', '^Bdi'], 'EOBC': ['^EOBC', '^EO'], 'Eth': ['^Ethernet', '^Eth', '^eth', r'^Et(?=\\d)', r'^et(?=\\d)'], 'FE': ['^FastEthernet', '^FastEth', '^FastE', '^Fast', '^Fas', '^FE', '^Fa', '^fa'], 'Fddi': ['^Fddi', '^FD'], '50GE': ['^FiftyGigabitEthernet', '^FiftyGigEthernet', '^FiftyGigEth', '^FiftyGigE', '^FI', '^Fi', '^fi'], '40GE': ['^FortyGigabitEthernet', '^FortyGigEthernet', '^FortyGigEth', '^FortyGigE', '^FortyGig', '^FGE', '^FO', '^Fo'], '400GE': ['^FourHundredGigabitEthernet', '^FourHundredGigEthernet', '^FourHundredGigEth', '^FourHundredGigE', '^FourHundredGig', '^F', '^f'], 'GE': ['^GigabitEthernet', '^GigEthernet', '^GigEth', '^GigE', '^Gig', '^GE', '^Ge', '^ge', '^Gi', '^gi'], '100GE': ['^HundredGigabitEthernet', '^HundredGigEthernet', '^HundredGigEth', '^HundredGigE', '^HundredGig', '^Hu'], 'Lo': ['^Loopback', '^loopback', '^Lo', '^lo'], 'MFR': ['^MFR'], 'Ma': ['^Management_short'], 'MGMT': ['^Management', '^Mgmt', '^mgmt', '^Ma'], 'Multilink': ['^Multilink', '^Mu'], 'POS': ['^POS', '^PO'], 'LAG': ['^PortChannel', '^Port-channel', '^Port-Channel', '^port-channel', '^po', '^Po', \"^Bundle-Ether\", \"^BE\"], 'Serial': ['^Serial', '^Se', '^S'], '10GE': ['^TenGigabitEthernet', '^TenGigEthernet', '^TenGigEth', '^TenGigE', '^TenGig', '^TeGig', '^Ten', '^Te', '^te'], 'Tunnel': ['^Tunnel', '^Tun', '^Tu'], '25GE': ['^TwentyFiveGigabitEthernet', '^TwentyFiveGigEthernet', '^TwentyFiveGigEth', '^TwentyFiveGigE', '^TwentyFiveGig', '^Twe', '^TF', '^Tf', '^tf'], '2GE': ['^Tw', '^Two'], '200GE': ['^TwoHundredGigabitEthernet', '^TwoHundredGigEthernet', '^TwoHundredGigEth', '^TwoHundredGigE', '^TwoHundredGig', '^TH', '^Th', '^th'], 'VLAN': ['^VLAN', '^V', '^Vl'], 'Virtual-Access': ['^Virtual-Access', '^Vi'], 'Virtual-Template': ['^Virtual-Template', '^Vt'], 'WLAN': ['^Wlan-GigabitEthernet'], 'nve': ['^n', '^nv', '^nve'] } </vars> <vars name=\"system_name\"> hostname=\"gethostname\" </vars> <group name=\"lldp.interfaces.inderface**.{{ local_port }}**.neighbors.neighbor*\"> ## ## Parses \"show lldp neighbors detail\" output ## Chassis id: {{ chassis-id | mac_eui }} Port id: {{ port-id | resuball(ifmap) }} Local Port id: {{ local_port | resuball(ifmap) }} Port Description: {{ port-description | re(\".+\") | default(None) }} System Name: {{ system-name }} Management Address: {{ management-address | default(None) }} <group name=\"_\"> System Description: {{ system-description | re(\".+\") | joinmatches(\" \") }} {{ system-description | _line_ | joinmatches(\" \") }} Time remaining: {{ ignore }} seconds {{ _end_ }} </group> <group name=\"capabilities\" macro=\"map_capabilities\"> System Capabilities: {{ codes | ORPHRASE | split(\", \") }} </group> {{ port-id-type | set(\"INTERFACE_NAME\") }} {{ chassis-id-type | set(\"MAC_ADDRESS\") }} </group> <output macro=\"process\"/>","title":"openconfig-lldp_cisco_nxos"},{"location":"ttp_templates/yang.openconfig-lldp_cisco_xr/","text":"Reference path: ttp://yang/openconfig-lldp_cisco_xr.txt Required devices' commands output: show lldp neighbors detail Device output should contain device prompt, otherwise device hostname will not be extracted. Returns result compatible with this subset of openconfig-lldp YANG model: module: openconfig-lldp +--rw lldp +--rw config | +--rw system-name? string +--rw interfaces +--rw interface* [name] +--rw name +--ro neighbors +--ro neighbor* [id] +--ro id +--ro state | +--ro system-name? string | +--ro system-description? string | +--ro chassis-id? string | +--ro chassis-id-type? oc-lldp-types:chassis-id-type | +--ro id? string | +--ro port-id? string | +--ro port-id-type? oc-lldp-types:port-id-type | +--ro port-description? string | +--ro management-address? string +--ro capabilities +--ro capability* [name] +--ro name Template Content <doc> Required devices' commands output: - show lldp neighbors detail Device output should contain device prompt, otherwise device hostname will not be extracted. Returns result compatible with this subset of 'openconfig-lldp' YANG model: ''' module: openconfig-lldp +--rw lldp +--rw config | +--rw system-name? string +--rw interfaces +--rw interface* [name] +--rw name +--ro neighbors +--ro neighbor* [id] +--ro id +--ro state | +--ro system-name? string | +--ro system-description? string | +--ro chassis-id? string | +--ro chassis-id-type? oc-lldp-types:chassis-id-type | +--ro id? string | +--ro port-id? string | +--ro port-id-type? oc-lldp-types:port-id-type | +--ro port-description? string | +--ro management-address? string +--ro capabilities +--ro capability* [name] +--ro name ''' </doc> <macro> def process(data): \"\"\" Function to process parsing results in a structure compatible with openconfig-lldp YANG module. Parsing results are a dictionary keyed by interface name, that is done to combine multiple neighbors in a list under the interface, while in opencofnig-lldp model structure under \"lldp.interfaces.inderface\" must be a list. Moreover, neighbors must contain \"id\" key and use \"state\" key to store information about neighbor details. \"\"\" ret = [] for res_item in data: # transform dictionary of interfaces into a list ret_template = { \"opencondig-lldp\": { \"lldp\": { \"interfaces\": {\"interface\": []}, \"config\": { \"system-name\": res_item.get(\"system_name\", {}).get(\"hostname\") } } } } interfaces = res_item.get(\"lldp\", {}).get(\"interfaces\", {}).get(\"inderface\", {}) for interface_name, interface_data in interfaces.items(): # set neighbors IDs and form structure with \"state\" key neighbors = interface_data[\"neighbors\"][\"neighbor\"] interface_data[\"neighbors\"][\"neighbor\"] = [] for id, neigbour in enumerate(neighbors, 1): interface_data[\"neighbors\"][\"neighbor\"].append( { \"id\": id, \"state\": {\"id\": id, **neigbour} } ) # form final interface structure ret_template[\"opencondig-lldp\"][\"lldp\"][\"interfaces\"][\"interface\"].append( { \"name\": interface_name, **interface_data } ) ret.append(ret_template) return ret def map_capabilities(data): \"\"\" Function to map capabilities \"\"\" ret = [] mapper = { \"B\": {\"name\": \"MAC_BRIDGE\"}, \"R\": {\"name\": \"ROUTER\"} } for code in data.get(\"codes\", []): if code in mapper: ret.append(mapper[code]) return {\"capability\": ret} </macro> <vars> ifmap = { 'ATM': ['^ATM', '^AT'], 'BDI': ['^Bd', '^Bdi'], 'EOBC': ['^EOBC', '^EO'], 'Eth': ['^Ethernet', '^Eth', '^eth', r'^Et(?=\\d)', r'^et(?=\\d)'], 'FE': ['^FastEthernet', '^FastEth', '^FastE', '^Fast', '^Fas', '^FE', '^Fa', '^fa'], 'Fddi': ['^Fddi', '^FD'], '50GE': ['^FiftyGigabitEthernet', '^FiftyGigEthernet', '^FiftyGigEth', '^FiftyGigE', '^FI', '^Fi', '^fi'], '40GE': ['^FortyGigabitEthernet', '^FortyGigEthernet', '^FortyGigEth', '^FortyGigE', '^FortyGig', '^FGE', '^FO', '^Fo'], '400GE': ['^FourHundredGigabitEthernet', '^FourHundredGigEthernet', '^FourHundredGigEth', '^FourHundredGigE', '^FourHundredGig', '^F', '^f'], 'GE': ['^GigabitEthernet', '^GigEthernet', '^GigEth', '^GigE', '^Gig', '^GE', '^Ge', '^ge', '^Gi', '^gi'], '100GE': ['^HundredGigabitEthernet', '^HundredGigEthernet', '^HundredGigEth', '^HundredGigE', '^HundredGig', '^Hu'], 'Lo': ['^Loopback', '^loopback', '^Lo', '^lo'], 'MFR': ['^MFR'], 'Ma': ['^Management_short'], 'MGMT': ['^Management', '^Mgmt', '^mgmt', '^Ma'], 'Multilink': ['^Multilink', '^Mu'], 'POS': ['^POS', '^PO'], 'LAG': ['^PortChannel', '^Port-channel', '^Port-Channel', '^port-channel', '^po', '^Po', \"^Bundle-Ether\", \"^BE\"], 'Serial': ['^Serial', '^Se', '^S'], '10GE': ['^TenGigabitEthernet', '^TenGigEthernet', '^TenGigEth', '^TenGigE', '^TenGig', '^TeGig', '^Ten', '^Te', '^te'], 'Tunnel': ['^Tunnel', '^Tun', '^Tu'], '25GE': ['^TwentyFiveGigabitEthernet', '^TwentyFiveGigEthernet', '^TwentyFiveGigEth', '^TwentyFiveGigE', '^TwentyFiveGig', '^Twe', '^TF', '^Tf', '^tf'], '2GE': ['^Tw', '^Two'], '200GE': ['^TwoHundredGigabitEthernet', '^TwoHundredGigEthernet', '^TwoHundredGigEth', '^TwoHundredGigE', '^TwoHundredGig', '^TH', '^Th', '^th'], 'VLAN': ['^VLAN', '^V', '^Vl'], 'Virtual-Access': ['^Virtual-Access', '^Vi'], 'Virtual-Template': ['^Virtual-Template', '^Vt'], 'WLAN': ['^Wlan-GigabitEthernet'], 'nve': ['^n', '^nv', '^nve'] } </vars> <vars name=\"system_name\"> hostname=\"gethostname\" </vars> <group name=\"lldp.interfaces.inderface**.{{ name }}**\"> ## ## Parses \"show lldp neighbors detail\" output ## Local Interface: {{ name | resuball(ifmap) }} <group name=\"neighbors.neighbor*\"> Chassis id: {{ chassis-id | mac_eui }} Port id: {{ port-id | resuball(ifmap) }} Port Description: {{ port-description | re(\".+\") | default(None) }} System Name: {{ system-name }} IPv4 address: {{ management-address | default(None) }} <group name=\"_\"> System Description: {{ _start_ }} {{ system-description | _line_ | strip | joinmatches(\" \") }} Time remaining: {{ ignore }} seconds {{ _end_ }} </group> <group name=\"capabilities\" macro=\"map_capabilities\"> System Capabilities: {{ codes | split(\",\") }} </group> {{ port-id-type | set(\"INTERFACE_NAME\") }} {{ chassis-id-type | set(\"MAC_ADDRESS\") }} </group> </group> <output macro=\"process\"/>","title":"openconfig-lldp_cisco_xr"}]}